#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ TeleShop Auth Bot - –¢–µ—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import asyncio
import logging
import threading
import time
from datetime import datetime, timedelta

# FastAPI –¥–ª—è API endpoints
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
auth_codes = {}

def generate_auth_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    import random
    import string
    return ''.join(random.choices(string.digits, k=6))

def cleanup_expired_codes():
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤"""
    current_time = time.time()
    expired_codes = [code for code, data in auth_codes.items() 
                     if current_time - data['created_at'] > 900]  # 15 –º–∏–Ω—É—Ç
    for code in expired_codes:
        del auth_codes[code]

def save_auth_code_to_memory(telegram_id, username, first_name, last_name, code):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–º—è—Ç–∏"""
    try:
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
        cleanup_expired_codes()
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        to_remove = [c for c, data in auth_codes.items() if data['telegram_id'] == str(telegram_id)]
        for c in to_remove:
            del auth_codes[c]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
        auth_codes[code] = {
            'telegram_id': str(telegram_id),
            'telegram_username': username,
            'telegram_first_name': first_name,
            'telegram_last_name': last_name,
            'created_at': time.time(),
            'expires_at': time.time() + 900,  # 15 –º–∏–Ω—É—Ç
            'used': False
        }
        
        logger.info(f"‚úÖ –ö–æ–¥ {code} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–∞: {e}")
        return False

def verify_auth_code_in_memory(code):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        cleanup_expired_codes()
        
        if code not in auth_codes:
            return None
        
        data = auth_codes[code]
        
        if data['used']:
            return None
        
        if time.time() > data['expires_at']:
            del auth_codes[code]
            return None
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        auth_codes[code]['used'] = True
        
        return {
            'telegram_id': data['telegram_id'],
            'telegram_username': data['telegram_username'],
            'telegram_first_name': data['telegram_first_name'],
            'telegram_last_name': data['telegram_last_name']
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞: {e}")
        return None

# FastAPI –º–æ–¥–µ–ª–∏
class CodeVerifyRequest(BaseModel):
    code: str

class CodeVerifyResponse(BaseModel):
    success: bool
    session_token: str = None
    expires_in: int = None
    message: str = None
    user: dict = None

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="TeleShop Auth Bot API (Test)", version="1.0.0")

# CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://77.73.232.46:3000", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {
        "status": "ok", 
        "bot": "teleshop_auth_bot_test", 
        "timestamp": datetime.now().isoformat(),
        "codes_count": len(auth_codes)
    }

@app.post("/api/auth/verify-code", response_model=CodeVerifyResponse)
async def verify_code(request: CodeVerifyRequest):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    code = request.code.strip()
    
    logger.info(f"üîç API: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ {code}")
    
    if not code or len(code) != 6 or not code.isdigit():
        logger.warning(f"‚ùå API: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞: {code}")
        raise HTTPException(status_code=400, detail="–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –≤ –ø–∞–º—è—Ç–∏
    user_data = verify_auth_code_in_memory(code)
    
    if not user_data:
        logger.warning(f"‚ùå API: –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥: {code}")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º session token
    import random
    session_token = f"teleshop_session_{user_data['telegram_id']}_{int(datetime.now().timestamp())}_{random.randint(100000, 999999)}"
    
    logger.info(f"‚úÖ API: –ö–æ–¥ {code} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['telegram_id']}")
    
    return CodeVerifyResponse(
        success=True,
        session_token=session_token,
        expires_in=86400,  # 24 —á–∞—Å–∞
        message="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
        user={
            "telegram_id": user_data['telegram_id'],
            "username": user_data['telegram_username'],
            "first_name": user_data['telegram_first_name'],
            "last_name": user_data['telegram_last_name']
        }
    )

@app.post("/test/generate-code")
async def test_generate_code():
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞"""
    code = generate_auth_code()
    
    success = save_auth_code_to_memory(
        telegram_id="123456789",
        username="test_user",
        first_name="Test",
        last_name="User",
        code=code
    )
    
    if success:
        return {
            "success": True,
            "code": code,
            "message": f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥ {code} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
            "expires_in": 900  # 15 –º–∏–Ω—É—Ç
        }
    else:
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ auth-bot —Å–µ—Ä–≤–µ—Ä–∞")
    logger.info("üåê API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:8080")
    logger.info("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://localhost:8080/docs")
    logger.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç: POST http://localhost:8080/test/generate-code")
    
    uvicorn.run(app, host="0.0.0.0", port=8080, log_level="info") 