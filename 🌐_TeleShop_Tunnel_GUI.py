#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üåê TeleShop Tunnel Manager GUI
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è–º–∏ LocalTunnel
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import subprocess
import threading
import time
import re
import os
import json
from datetime import datetime
import pyperclip

class TeleShopTunnelGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üåê TeleShop Tunnel Manager")
        self.root.geometry("800x600")
        self.root.configure(bg='#1a1a2e')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.tunnel_process = None
        self.tunnel_url = None
        self.components_status = {
            'tunnel': False,
            'auth_bot': False,
            'backend': False,
            'frontend': False
        }
        
        self.setup_ui()
        
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, bg='#1a1a2e')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            main_frame, 
            text="üåê TeleShop Tunnel Manager",
            font=('Arial', 20, 'bold'),
            fg='#4CAF50',
            bg='#1a1a2e'
        )
        title_label.pack(pady=(0, 20))
        
        # –§—Ä–µ–π–º —Ç—É–Ω–Ω–µ–ª—è
        tunnel_frame = tk.LabelFrame(
            main_frame,
            text="üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª–µ–º",
            font=('Arial', 12, 'bold'),
            fg='#ffffff',
            bg='#16213e',
            padx=15,
            pady=15
        )
        tunnel_frame.pack(fill=tk.X, pady=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è
        self.tunnel_btn = tk.Button(
            tunnel_frame,
            text="üåê –°–æ–∑–¥–∞—Ç—å —Ç—É–Ω–Ω–µ–ª—å",
            command=self.create_tunnel,
            bg='#4CAF50',
            fg='white',
            font=('Arial', 12, 'bold'),
            padx=20,
            pady=10,
            relief=tk.FLAT,
            cursor='hand2'
        )
        self.tunnel_btn.pack(pady=(0, 10))
        
        # URL –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        url_frame = tk.Frame(tunnel_frame, bg='#16213e')
        url_frame.pack(fill=tk.X, pady=(10, 0))
        
        tk.Label(
            url_frame,
            text="üìã –ü—É–±–ª–∏—á–Ω—ã–π URL:",
            font=('Arial', 10),
            fg='#ffffff',
            bg='#16213e'
        ).pack(anchor=tk.W)
        
        self.url_var = tk.StringVar(value="–¢—É–Ω–Ω–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω")
        self.url_entry = tk.Entry(
            url_frame,
            textvariable=self.url_var,
            font=('Arial', 11),
            state='readonly',
            width=60,
            bg='#2a2a3e',
            fg='#4CAF50',
            insertbackground='#4CAF50'
        )
        self.url_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, pady=(5, 0))
        
        self.copy_btn = tk.Button(
            url_frame,
            text="üìã",
            command=self.copy_url,
            bg='#2196F3',
            fg='white',
            font=('Arial', 10),
            padx=10,
            relief=tk.FLAT,
            cursor='hand2',
            state='disabled'
        )
        self.copy_btn.pack(side=tk.RIGHT, padx=(10, 0), pady=(5, 0))
        
        # –§—Ä–µ–π–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components_frame = tk.LabelFrame(
            main_frame,
            text="üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã",
            font=('Arial', 12, 'bold'),
            fg='#ffffff',
            bg='#16213e',
            padx=15,
            pady=15
        )
        components_frame.pack(fill=tk.X, pady=(0, 20))
        
        # –ö–Ω–æ–ø–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        buttons_frame = tk.Frame(components_frame, bg='#16213e')
        buttons_frame.pack(fill=tk.X)
        
        self.auth_btn = tk.Button(
            buttons_frame,
            text="ü§ñ Auth Bot",
            command=self.start_auth_bot,
            bg='#FF9800',
            fg='white',
            font=('Arial', 10, 'bold'),
            padx=15,
            pady=8,
            relief=tk.FLAT,
            cursor='hand2'
        )
        self.auth_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.backend_btn = tk.Button(
            buttons_frame,
            text="üîß Backend API",
            command=self.start_backend,
            bg='#9C27B0',
            fg='white',
            font=('Arial', 10, 'bold'),
            padx=15,
            pady=8,
            relief=tk.FLAT,
            cursor='hand2'
        )
        self.backend_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        self.frontend_btn = tk.Button(
            buttons_frame,
            text="üåê Frontend",
            command=self.start_frontend,
            bg='#2196F3',
            fg='white',
            font=('Arial', 10, 'bold'),
            padx=15,
            pady=8,
            relief=tk.FLAT,
            cursor='hand2'
        )
        self.frontend_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
        self.auto_btn = tk.Button(
            buttons_frame,
            text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë",
            command=self.start_all,
            bg='#4CAF50',
            fg='white',
            font=('Arial', 10, 'bold'),
            padx=20,
            pady=8,
            relief=tk.FLAT,
            cursor='hand2'
        )
        self.auto_btn.pack(side=tk.RIGHT)
        
        # –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        status_frame = tk.Frame(components_frame, bg='#16213e')
        status_frame.pack(fill=tk.X, pady=(15, 0))
        
        self.status_labels = {}
        for i, (key, name) in enumerate([
            ('tunnel', 'üåê –¢—É–Ω–Ω–µ–ª—å'),
            ('auth_bot', 'ü§ñ Auth Bot'),
            ('backend', 'üîß Backend'),
            ('frontend', 'üåê Frontend')
        ]):
            frame = tk.Frame(status_frame, bg='#16213e')
            frame.grid(row=0, column=i, padx=10, sticky='w')
            
            tk.Label(
                frame,
                text=name,
                font=('Arial', 9),
                fg='#ffffff',
                bg='#16213e'
            ).pack(anchor=tk.W)
            
            status_label = tk.Label(
                frame,
                text="‚ö´ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
                font=('Arial', 9),
                fg='#f44336',
                bg='#16213e'
            )
            status_label.pack(anchor=tk.W)
            self.status_labels[key] = status_label
        
        # –õ–æ–≥
        log_frame = tk.LabelFrame(
            main_frame,
            text="üìù –õ–æ–≥–∏",
            font=('Arial', 12, 'bold'),
            fg='#ffffff',
            bg='#16213e',
            padx=15,
            pady=15
        )
        log_frame.pack(fill=tk.BOTH, expand=True)
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame,
            height=10,
            bg='#1e1e1e',
            fg='#ffffff',
            font=('Consolas', 9),
            insertbackground='#4CAF50'
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
        clear_btn = tk.Button(
            log_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏",
            command=self.clear_logs,
            bg='#f44336',
            fg='white',
            font=('Arial', 9),
            padx=10,
            pady=5,
            relief=tk.FLAT,
            cursor='hand2'
        )
        clear_btn.pack(pady=(10, 0))
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.log("üéâ TeleShop Tunnel Manager –∑–∞–ø—É—â–µ–Ω!")
        self.log("üëâ –ù–∞–∂–º–∏—Ç–µ 'üåê –°–æ–∑–¥–∞—Ç—å —Ç—É–Ω–Ω–µ–ª—å' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    
    def log(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update()
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"""
        self.log_text.delete(1.0, tk.END)
    
    def update_status(self, component, status):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self.components_status[component] = status
        label = self.status_labels[component]
        
        if status:
            label.config(text="üü¢ –ó–∞–ø—É—â–µ–Ω", fg='#4CAF50')
        else:
            label.config(text="‚ö´ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", fg='#f44336')
    
    def create_tunnel(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç—É–Ω–Ω–µ–ª—å LocalTunnel"""
        if self.tunnel_process:
            self.log("‚ö†Ô∏è –¢—É–Ω–Ω–µ–ª—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        self.log("üåê –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è LocalTunnel...")
        self.tunnel_btn.config(text="‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...", state='disabled')
        
        def tunnel_thread():
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
                self.tunnel_process = subprocess.Popen(
                    ['npx', 'localtunnel', '--port', '3000'],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    cwd=os.getcwd()
                )
                
                # –ñ–¥–µ–º URL
                while True:
                    line = self.tunnel_process.stdout.readline()
                    if not line:
                        break
                    
                    # –ò—â–µ–º URL
                    match = re.search(r'your url is: (https://[^\s]+)', line)
                    if match:
                        self.tunnel_url = match.group(1)
                        self.root.after(0, self.tunnel_created)
                        break
                        
            except Exception as e:
                self.root.after(0, lambda: self.tunnel_error(str(e)))
        
        threading.Thread(target=tunnel_thread, daemon=True).start()
    
    def tunnel_created(self):
        """–¢—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ"""
        self.log(f"‚úÖ –¢—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω: {self.tunnel_url}")
        self.url_var.set(self.tunnel_url)
        self.copy_btn.config(state='normal')
        self.tunnel_btn.config(text="üü¢ –¢—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω", bg='#4CAF50')
        self.update_status('tunnel', True)
        
        # –°–æ–∑–¥–∞–µ–º .env.local —Ñ–∞–π–ª
        self.create_env_file()
        
    def tunnel_error(self, error):
        """–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è"""
        self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è: {error}")
        self.tunnel_btn.config(text="üåê –°–æ–∑–¥–∞—Ç—å —Ç—É–Ω–Ω–µ–ª—å", state='normal')
        self.tunnel_process = None
    
    def create_env_file(self):
        """–°–æ–∑–¥–∞—Ç—å .env.local —Ñ–∞–π–ª —Å —Ç—É–Ω–Ω–µ–ª—å–Ω—ã–º URL"""
        try:
            env_path = os.path.join("01-user-dashboard", ".env.local")
            with open(env_path, 'w', encoding='utf-8') as f:
                f.write("# Auto-generated by TeleShop Tunnel Manager\n")
                f.write(f"NEXT_PUBLIC_TUNNEL_URL={self.tunnel_url}\n")
            
            self.log(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {env_path}")
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env.local: {e}")
    
    def copy_url(self):
        """–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        if self.tunnel_url:
            pyperclip.copy(self.tunnel_url)
            self.log("üìã URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
            messagebox.showinfo("–£—Å–ø–µ—Ö", "URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
    
    def start_auth_bot(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Auth Bot"""
        self.log("ü§ñ –ó–∞–ø—É—Å–∫ Auth Bot...")
        try:
            subprocess.Popen(
                ['python', 'simple_auth_bot.py'],
                cwd=os.path.join(os.getcwd(), 'auth-bot'),
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
            self.update_status('auth_bot', True)
            self.log("‚úÖ Auth Bot –∑–∞–ø—É—â–µ–Ω –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Auth Bot: {e}")
    
    def start_backend(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Backend API"""
        self.log("üîß –ó–∞–ø—É—Å–∫ Backend API...")
        try:
            subprocess.Popen(
                ['python', 'main_secure_fixed.py'],
                cwd=os.path.join(os.getcwd(), '05-server-launchers', 'main'),
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
            self.update_status('backend', True)
            self.log("‚úÖ Backend API –∑–∞–ø—É—â–µ–Ω –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Backend API: {e}")
    
    def start_frontend(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å Frontend"""
        self.log("üåê –ó–∞–ø—É—Å–∫ Frontend...")
        try:
            subprocess.Popen(
                ['npm', 'run', 'dev'],
                cwd=os.path.join(os.getcwd(), '01-user-dashboard'),
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
            self.update_status('frontend', True)
            self.log("‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Frontend: {e}")
    
    def start_all(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        if not self.tunnel_url:
            self.log("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—É–Ω–Ω–µ–ª—å!")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        self.start_auth_bot()
        self.root.after(3000, self.start_backend)
        self.root.after(6000, self.start_frontend)
        
        self.log("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç—Å—è...")

def main():
    try:
        import pyperclip
    except ImportError:
        print("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ pyperclip...")
        subprocess.check_call(['pip', 'install', 'pyperclip'])
        import pyperclip
    
    root = tk.Tk()
    app = TeleShopTunnelGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main() 