#!/usr/bin/env python3
"""
ü§ñ Simple TeleShop Auth Bot - –ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ asyncio –ø—Ä–æ–±–ª–µ–º
"""

import logging
import random
import string
from datetime import datetime, timedelta
import psycopg2
from psycopg2.extras import RealDictCursor
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7503005367:AAF2rrpRUr0TXSKWJZsnlPwtuU-RidYLYos"  # @odnorazki_by_bot

# PostgreSQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_CONFIG = {
    'host': 'ladixoofilad.beget.app',
    'port': 5432,
    'database': 'default_db',
    'user': 'cloud_user',
    'password': 'u61e&ke&!Ty1'
}

def get_db_connection():
    """–ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL"""
    return psycopg2.connect(**DB_CONFIG)

def generate_auth_code(telegram_id, username=None, first_name=None, last_name=None):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    code = ''.join(random.choices(string.digits, k=6))
    expires_at = datetime.now() + timedelta(minutes=15)
    
    try:
        with get_db_connection() as conn:
            with conn.cursor(cursor_factory=RealDictCursor) as cur:
                # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cur.execute("""
                    INSERT INTO users (telegram_id, username, first_name, last_name)
                    VALUES (%s, %s, %s, %s)
                    ON CONFLICT (telegram_id) DO UPDATE SET
                        username = EXCLUDED.username,
                        first_name = EXCLUDED.first_name,
                        last_name = EXCLUDED.last_name
                    RETURNING id
                """, (str(telegram_id), username, first_name, last_name))
                
                user_id = cur.fetchone()['id']
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
                cur.execute("DELETE FROM auth_codes WHERE telegram_id = %s AND NOT is_used", (str(telegram_id),))
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
                cur.execute("""
                    INSERT INTO auth_codes (code, telegram_id, user_id, telegram_username, 
                                          telegram_first_name, telegram_last_name, expires_at)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (code, str(telegram_id), user_id, username, first_name, last_name, expires_at))
                
                conn.commit()
                return code
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        return None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    keyboard = [[InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="get_code")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
üöÄ **TeleShop Constructor**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–ü–æ–ª—É—á–∏ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:
http://localhost:3000

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç
"""
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "get_code":
        user = query.from_user
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        code = generate_auth_code(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        if code:
            keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∫–æ–¥", callback_data="get_code")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"""
‚úÖ **–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!**

üîë –ö–æ–¥: `{code}`

1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000
2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: `{code}`
3. –ù–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏"

‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç
"""
            
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
            logger.info(f"‚úÖ –ö–æ–¥ {code} –¥–ª—è {user.id}")
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Simple TeleShop Auth Bot")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT COUNT(*) FROM users")
                count = cur.fetchone()[0]
                logger.info(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {count}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CallbackQueryHandler(button_callback))
        
        logger.info("‚úÖ Simple Auth Bot –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ladixoofilad.beget.app")
        logger.info("üîó –ê–¥–º–∏–Ω–∫–∞: http://localhost:3000")
        logger.info("ü§ñ Telegram: @odnorazki_by_bot")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        application.run_polling(drop_pending_updates=True)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 