#!/usr/bin/env python3
"""
ü§ñ TeleShop Ultra Simple Auth Bot
–£–ª—å—Ç—Ä–∞–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è - —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""

import logging
import random
import string
import time
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7503005367:AAF2rrpRUr0TXSKWJZsnlPwtuU-RidYLYos"

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤
auth_codes = {}

def generate_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞"""
    return ''.join(random.choices(string.digits, k=6))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    keyboard = [[InlineKeyboardButton("üîë –ö–æ–¥", callback_data="code")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\nüîë –ü–æ–ª—É—á–∏ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞",
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    code = generate_code()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
    auth_codes[code] = {
        'user_id': user.id,
        'username': user.username or 'noname',
        'first_name': user.first_name or 'User',
        'time': time.time()
    }
    
    keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π", callback_data="code")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚úÖ –ö–æ–¥: {code}\n\n"
        f"–û—Ç–∫—Ä–æ–π—Ç–µ: http://77.73.232.46:3000\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: {code}",
        reply_markup=reply_markup
    )
    
    logger.info(f"–ö–æ–¥ {code} –¥–ª—è {user.id}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(button))
        application.add_error_handler(error_handler)
        
        logger.info("‚úÖ Ultra Simple Bot –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫
        application.run_polling(
            poll_interval=2.0,
            timeout=20,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 