#!/usr/bin/env python3
"""
ü§ñ TeleShop Stable Auth Bot - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è
"""

import logging
import random
import string
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "7503005367:AAF2rrpRUr0TXSKWJZsnlPwtuU-RidYLYos"

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–¥–æ–≤ –≤ –ø–∞–º—è—Ç–∏
auth_codes = {}

def generate_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞"""
    return ''.join(random.choices(string.digits, k=6))

def cleanup_expired_codes():
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤"""
    current_time = time.time()
    expired_codes = [code for code, data in auth_codes.items() 
                     if current_time - data['created_at'] > 900]  # 15 –º–∏–Ω—É—Ç
    for code in expired_codes:
        del auth_codes[code]

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    keyboard = [[InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="get_code")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
üöÄ **TeleShop Constructor**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–ü–æ–ª—É—á–∏ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:
‚Ä¢ http://77.73.232.46:3000

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç
"""
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "get_code":
        await generate_code_for_user(query.from_user, query)

async def generate_code_for_user(user, update_or_query):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤
        cleanup_expired_codes()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
        code = generate_code()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        auth_codes[code] = {
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'created_at': time.time()
        }
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∫–æ–¥", callback_data="get_code")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
‚úÖ **–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!**

üîë –ö–æ–¥: `{code}`

1. –û—Ç–∫—Ä–æ–π—Ç–µ http://77.73.232.46:3000
2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: `{code}`
3. –ù–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏"

‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç
"""
        
        await update_or_query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
        logger.info(f"‚úÖ –ö–æ–¥ {code} –¥–ª—è {user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await update_or_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Stable Auth Bot")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)
    
    logger.info("‚úÖ Stable Auth Bot –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling(poll_interval=1.0, timeout=10)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 