#!/usr/bin/env python3
"""
ü§ñ TeleShop Auth Bot - PostgreSQL –≤–µ—Ä—Å–∏—è
–ë–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram —Å –ø—Ä—è–º—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ PostgreSQL
"""

import os
import asyncio
import logging
import random
import string
from datetime import datetime, timedelta

import asyncpg
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7503005367:AAF2rrpRUr0TXSKWJZsnlPwtuU-RidYLYos"  # @odnorazki_by_bot

# PostgreSQL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –Ω–∞—à–∞ –ø–æ–ª–Ω–∞—è –ë–î
DB_CONFIG = {
    'host': 'ladixoofilad.beget.app',
    'port': 5432,
    'database': 'default_db',
    'user': 'cloud_user',
    'password': 'u61e&ke&!Ty1'
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db_pool = None
auth_manager = None

class PostgreSQLAuthManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ PostgreSQL"""
    
    def __init__(self, db_pool):
        self.db_pool = db_pool
    
    async def generate_auth_code(self, telegram_id, username=None, first_name=None, last_name=None):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        code = ''.join(random.choices(string.digits, k=6))
        expires_at = datetime.now() + timedelta(minutes=15)
        
        async with self.db_pool.acquire() as conn:
            # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = await conn.fetchval("""
                INSERT INTO users (telegram_id, username, first_name, last_name)
                VALUES ($1, $2, $3, $4)
                ON CONFLICT (telegram_id) DO UPDATE SET
                username = EXCLUDED.username,
                first_name = EXCLUDED.first_name,
                last_name = EXCLUDED.last_name
                RETURNING id
            """, str(telegram_id), username, first_name, last_name)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–¥—ã
            await conn.execute("DELETE FROM auth_codes WHERE telegram_id = $1 AND NOT is_used", str(telegram_id))
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
            await conn.execute("""
                INSERT INTO auth_codes (code, telegram_id, user_id, telegram_username, 
                                      telegram_first_name, telegram_last_name, expires_at)
                VALUES ($1, $2, $3, $4, $5, $6, $7)
            """, code, str(telegram_id), user_id, username, first_name, last_name, expires_at)
            
            return code

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    global db_pool, auth_manager
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        dsn = f"postgresql://{DB_CONFIG['user']}:{DB_CONFIG['password']}@{DB_CONFIG['host']}:{DB_CONFIG['port']}/{DB_CONFIG['database']}"
        
        # –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        db_pool = await asyncpg.create_pool(dsn, min_size=2, max_size=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with db_pool.acquire() as conn:
            result = await conn.fetchval("SELECT COUNT(*) FROM users")
            logger.info(f"‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î: {result}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_manager = PostgreSQLAuthManager(db_pool)
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
        return False

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    keyboard = [[InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥", callback_data="get_code")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""
üöÄ **TeleShop Constructor**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–ü–æ–ª—É—á–∏ –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É:
http://localhost:3000

‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç
"""
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "get_code":
        await generate_code_for_user(query.from_user, query)

async def generate_code_for_user(user, update_or_query):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if not auth_manager:
            await send_message(update_or_query, "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —á–µ—Ä–µ–∑ PostgreSQL
        code = await auth_manager.generate_auth_code(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        if not code:
            await send_message(update_or_query, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [[InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∫–æ–¥", callback_data="get_code")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
‚úÖ **–ö–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!**

üîë –ö–æ–¥: `{code}`

1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000
2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: `{code}`
3. –ù–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏"

‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç
"""
        
        await send_message(update_or_query, text, reply_markup, parse_mode='Markdown')
        
        logger.info(f"‚úÖ –ö–æ–¥ {code} –¥–ª—è {user.id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await send_message(update_or_query, "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞")

async def send_message(update_or_query, text, reply_markup=None, parse_mode=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if hasattr(update_or_query, 'edit_message_text'):
            await update_or_query.edit_message_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        else:
            await update_or_query.message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫ TeleShop Auth Bot (PostgreSQL)")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PostgreSQL
        if not await init_database():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_error_handler(error_handler)
        
        logger.info("‚úÖ Auth Bot –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ PostgreSQL")
        logger.info("üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ladixoofilad.beget.app")
        logger.info("üîó –ê–¥–º–∏–Ω–∫–∞: http://localhost:3000")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
        await application.run_polling(
            poll_interval=1.0,
            timeout=10,
            drop_pending_updates=True,
            close_loop=False  # –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º event loop –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise e
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if db_pool:
            await db_pool.close()
            logger.info("üîå PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")

if __name__ == "__main__":
    import platform
    import sys
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π loop –µ—Å–ª–∏ –µ—Å—Ç—å
        try:
            existing_loop = asyncio.get_event_loop()
            if existing_loop.is_running():
                existing_loop.close()
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤—ã–π loop
        new_loop = asyncio.new_event_loop()
        asyncio.set_event_loop(new_loop)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–æ–≤–æ–º loop
        new_loop.run_until_complete(main())
        
    except KeyboardInterrupt:
        logger.info("üëã Auth Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ
        try:
            loop = asyncio.get_event_loop()
            if not loop.is_closed():
                loop.close()
        except:
            pass 