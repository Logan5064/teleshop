name: 🚀 Auto Deploy TeleShop

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
    
    - name: 🚀 Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: 22
        command_timeout: 30m
        script: |
          set -e
          echo "🚀 Starting TeleShop deployment..."
          
          # Установка системных зависимостей
          echo "📦 Installing system dependencies..."
          apt update || echo "Update failed, continuing..."
          apt install -y curl wget git build-essential python3 python3-pip python3-venv nodejs npm || echo "Some packages may already be installed"
          
          # Установка PM2 если нет
          if ! command -v pm2 &> /dev/null; then
            echo "📦 Installing PM2..."
            npm install -g pm2
          fi
          
          # Переходим в папку проекта
          cd /opt/teleshop || {
            echo "❌ Project directory not found, cloning..."
            cd /opt
            git clone https://github.com/Logan5064/teleshop.git
            cd teleshop
          }
          
          # Обновляем код
          echo "📥 Updating code from GitHub..."
          git fetch origin
          git reset --hard origin/main
          git pull origin main
          
          # Остановка старых процессов
          echo "⏹️ Stopping old processes..."
          pm2 delete all || echo "No processes to stop"
          sleep 5
          
          # Очистка портов более мягко
          echo "🧹 Cleaning ports..."
          lsof -ti:8000 | xargs kill -9 || echo "Port 8000 is free"
          lsof -ti:3000 | xargs kill -9 || echo "Port 3000 is free"
          sleep 2
          
          # Backend setup
          echo "🐍 Setting up Backend..."
          cd /opt/teleshop/05-server-launchers/main
          
          # Создаем виртуальное окружение если нет
          if [ ! -d "venv" ]; then
            echo "Creating new virtual environment..."
            python3 -m venv venv
          fi
          
          # Активируем виртуальное окружение
          source venv/bin/activate
          
          # Устанавливаем зависимости
          echo "📦 Installing Python dependencies..."
          pip install --upgrade pip --quiet
          pip install --quiet fastapi uvicorn sqlalchemy asyncpg psycopg2-binary
          pip install --quiet python-multipart python-jose passlib bcrypt
          pip install --quiet aiofiles python-dotenv aiogram
          pip install --quiet python-telegram-bot nest_asyncio
          
          # Frontend setup
          echo "⚛️ Setting up Frontend..."
          cd /opt/teleshop/01-user-dashboard
          
          # Устанавливаем зависимости
          echo "📦 Installing Node.js dependencies..."
          npm install --silent
          
          # Собираем проект
          echo "🔨 Building frontend..."
          npm run build
          
          # Создаем PM2 конфигурацию
          echo "⚙️ Creating PM2 config..."
          cd /opt/teleshop
          cat > ecosystem.config.js << 'EOF'
          module.exports = {
            apps: [
              {
                name: 'teleshop-backend',
                script: 'python3',
                args: ['-m', 'uvicorn', 'api_server:app', '--host', '0.0.0.0', '--port', '8000'],
                cwd: '/opt/teleshop/05-server-launchers/main',
                interpreter: '/opt/teleshop/05-server-launchers/main/venv/bin/python',
                env: {
                  NODE_ENV: 'production',
                  PYTHONPATH: '/opt/teleshop/05-server-launchers/main:/opt/teleshop/05-server-launchers/config'
                },
                restart_delay: 3000,
                max_restarts: 10,
                error_file: '/var/log/teleshop-backend-error.log',
                out_file: '/var/log/teleshop-backend-out.log'
              },
              {
                name: 'teleshop-frontend',
                script: 'npm',
                args: ['start'],
                cwd: '/opt/teleshop/01-user-dashboard',
                env: {
                  NODE_ENV: 'production',
                  PORT: 3000
                },
                restart_delay: 3000,
                max_restarts: 10,
                error_file: '/var/log/teleshop-frontend-error.log',
                out_file: '/var/log/teleshop-frontend-out.log'
              }
            ]
          };
          EOF
          
          # Настройка прав доступа
          echo "🔐 Setting permissions..."
          chmod +x /opt/teleshop/05-server-launchers/main/venv/bin/python
          chown -R $USER:$USER /opt/teleshop || echo "Permission setting failed, continuing..."
          
          # Запускаем приложения
          echo "🚀 Starting applications..."
          pm2 start ecosystem.config.js
          
          # Настраиваем автозапуск
          pm2 startup systemd -u root --hp /root || echo "PM2 startup setup failed, continuing..."
          pm2 save
          
          # Ждем запуска
          echo "⏳ Waiting for services to start..."
          sleep 15
          
          # Проверяем статус
          pm2 status
          
          # Проверяем доступность
          echo "🔍 Checking services..."
          if curl -s http://localhost:8000/ > /dev/null; then
            echo "✅ Backend is running on port 8000"
          else
            echo "⚠️ Backend may still be starting, check: pm2 logs teleshop-backend"
          fi
          
          if curl -s http://localhost:3000/ > /dev/null; then
            echo "✅ Frontend is running on port 3000"
          else
            echo "⚠️ Frontend may still be starting, check: pm2 logs teleshop-frontend"
          fi
          
          echo "🎉 Deployment completed!"
          echo "🌐 Frontend: http://178.236.17.93:3000"
          echo "🔧 Backend: http://178.236.17.93:8000"
          echo "📋 Check logs with: pm2 logs" 