#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ TeleShop Launcher
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ TeleShop
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import subprocess
import threading
import os
import signal
import sys
from datetime import datetime

class TeleShopLauncher:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ TeleShop Launcher")
        self.root.geometry("900x700")
        self.root.configure(bg="#2c3e50")
        
        # –ü—Ä–æ—Ü–µ—Å—Å—ã
        self.processes = {}
        self.ssh_key = "teleshop-deploy-key"
        self.server = "root@178.236.17.93"
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.components = {
            "dashboard": {
                "name": "üìä Dashboard",
                "path": "/var/www/teleshop/01-user-dashboard",
                "cmd": "npm run dev",
                "port": "3000",
                "color": "#3498db"
            },
            "constructor": {
                "name": "üèóÔ∏è Constructor", 
                "path": "/var/www/teleshop/offconstryktor",
                "cmd": "npm run dev",
                "port": "3001",
                "color": "#e74c3c"
            },
            "backend": {
                "name": "üîß Backend API",
                "path": "/var/www/teleshop/05-server-launchers/main", 
                "cmd": "source venv/bin/activate && python test_backend.py",
                "port": "8000",
                "color": "#2ecc71"
            },
            "auth_bot": {
                "name": "ü§ñ Auth Bot",
                "path": "/var/www/teleshop/05-server-launchers/bots",
                "cmd": "python3 auth_bot_modern.py", 
                "port": "Bot",
                "color": "#f39c12"
            }
        }
        
        self.setup_ui()
        
    def setup_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg="#2c3e50")
        title_frame.pack(fill=tk.X, padx=10, pady=10)
        
        title_label = tk.Label(
            title_frame,
            text="üöÄ TeleShop Launcher",
            font=("Arial", 24, "bold"),
            bg="#2c3e50",
            fg="#ecf0f1"
        )
        title_label.pack()
        
        subtitle_label = tk.Label(
            title_frame,
            text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ TeleShop",
            font=("Arial", 12),
            bg="#2c3e50", 
            fg="#bdc3c7"
        )
        subtitle_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg="#2c3e50")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        left_frame = tk.Frame(main_frame, bg="#34495e", relief=tk.RAISED, bd=2)
        left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))
        
        # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
        general_label = tk.Label(
            left_frame,
            text="üéÆ –û–±—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            font=("Arial", 14, "bold"),
            bg="#34495e",
            fg="#ecf0f1"
        )
        general_label.pack(pady=10)
        
        self.start_all_btn = tk.Button(
            left_frame,
            text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –í–°–ï",
            font=("Arial", 12, "bold"),
            bg="#27ae60",
            fg="white",
            relief=tk.FLAT,
            command=self.start_all,
            width=20
        )
        self.start_all_btn.pack(pady=5, padx=10)
        
        self.stop_all_btn = tk.Button(
            left_frame,
            text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –í–°–ï", 
            font=("Arial", 12, "bold"),
            bg="#e74c3c",
            fg="white",
            relief=tk.FLAT,
            command=self.stop_all,
            width=20
        )
        self.stop_all_btn.pack(pady=5, padx=10)
        
        self.clear_ports_btn = tk.Button(
            left_frame,
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç—ã",
            font=("Arial", 12, "bold"),
            bg="#f39c12",
            fg="white",
            relief=tk.FLAT,
            command=self.clear_ports,
            width=20
        )
        self.clear_ports_btn.pack(pady=5, padx=10)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = tk.Frame(left_frame, height=2, bg="#7f8c8d")
        separator.pack(fill=tk.X, pady=10, padx=10)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components_label = tk.Label(
            left_frame,
            text="üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã",
            font=("Arial", 14, "bold"),
            bg="#34495e",
            fg="#ecf0f1"
        )
        components_label.pack(pady=(10, 5))
        
        self.component_buttons = {}
        self.status_labels = {}
        
        for comp_id, comp_info in self.components.items():
            # –§—Ä–µ–π–º –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            comp_frame = tk.Frame(left_frame, bg="#34495e")
            comp_frame.pack(fill=tk.X, padx=10, pady=5)
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
            btn = tk.Button(
                comp_frame,
                text=f"‚ñ∂Ô∏è {comp_info['name']}",
                font=("Arial", 10),
                bg=comp_info['color'],
                fg="white",
                relief=tk.FLAT,
                command=lambda cid=comp_id: self.toggle_component(cid),
                width=18
            )
            btn.pack(fill=tk.X)
            self.component_buttons[comp_id] = btn
            
            # –°—Ç–∞—Ç—É—Å
            status_label = tk.Label(
                comp_frame,
                text=f"üí§ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (:{comp_info['port']})",
                font=("Arial", 8),
                bg="#34495e",
                fg="#95a5a6"
            )
            status_label.pack()
            self.status_labels[comp_id] = status_label
            
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ª–æ–≥–∏
        right_frame = tk.Frame(main_frame, bg="#2c3e50")
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)
        
        logs_label = tk.Label(
            right_frame,
            text="üìã –õ–æ–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
            font=("Arial", 14, "bold"),
            bg="#2c3e50",
            fg="#ecf0f1"
        )
        logs_label.pack(pady=(0, 10))
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        self.log_text = scrolledtext.ScrolledText(
            right_frame,
            font=("Consolas", 10),
            bg="#1c1c1c",
            fg="#00ff00",
            insertbackground="#00ff00",
            wrap=tk.WORD
        )
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        clear_btn = tk.Button(
            right_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏",
            font=("Arial", 10),
            bg="#95a5a6",
            fg="white",
            relief=tk.FLAT,
            command=self.clear_logs
        )
        clear_btn.pack(pady=(10, 0))
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = tk.Label(
            self.root,
            text="üî¥ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã",
            font=("Arial", 10),
            bg="#34495e",
            fg="#ecf0f1",
            relief=tk.SUNKEN,
            anchor=tk.W
        )
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
        
        self.log("üöÄ TeleShop Launcher –∑–∞–ø—É—â–µ–Ω!")
        self.log("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        
    def log(self, message):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–∏"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        self.root.update()
        
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"""
        self.log_text.delete(1.0, tk.END)
        self.log("üìã –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
        
    def run_ssh_command(self, component_id, command):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å SSH –∫–æ–º–∞–Ω–¥—É"""
        try:
            full_command = f'ssh -i {self.ssh_key} {self.server} "{command}"'
            self.log(f"üîß –í—ã–ø–æ–ª–Ω—è—é: {full_command}")
            
            process = subprocess.Popen(
                full_command,
                shell=True,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1
            )
            
            self.processes[component_id] = process
            
            # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def read_output():
                try:
                    for line in iter(process.stdout.readline, ''):
                        if line:
                            self.log(f"[{self.components[component_id]['name']}] {line.rstrip()}")
                    process.wait()
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞: {str(e)}")
                finally:
                    if component_id in self.processes:
                        del self.processes[component_id]
                    self.update_component_status(component_id, False)
                    
            threading.Thread(target=read_output, daemon=True).start()
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {component_id}: {str(e)}")
            return False
            
    def toggle_component(self, component_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        if component_id in self.processes:
            self.stop_component(component_id)
        else:
            self.start_component(component_id)
            
    def start_component(self, component_id):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"""
        comp_info = self.components[component_id]
        self.log(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é {comp_info['name']}...")
        
        command = f"cd {comp_info['path']} && {comp_info['cmd']}"
        
        if self.run_ssh_command(component_id, command):
            self.update_component_status(component_id, True)
            self.log(f"‚úÖ {comp_info['name']} –∑–∞–ø—É—â–µ–Ω")
        else:
            self.log(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {comp_info['name']}")
            
    def stop_component(self, component_id):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"""
        comp_info = self.components[component_id]
        self.log(f"‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {comp_info['name']}...")
        
        if component_id in self.processes:
            try:
                self.processes[component_id].terminate()
                del self.processes[component_id]
            except:
                pass
                
        # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if comp_info['cmd'].startswith('npm'):
            kill_cmd = f"pkill -f 'npm run dev' || pkill -f 'next'"
        else:
            kill_cmd = f"pkill -f '{comp_info['cmd']}'"
            
        subprocess.run(f'ssh -i {self.ssh_key} {self.server} "{kill_cmd}"', shell=True)
        
        self.update_component_status(component_id, False)
        self.log(f"‚èπÔ∏è {comp_info['name']} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    def update_component_status(self, component_id, is_running):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        comp_info = self.components[component_id]
        btn = self.component_buttons[component_id]
        label = self.status_labels[component_id]
        
        if is_running:
            btn.config(text=f"‚èπÔ∏è {comp_info['name']}", bg="#e74c3c")
            label.config(text=f"üü¢ –†–∞–±–æ—Ç–∞–µ—Ç (:{comp_info['port']})", fg="#2ecc71")
        else:
            btn.config(text=f"‚ñ∂Ô∏è {comp_info['name']}", bg=comp_info['color'])
            label.config(text=f"üí§ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (:{comp_info['port']})", fg="#95a5a6")
            
        self.update_status_bar()
        
    def update_status_bar(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–∞—Ä"""
        running_count = len(self.processes)
        total_count = len(self.components)
        
        if running_count == 0:
            self.status_bar.config(text="üî¥ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", fg="#e74c3c")
        elif running_count == total_count:
            self.status_bar.config(text="üü¢ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã", fg="#2ecc71")
        else:
            self.status_bar.config(text=f"üü° –ó–∞–ø—É—â–µ–Ω–æ {running_count}/{total_count} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", fg="#f39c12")
            
    def start_all(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫–∞—é –í–°–ï –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
        for component_id in self.components:
            if component_id not in self.processes:
                self.start_component(component_id)
                
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        self.log("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –í–°–ï –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        kill_all_cmd = "pkill -f npm; pkill -f node; pkill -f python3; pkill -f next"
        subprocess.run(f'ssh -i {self.ssh_key} {self.server} "{kill_all_cmd}"', shell=True)
        
        # –û—Å—Ç–∞–Ω–æ–≤–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        for component_id in list(self.processes.keys()):
            self.stop_component(component_id)
            
        self.log("‚èπÔ∏è –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    def clear_ports(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã"""
        self.log("üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –ø–æ—Ä—Ç–æ–≤...")
        
        try:
            # –û—Å—Ç–∞–Ω–æ–≤–∏–º –≤—Å–µ –Ω–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–Ω–∞—á–∞–ª–∞
            self.stop_all()
            
            # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Ä—Ç–æ–≤
            clear_commands = [
                "pkill -f npm || true",
                "pkill -f node || true", 
                "pkill -f python3 || true",
                "pkill -f next || true",
                "pkill -f uvicorn || true"
            ]
            
            for cmd in clear_commands:
                full_command = f'ssh -i {self.ssh_key} {self.server} "{cmd}"'
                self.log(f"üîß –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
                result = subprocess.run(full_command, shell=True, capture_output=True, text=True)
                
            # –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –ø–æ—Ä—Ç–∞–º
            port_commands = [
                "lsof -ti:3000 | xargs -r kill -9 || true",
                "lsof -ti:3001 | xargs -r kill -9 || true", 
                "lsof -ti:8000 | xargs -r kill -9 || true"
            ]
            
            for cmd in port_commands:
                full_command = f'ssh -i {self.ssh_key} {self.server} "{cmd}"'
                self.log(f"üîß –û—Å–≤–æ–±–æ–∂–¥–∞—é –ø–æ—Ä—Ç: {cmd}")
                result = subprocess.run(full_command, shell=True, capture_output=True, text=True)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            check_cmd = f'ssh -i {self.ssh_key} {self.server} "netstat -tlnp | grep -E \':(3000|3001|8000)\'"'
            result = subprocess.run(check_cmd, shell=True, capture_output=True, text=True)
            
            if result.returncode != 0 or not result.stdout.strip():
                self.log("‚úÖ –í—Å–µ –ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
                self.log("üü¢ –ü–æ—Ä—Ç—ã 3000, 3001, 8000 —Å–≤–æ–±–æ–¥–Ω—ã")
                self.status_bar.config(text="üßπ –ü–æ—Ä—Ç—ã –æ—á–∏—â–µ–Ω—ã - –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É", fg="#2ecc71")
            else:
                self.log("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –µ—â–µ –∑–∞–Ω—è—Ç—ã")
                self.log(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä—Ç—ã: {result.stdout.strip()}")
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Ä—Ç–æ–≤: {str(e)}")
            
        self.log("üßπ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –≤—ã–π—Ç–∏?"):
            self.stop_all()
            self.root.destroy()

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –∫–ª—é—á–∞
    if not os.path.exists("teleshop-deploy-key"):
        messagebox.showerror(
            "–û—à–∏–±–∫–∞", 
            "SSH –∫–ª—é—á 'teleshop-deploy-key' –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ª–∞—É–Ω—á–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏–∑ –ø–∞–ø–∫–∏:\n"
            "C:\\Users\\GTX\\Desktop\\sitetest"
        )
        return
        
    root = tk.Tk()
    launcher = TeleShopLauncher(root)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    root.protocol("WM_DELETE_WINDOW", launcher.on_closing)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        launcher.stop_all()

if __name__ == "__main__":
    main() 