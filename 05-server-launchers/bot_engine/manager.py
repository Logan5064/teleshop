"""
ü§ñ BotManager - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–æ—Ç–æ–≤
–£–ø—Ä–∞–≤–ª—è–µ—Ç –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö Telegram –±–æ—Ç–æ–≤
"""

import asyncio
import logging
from typing import Dict, Optional
from telegram import Bot
from telegram.ext import Application, CommandHandler, MessageHandler, filters
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, text

from .bot_instance import TelegramBotInstance
from .handlers import BotHandlers
from .database import BotDatabase

logger = logging.getLogger(__name__)

class BotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –±–æ—Ç–æ–≤"""
    
    def __init__(self, db_session: AsyncSession):
        self.db_session = db_session
        self.active_bots: Dict[int, TelegramBotInstance] = {}  # {shop_id: bot_instance}
        self.bot_database = BotDatabase(db_session)
        self.bot_handlers = BotHandlers(self)
        
        logger.info("ü§ñ BotManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def start_bot(self, bot_token: str, shop_id: int) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""
        try:
            if shop_id in self.active_bots:
                logger.warning(f"‚ö†Ô∏è –ë–æ—Ç {shop_id} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            bot_instance = TelegramBotInstance(bot_token, shop_id, self.bot_handlers)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await bot_instance.start()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã
            self.active_bots[shop_id] = bot_instance
            
            logger.info(f"‚úÖ –ë–æ—Ç {shop_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {shop_id}: {e}")
            return False
    
    async def stop_bot(self, shop_id: int) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            if shop_id not in self.active_bots:
                logger.warning(f"‚ö†Ô∏è –ë–æ—Ç {shop_id} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö")
                return False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
            bot_instance = self.active_bots[shop_id]
            await bot_instance.stop()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
            del self.active_bots[shop_id]
            
            logger.info(f"üõë –ë–æ—Ç {shop_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {shop_id}: {e}")
            return False
    
    async def get_shop_id_by_token(self, bot_token: str) -> Optional[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç shop_id –ø–æ —Ç–æ–∫–µ–Ω—É –±–æ—Ç–∞"""
        try:
            query = text("SELECT id FROM shops WHERE bot_token = :token")
            result = await self.db_session.execute(query, {"token": bot_token})
            row = result.fetchone()
            return row[0] if row else None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è shop_id: {e}")
            return None
    
    async def load_active_bots(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –∏–∑ –ë–î"""
        try:
            query = text("SELECT id, bot_token FROM shops WHERE is_bot_active = true")
            result = await self.db_session.execute(query)
            shops = result.fetchall()
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ –ë–î: {len(shops)}")
            
            for shop in shops:
                shop_id, bot_token = shop
                await self.start_bot(bot_token, shop_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: {e}")
    
    async def get_active_bots_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        return len(self.active_bots)
    
    async def get_bot_info(self, shop_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        if shop_id not in self.active_bots:
            return None
            
        bot_instance = self.active_bots[shop_id]
        return {
            "shop_id": shop_id,
            "is_active": True,
            "bot_username": bot_instance.bot_username,
            "subscribers_count": await self.bot_database.get_subscribers_count(shop_id)
        }
    
    def is_bot_active(self, shop_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –±–æ—Ç"""
        return shop_id in self.active_bots
    
    async def shutdown(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –±–æ—Ç—ã –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤...")
        
        for shop_id in list(self.active_bots.keys()):
            await self.stop_bot(shop_id)
        
        logger.info("‚úÖ –í—Å–µ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã") 