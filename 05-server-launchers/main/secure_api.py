#!/usr/bin/env python3
"""
üîí –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –í–ï–†–°–ò–Ø API - —Å –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –∏–∑–æ–ª—è—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
"""

from fastapi import APIRouter, HTTPException, Depends, Request, Response
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from typing import List, Optional
from datetime import datetime, timedelta, timezone
import json
import time
import hashlib
import random
import string
import logging
import traceback

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—É—Ç–∏)
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å)
current_dir = os.path.dirname(os.path.abspath(__file__))
# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∏–∑ main/ –≤ config/
config_path = os.path.join(os.path.dirname(current_dir), "config")
sys.path.insert(0, config_path)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ bot_engine –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ BotManager  
# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∏–∑ 05-server-launchers/main/ –≤ 01-user-dashboard/konstruktor/backend/
project_root = os.path.dirname(os.path.dirname(current_dir))
bot_engine_path = os.path.join(project_root, "01-user-dashboard", "konstruktor", "backend")
sys.path.insert(0, bot_engine_path)

from shared.auth.db_code_auth import get_current_user_by_session, DatabaseCodeAuth, get_auth_stats
from shared.models.user import User
from shared.models.shop import Shop
from shared.models.auth_models import AuthCode, UserSession
from shared.schemas.user_schemas import User as UserSchema, UserCreate
from shared.schemas.shop_schemas import ShopResponse, ShopCreate, ShopUpdate
from shared.utils.database import get_db
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, func, text
from fastapi import Request

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –±–æ—Ç–æ–≤
from shared.services.analytics_service import AnalyticsService
from shared.auth.admin_auth import AdminSessionManager

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("secure_api")

def log_request(request: Request, user_info: str = "unknown"):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        ip = request.client.host if hasattr(request, 'client') else "unknown"
        user_agent = request.headers.get("User-Agent", "unknown")
        method = request.method
        url = str(request.url)
        
        logger.info(f"üåê {method} {url} | User: {user_info} | IP: {ip} | UA: {user_agent[:50]}...")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")

def log_auth_success(user_id: int, telegram_id: str, session_type: str, request: Request):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        ip = request.client.host if hasattr(request, 'client') else "unknown"
        logger.info(f"‚úÖ AUTH SUCCESS | User ID: {user_id} | Telegram: {telegram_id} | Type: {session_type} | IP: {ip}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

def log_auth_error(error_type: str, details: str, request: Request):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        ip = request.client.host if hasattr(request, 'client') else "unknown"
        user_agent = request.headers.get("User-Agent", "unknown")
        logger.error(f"‚ùå AUTH ERROR | Type: {error_type} | Details: {details} | IP: {ip} | UA: {user_agent[:50]}...")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")

def log_api_error(endpoint: str, error: Exception, user_info: str, request: Request):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ API"""
    try:
        ip = request.client.host if hasattr(request, 'client') else "unknown"
        error_trace = traceback.format_exc()
        logger.error(f"‚ùå API ERROR | Endpoint: {endpoint} | User: {user_info} | IP: {ip}")
        logger.error(f"   Error: {str(error)}")
        logger.error(f"   Traceback: {error_trace}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ API: {e}")

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class BotCreate(BaseModel):
    bot_token: str
    shop_name: str
    description: Optional[str] = None
    bot_username: Optional[str] = None

class BotResponse(BaseModel):
    id: int
    shop_name: str
    description: Optional[str]
    bot_token: str
    bot_username: Optional[str]
    is_active: bool
    user_id: int  # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    created_at: datetime
    updated_at: datetime

class DesignCreate(BaseModel):
    shop_id: int
    theme_name: str = "custom"
    primary_color: str = "#ff6b35"
    secondary_color: str = "#2d2d2d"
    font_family: str = "system-ui"
    blocks_data: List[dict] = []
    is_active: bool = True

class DesignResponse(BaseModel):
    id: int
    shop_id: int
    user_id: int  # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    theme_name: str
    primary_color: str
    secondary_color: str
    font_family: str
    blocks_data: List[dict]
    is_active: bool
    created_at: datetime
    updated_at: datetime

router = APIRouter()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ Redis)
admin_tokens = {}

# ===== –ê–î–ú–ò–ù–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò (–æ—Ç–¥–µ–ª—å–Ω–∞—è –æ—Ç Telegram) =====

def verify_admin_token(token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    if not token or not token.startswith("admin_"):
        return False
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏–∑ —Ç–æ–∫–µ–Ω–∞
        parts = token.split("_")
        if len(parts) < 3:
            return False
        
        timestamp = int(parts[1])
        current_time = int(time.time())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫ (12 —á–∞—Å–æ–≤ = 43200 —Å–µ–∫—É–Ω–¥)
        if current_time - timestamp > 43200:
            return False
        
        return True
    except:
        return False

async def get_admin_token(request: Request) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization
    auth_header = request.headers.get("Authorization")
    if auth_header and auth_header.startswith("Bearer "):
        token = auth_header[7:]
        if verify_admin_token(token):
            return token
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies
    token = request.cookies.get("admin_token")
    if token and verify_admin_token(token):
        return token
    
    raise HTTPException(
        status_code=401, 
        detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–º–∏–Ω—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–æ–π–¥–∏—Ç–µ —Å –ø–∞—Ä–æ–ª–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )

# ===== –ë–ï–ó–û–ü–ê–°–ù–´–ï API –≠–ù–î–ü–û–ò–ù–¢–´ =====

@router.post("/secure/bots", response_model=BotResponse)
async def create_bot_secure(
    bot_data: BotCreate,
    request: Request,
    current_user: User = Depends(get_current_user_by_session),
    db: AsyncSession = Depends(get_db)
):
    """üîí –ë–ï–ó–û–ü–ê–°–ù–û: –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
    
    try:
        user_info = f"ID:{current_user.id}|TG:{current_user.telegram_id}"
        log_request(request, user_info)
        
        logger.info(f"ü§ñ BOT CREATE ATTEMPT | User: {user_info} | Bot name: {bot_data.shop_name} | Token: {bot_data.bot_token[:20]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¢–û–õ–¨–ö–û —É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(Shop).where(
                and_(
                    Shop.bot_token == bot_data.bot_token,
                    Shop.user_id == current_user.id
                )
            )
        )
        existing_shop = result.scalar_one_or_none()
        
        if existing_shop:
            logger.warning(f"‚ö†Ô∏è BOT CREATE FAILED | User: {user_info} | Reason: Duplicate token | Existing bot ID: {existing_shop.id}")
            raise HTTPException(status_code=400, detail="–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–æ—Ç —Å —Ç–∞–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω/–±–æ—Ç–∞ –≤ –ë–î
        new_shop = Shop(
            user_id=current_user.id,
            name=bot_data.shop_name,
            description=bot_data.description,
            bot_token=bot_data.bot_token,
            bot_username=bot_data.bot_username,
            is_bot_active=True
        )
        
        db.add(new_shop)
        await db.commit()
        await db.refresh(new_shop)
        
        logger.info(f"‚úÖ BOT CREATED SUCCESS | User: {user_info} | Bot ID: {new_shop.id} | Name: {new_shop.name}")
        
        return BotResponse(
            id=new_shop.id,
            shop_name=new_shop.name,
            description=new_shop.description,
            bot_token=new_shop.bot_token,
            bot_username=new_shop.bot_username,
            is_active=new_shop.is_bot_active,
            user_id=new_shop.user_id,
            created_at=new_shop.created_at,
            updated_at=new_shop.updated_at
        )
        
    except HTTPException as e:
        # –ü–µ—Ä–µ–±—Ä–æ—Å HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        raise e
    except Exception as e:
        user_info = f"ID:{current_user.id}|TG:{current_user.telegram_id}"
        log_api_error("/secure/bots", e, user_info, request)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞")

@router.get("/secure/bots", response_model=List[BotResponse])
async def get_user_bots(
    current_user: User = Depends(get_current_user_by_session),
    db: AsyncSession = Depends(get_db)
):
    """üîí –ë–ï–ó–û–ü–ê–°–ù–û: –ü–æ–ª—É—á–∏—Ç—å –¢–û–õ–¨–ö–û –±–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await db.execute(
        select(Shop).where(Shop.user_id == current_user.id)
    )
    user_shops = result.scalars().all()
    
    print(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤: {len(user_shops)}")
    
    return [
        BotResponse(
            id=shop.id,
            shop_name=shop.name,
            description=shop.description,
            bot_token=shop.bot_token,
            bot_username=shop.bot_username,
            is_active=shop.is_bot_active,
            user_id=shop.user_id,
            created_at=shop.created_at,
            updated_at=shop.updated_at
        )
        for shop in user_shops
    ]

@router.get("/secure/bots/{bot_id}", response_model=BotResponse)
async def get_user_bot(
    bot_id: int,
    current_user: User = Depends(get_current_user_by_session),
    db: AsyncSession = Depends(get_db)
):
    """üîí –ë–ï–ó–û–ü–ê–°–ù–û: –ü–æ–ª—É—á–∏—Ç—å –±–æ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    result = await db.execute(
        select(Shop).where(
            and_(
                Shop.id == bot_id,
                Shop.user_id == current_user.id
            )
        )
    )
    shop = result.scalar_one_or_none()
    
    if not shop:
        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É {bot_id}")
        raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞")
    
    return BotResponse(
        id=shop.id,
        shop_name=shop.name,
        description=shop.description,
        bot_token=shop.bot_token,
        bot_username=shop.bot_username,
        is_active=shop.is_bot_active,
        user_id=shop.user_id,
        created_at=shop.created_at,
        updated_at=shop.updated_at
    )

@router.put("/secure/bots/{bot_id}", response_model=BotResponse)
async def update_user_bot(
    bot_id: int,
    bot_data: BotCreate,
    current_user: User = Depends(get_current_user_by_session),
    db: AsyncSession = Depends(get_db)
):
    """üîí –ë–ï–ó–û–ü–ê–°–ù–û: –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    result = await db.execute(
        select(Shop).where(
            and_(
                Shop.id == bot_id,
                Shop.user_id == current_user.id
            )
        )
    )
    shop = result.scalar_one_or_none()
    
    if not shop:
        raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    shop.name = bot_data.shop_name
    shop.description = bot_data.description
    shop.bot_token = bot_data.bot_token
    shop.bot_username = bot_data.bot_username
    
    await db.commit()
    await db.refresh(shop)
    
    print(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} –æ–±–Ω–æ–≤–∏–ª –±–æ—Ç–∞ {bot_id}")
    
    return BotResponse(
        id=shop.id,
        shop_name=shop.name,
        description=shop.description,
        bot_token=shop.bot_token,
        bot_username=shop.bot_username,
        is_active=shop.is_bot_active,
        user_id=shop.user_id,
        created_at=shop.created_at,
        updated_at=shop.updated_at
    )

@router.post("/secure/bots/{bot_id}/start")
async def start_user_bot(
    bot_id: int,
    current_user: User = Depends(get_current_user_by_session),
    db: AsyncSession = Depends(get_db)
):
    """üîí –ë–ï–ó–û–ü–ê–°–ù–û: –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    result = await db.execute(
        select(Shop).where(
            and_(
                Shop.id == bot_id,
                Shop.user_id == current_user.id
            )
        )
    )
    shop = result.scalar_one_or_none()
    
    if not shop:
        raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞")
    
    try:
        # üî• –†–ï–ê–õ–¨–ù–û –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢–ê –≤ Telegram!
        from bot_engine.api.bot_manager import bot_manager
        await bot_manager.start_bot(shop.bot_token, shop.id)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω
        shop.is_bot_active = True
        await db.commit()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ {bot_id} (—Ä–µ–∞–ª—å–Ω–æ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã)")
        
        return {"message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ Telegram"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_id}: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")

@router.post("/secure/bots/{bot_id}/stop")
async def stop_user_bot(
    bot_id: int,
    current_user: User = Depends(get_current_user_by_session),
    db: AsyncSession = Depends(get_db)
):
    """üîí –ë–ï–ó–û–ü–ê–°–ù–û: –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    result = await db.execute(
        select(Shop).where(
            and_(
                Shop.id == bot_id,
                Shop.user_id == current_user.id
            )
        )
    )
    shop = result.scalar_one_or_none()
    
    if not shop:
        raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞")
    
    try:
        # üõë –†–ï–ê–õ–¨–ù–û –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–û–¢–ê –≤ Telegram!
        from bot_engine.api.bot_manager import bot_manager
        await bot_manager.stop_bot(shop.bot_token)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞ –≤ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        shop.is_bot_active = False
        await db.commit()
        
        print(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –±–æ—Ç–∞ {bot_id} (–±–æ–ª—å—à–µ –Ω–µ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã)")
        
        return {"message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ –ë–î
        shop.is_bot_active = False
        await db.commit()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {str(e)}")

@router.delete("/secure/bots/{bot_id}")
async def delete_user_bot(
    bot_id: int,
    current_user: User = Depends(get_current_user_by_session),
    db: AsyncSession = Depends(get_db)
):
    """üîí –ë–ï–ó–û–ü–ê–°–ù–û: –£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    result = await db.execute(
        select(Shop).where(
            and_(
                Shop.id == bot_id,
                Shop.user_id == current_user.id
            )
        )
    )
    shop = result.scalar_one_or_none()
    
    if not shop:
        raise HTTPException(status_code=404, detail="–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞")
    
    try:
        # üõë –°–ù–ê–ß–ê–õ–ê –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–û–¢–ê –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
        if shop.is_bot_active:
            from bot_engine.api.bot_manager import bot_manager
            await bot_manager.stop_bot(shop.bot_token)
            print(f"üõë –ë–æ—Ç {bot_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º")
        
        # –£–¥–∞–ª—è–µ–º –±–æ—Ç–∞ –∏–∑ –ë–î
        await db.delete(shop)
        await db.commit()
        
        print(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} —É–¥–∞–ª–∏–ª –±–æ—Ç–∞ {bot_id} (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω)")
        
        return {"message": "–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —É–¥–∞–ª–µ–Ω"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ {bot_id}: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        await db.delete(shop)
        await db.commit()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞: {str(e)}")

@router.post("/secure/constructor/designs", response_model=DesignResponse)
async def create_design_secure(
    design_data: DesignCreate,
    current_user: User = Depends(get_current_user_by_session)
):
    """üîí –ë–ï–ó–û–ü–ê–°–ù–û: –°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –¢–û–õ–¨–ö–û –¥–ª—è —Å–≤–æ–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞"""
    global next_design_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ shop_id –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_shop_exists = any(
        bot["id"] == design_data.shop_id and bot.get("user_id") == current_user.id
        for bot in bots_storage
    )
    
    if not user_shop_exists:
        print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} –ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –¥–ª—è —á—É–∂–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ {design_data.shop_id}")
        raise HTTPException(status_code=403, detail="–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–∞–≥–∞–∑–∏–Ω—É")
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∏–∑–∞–π–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
    for design in designs_storage:
        if (design["shop_id"] == design_data.shop_id and 
            design.get("user_id") == current_user.id and 
            design["is_active"]):
            design["is_active"] = False
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∑–∞–π–Ω
    new_design = {
        "id": next_design_id,
        "shop_id": design_data.shop_id,
        "user_id": current_user.id,  # üîí –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ø—Ä–∏–≤—è–∑–∫–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        "theme_name": design_data.theme_name,
        "primary_color": design_data.primary_color,
        "secondary_color": design_data.secondary_color,
        "font_family": design_data.font_family,
        "blocks_data": design_data.blocks_data,
        "is_active": True,
        "created_at": datetime.now(timezone.utc),
        "updated_at": datetime.now(timezone.utc)
    }
    
    designs_storage.append(new_design)
    next_design_id += 1
    
    print(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} —Å–æ–∑–¥–∞–ª –¥–∏–∑–∞–π–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ {design_data.shop_id}")
    return DesignResponse(**new_design)

@router.get("/secure/constructor/designs", response_model=List[DesignResponse])
async def get_user_designs(
    current_user: User = Depends(get_current_user_by_session)
):
    """üîí –ë–ï–ó–û–ü–ê–°–ù–û: –ü–æ–ª—É—á–∏—Ç—å –¢–û–õ–¨–ö–û –¥–∏–∑–∞–π–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_designs = [
        design for design in designs_storage 
        if design.get("user_id") == current_user.id
    ]
    
    print(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–≤–æ–∏ –¥–∏–∑–∞–π–Ω—ã: {len(user_designs)}")
    return [DesignResponse(**design) for design in user_designs]

@router.get("/secure/analytics/dashboard")
async def get_user_analytics(
    current_user: User = Depends(get_current_user_by_session),
    db: AsyncSession = Depends(get_db)
):
    """üîí –ë–ï–ó–û–ü–ê–°–ù–û: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    result = await db.execute(
        select(Shop).where(Shop.user_id == current_user.id)
    )
    user_shops = result.scalars().all()
    
    active_bots = len([shop for shop in user_shops if shop.is_bot_active])
    
    analytics = {
        "total_bots": len(user_shops),
        "active_bots": active_bots,
        "inactive_bots": len(user_shops) - active_bots,
        "total_designs": 0,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –¥–∏–∑–∞–π–Ω–æ–≤ –∏–∑ –ë–î
        "user_id": current_user.id,
        "telegram_id": current_user.telegram_id,
        "subscription_plan": current_user.subscription_plan
    }
    
    print(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏—Ç–∏–∫—É")
    return analytics

# ===== –¢–ï–°–¢–û–í–´–ï –≠–ù–î–ü–û–ò–ù–¢–´ =====

@router.get("/secure/test/auth")
async def test_auth(current_user: User = Depends(get_current_user_by_session)):
    """–¢–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    return {
        "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!",
        "user_id": current_user.id,
        "telegram_id": current_user.telegram_id,
        "username": current_user.username,
        "subscription_plan": current_user.subscription_plan
    }

@router.get("/secure/test/user-data")
async def test_user_data(
    current_user: User = Depends(get_current_user_by_session),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    result = await db.execute(
        select(Shop).where(Shop.user_id == current_user.id)
    )
    user_shops = result.scalars().all()
    
    return {
        "user": {
            "id": current_user.id,
            "telegram_id": current_user.telegram_id,
            "username": current_user.username
        },
        "data": {
            "bots_count": len(user_shops),
            "designs_count": 0,  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å—á–µ—Ç –¥–∏–∑–∞–π–Ω–æ–≤ –∏–∑ –ë–î
            "bots": [{"id": shop.id, "name": shop.name} for shop in user_shops],
            "designs": []  # TODO: –¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∑–∞–π–Ω—ã –∏–∑ –ë–î
        },
        "security": {
            "isolated_data": True,
            "telegram_verified": True,
            "message": "–í—ã –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ!"
        }
    }

# ===== –≠–ù–î–ü–û–ò–ù–¢–´ –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –ü–û –ö–û–î–ê–ú =====

class LoginRequest(BaseModel):
    code: str

class AdminLoginRequest(BaseModel):
    password: str

@router.post("/auth/login")
async def login_with_code(
    request: Request,
    login_data: LoginRequest,
    response: Response,
    db: AsyncSession = Depends(get_db)
):
    """üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∫–æ–¥—É –∏–∑ Telegram –±–æ—Ç–∞"""
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    log_request(request, "login_attempt")
    
    code = login_data.code
    if not code:
        log_auth_error("missing_code", "–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω", request)
        raise HTTPException(status_code=400, detail="–ö–æ–¥ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º IP –∏ User-Agent –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    ip_address = request.client.host if hasattr(request, 'client') else None
    user_agent = request.headers.get("User-Agent")
    
    logger.info(f"üîë LOGIN ATTEMPT | Code: {code} | IP: {ip_address} | UA: {user_agent[:50] if user_agent else 'unknown'}...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session_token = await DatabaseCodeAuth.verify_code_and_create_session(
            code=code,
            db=db,
            ip_address=ip_address,
            user_agent=user_agent
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        session_data = await DatabaseCodeAuth.verify_session(session_token, db)
        if session_data:
            log_auth_success(
                user_id=session_data["user_id"],
                telegram_id=session_data["telegram_id"],
                session_type="user_code_auth",
                request=request
            )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å —Ç–æ–∫–µ–Ω–æ–º —Å–µ—Å—Å–∏–∏ (24 —á–∞—Å–∞)
        response.set_cookie(
            key="session_token",
            value=session_token,
            max_age=24 * 60 * 60,  # 24 —á–∞—Å–∞
            httponly=True,
            secure=False,  # True –¥–ª—è HTTPS
            samesite="lax"
        )
        
        logger.info(f"‚úÖ LOGIN SUCCESS | Session created | Token: {session_token[:20]}... | Expires: 24h")
        
        return {
            "success": True,
            "session_token": session_token,
            "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
            "expires_in": 24 * 60 * 60  # 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        }
        
    except HTTPException as e:
        error_detail = str(e.detail) if hasattr(e, 'detail') else str(e)
        log_auth_error("http_exception", f"Code: {code} | Error: {error_detail}", request)
        logger.error(f"‚ùå LOGIN FAILED | Code: {code} | Status: {e.status_code} | Detail: {error_detail}")
        raise e
    except Exception as e:
        error_detail = str(e)
        error_trace = traceback.format_exc()
        log_auth_error("unexpected_error", f"Code: {code} | Error: {error_detail}", request)
        logger.error(f"‚ùå LOGIN CRITICAL ERROR | Code: {code} | Error: {error_detail}")
        logger.error(f"   Traceback: {error_trace}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@router.post("/auth/admin-login")
async def admin_login(
    request: Request,
    admin_data: dict,
    response: Response,
    db: AsyncSession = Depends(get_db)
):
    """üëë –ê–¥–º–∏–Ω—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ –ë–î"""
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
    log_request(request, "admin_login_attempt")
    
    password = admin_data.get("password")
    if not password:
        log_auth_error("missing_admin_password", "–ê–¥–º–∏–Ω—Å–∫–∏–π –ø–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω", request)
        raise HTTPException(status_code=400, detail="–ü–∞—Ä–æ–ª—å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
    
    # –ü–æ–ª—É—á–∞–µ–º IP –∏ User-Agent –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    ip_address = request.client.host if hasattr(request, 'client') else None
    user_agent = request.headers.get("User-Agent")
    
    logger.info(f"üëë ADMIN LOGIN ATTEMPT | IP: {ip_address} | UA: {user_agent[:50] if user_agent else 'unknown'}...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
        admin_token = await AdminSessionManager.create_admin_session(
            password=password,
            db=db,
            ip_address=ip_address,
            user_agent=user_agent,
            session_info={
                "login_time": datetime.now(timezone.utc).isoformat(),
                "login_method": "admin_password"
            }
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π –≤—Ö–æ–¥
        log_auth_success(
            user_id=0,  # –ê–¥–º–∏–Ω—Å–∫–∏–π ID
            telegram_id="admin",
            session_type="admin_password_auth",
            request=request
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º cookie —Å –∞–¥–º–∏–Ω—Å–∫–∏–º —Ç–æ–∫–µ–Ω–æ–º (12 —á–∞—Å–æ–≤)
        response.set_cookie(
            key="admin_token",
            value=admin_token,
            max_age=12 * 60 * 60,  # 12 —á–∞—Å–æ–≤
            httponly=True,
            secure=False,  # True –¥–ª—è HTTPS
            samesite="lax"
        )
        
        logger.info(f"‚úÖ ADMIN LOGIN SUCCESS | Token: {admin_token[:20]}... | Expires: 12h")
        
        return {
            "success": True,
            "admin_token": admin_token,
            "message": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î)",
            "expires_in": 12 * 60 * 60,  # 12 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            "profile_type": "admin_temporary_db",
            "note": "–ê–¥–º–∏–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤"
        }
        
    except HTTPException as e:
        error_detail = str(e.detail) if hasattr(e, 'detail') else str(e)
        log_auth_error("admin_http_exception", f"Password attempt failed | Error: {error_detail}", request)
        logger.error(f"‚ùå ADMIN LOGIN FAILED | Status: {e.status_code} | Detail: {error_detail}")
        raise e
    except Exception as e:
        error_detail = str(e)
        error_trace = traceback.format_exc()
        log_auth_error("admin_unexpected_error", f"Error: {error_detail}", request)
        logger.error(f"‚ùå ADMIN LOGIN CRITICAL ERROR | Error: {error_detail}")
        logger.error(f"   Traceback: {error_trace}")
        raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

@router.post("/auth/logout")
async def logout(
    request: Request,
    response: Response,
    current_user: User = Depends(get_current_user_by_session),
    db: AsyncSession = Depends(get_db)
):
    """üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    session_token = request.cookies.get("session_token") or request.cookies.get("admin_token")
    
    if session_token and session_token.startswith("admin_"):
        # –ê–¥–º–∏–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è
        await AdminSessionManager.logout_admin_session(session_token, db)
        response.delete_cookie("admin_token")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è
        if session_token:
            await DatabaseCodeAuth.logout_session(session_token, db)
        response.delete_cookie("session_token")
    
    return {"success": True, "message": "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"}

@router.get("/auth/check")
async def check_auth(request: Request, current_user: User = Depends(get_current_user_by_session)):
    """
    ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    """
    try:
        user_info = f"ID:{current_user.id}|TG:{current_user.telegram_id}"
        log_request(request, user_info)
        
        logger.info(f"‚úÖ AUTH CHECK SUCCESS | User: {user_info} | Username: {current_user.username}")
        
        return {
            "authenticated": True,
            "user_id": current_user.id,
            "telegram_id": current_user.telegram_id,
            "username": current_user.username,
            "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞"
        }
    except Exception as e:
        log_api_error("/auth/check", e, "unknown", request)
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

@router.get("/auth/stats")
async def auth_statistics(db: AsyncSession = Depends(get_db)):
    """
    üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    """
    stats = await get_auth_stats(db)
    return {
        "auth_system": "temporary_codes_database",
        "code_lifetime_minutes": 30,
        "session_lifetime_hours": 12,
        "database": "postgresql",
        "stats": stats
    }

# ===== –ú–û–ù–ò–¢–û–†–ò–ù–ì –ë–û–¢–û–í =====

class BotUserTrackingRequest(BaseModel):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞"""
    telegram_id: str
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    ip_address: Optional[str] = None
    user_agent: Optional[str] = None

@router.post("/secure/analytics/track-user")
async def track_bot_user(
    tracking_data: BotUserTrackingRequest,
    request: Request,
    current_user: User = Depends(get_current_user_by_session)
):
    """üìä –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º IP –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        ip_address = tracking_data.ip_address or request.client.host
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ–∫–∞ –±–µ–∑ –ë–î, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º)
        user_data = await AnalyticsService.track_bot_user(
            shop_id=1,  # TODO: –ø–æ–ª—É—á–∞—Ç—å shop_id –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_id=tracking_data.telegram_id,
            username=tracking_data.username,
            first_name=tracking_data.first_name,
            last_name=tracking_data.last_name,
            ip_address=ip_address,
            user_agent=tracking_data.user_agent or request.headers.get("user-agent")
        )
        
        return {
            "success": True,
            "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç—Å–ª–µ–∂–µ–Ω",
            "data": user_data
        }
        
    except Exception as e:
        try:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        except:
            print("Error tracking user")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")

@router.get("/secure/analytics/bot-stats")
async def get_bot_analytics(
    current_user: User = Depends(get_current_user_by_session)
):
    """üìà –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –±–æ—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ–º–æ-–∞–Ω–∞–ª–∏—Ç–∏–∫—É (–ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        analytics = await AnalyticsService.get_demo_analytics(shop_id=1)
        
        try:
            print(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.telegram_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏—Ç–∏–∫—É –±–æ—Ç–∞")
        except:
            print("User requested bot analytics")
        
        return {
            "success": True,
            "analytics": analytics
        }
        
    except Exception as e:
        try:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        except:
            print("Error getting analytics")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

@router.get("/secure/analytics/quick-stats")
async def get_quick_stats(
    current_user: User = Depends(get_current_user_by_session)
):
    """‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        analytics = await AnalyticsService.get_demo_analytics(shop_id=1)
        
        return {
            "success": True,
            "stats": analytics["quick_stats"]
        }
        
    except Exception as e:
        try:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        except:
            print("Error getting quick stats")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@router.get("/secure/analytics/countries")
async def get_countries_stats(
    current_user: User = Depends(get_current_user_by_session)
):
    """üåç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º"""
    try:
        analytics = await AnalyticsService.get_demo_analytics(shop_id=1)
        
        return {
            "success": True,
            "countries": analytics["countries"]
        }
        
    except Exception as e:
        try:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞–Ω: {e}")
        except:
            print("Error getting countries stats")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞–Ω")

@router.get("/secure/analytics/users")
async def get_bot_users(
    current_user: User = Depends(get_current_user_by_session)
):
    """üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
    try:
        analytics = await AnalyticsService.get_demo_analytics(shop_id=1)
        
        return {
            "success": True,
            "users": analytics["top_users"],
            "total": analytics["total_users"]
        }
        
    except Exception as e:
        try:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: {e}")
        except:
            print("Error getting bot users")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@router.post("/secure/analytics/geolocation")
async def get_ip_geolocation(request: Request):
    """üó∫Ô∏è –ü–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ IP"""
    try:
        ip_address = request.client.host
        geo_data = await AnalyticsService.get_geolocation(ip_address)
        
        return {
            "success": True,
            "ip": ip_address,
            "location": geo_data
        }
        
    except Exception as e:
        try:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: {e}")
        except:
            print("Error getting geolocation")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏")

# ===== –ê–î–ú–ò–ù–°–ö–ò–ï API –≠–ù–î–ü–û–ò–ù–¢–´ (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞) =====

@router.get("/admin/bots", response_model=List[BotResponse])
async def get_all_bots_admin(
    request: Request,
    db: AsyncSession = Depends(get_db)
):
    """üëë –ê–î–ú–ò–ù: –ü–æ–ª—É—á–∏—Ç—å –í–°–ï –±–æ—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω
    admin_token = await get_admin_token(request)
    
    result = await db.execute(select(Shop))
    all_shops = result.scalars().all()
    
    print(f"üëë –ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª –≤—Å–µ –±–æ—Ç—ã: {len(all_shops)}")
    
    return [
        BotResponse(
            id=shop.id,
            shop_name=shop.name,
            description=shop.description,
            bot_token=shop.bot_token,
            bot_username=shop.bot_username,
            is_active=shop.is_bot_active,
            user_id=shop.user_id,
            created_at=shop.created_at,
            updated_at=shop.updated_at
        )
        for shop in all_shops
    ]

@router.post("/admin/bots", response_model=BotResponse)
async def create_bot_admin(
    bot_data: BotCreate,
    request: Request,
    db: AsyncSession = Depends(get_db)
):
    """üëë –ê–î–ú–ò–ù: –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω
    admin_token = await get_admin_token(request)
    
    # –î–ª—è –∞–¥–º–∏–Ω–∞ —Å–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ —Å user_id = 1 (–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å)
    new_shop = Shop(
        user_id=1,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∞–¥–º–∏–Ω–∞
        name=bot_data.shop_name,
        description=bot_data.description,
        bot_token=bot_data.bot_token,
        bot_username=bot_data.bot_username,
        is_bot_active=True
    )
    
    db.add(new_shop)
    await db.commit()
    await db.refresh(new_shop)
    
    print(f"üëë –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–ª –±–æ—Ç–∞: {bot_data.shop_name}")
    
    return BotResponse(
        id=new_shop.id,
        shop_name=new_shop.name,
        description=new_shop.description,
        bot_token=new_shop.bot_token,
        bot_username=new_shop.bot_username,
        is_active=new_shop.is_bot_active,
        user_id=new_shop.user_id,
        created_at=new_shop.created_at,
        updated_at=new_shop.updated_at
    )

@router.get("/admin/stats")
async def get_admin_stats(
    admin_token: str = Depends(get_admin_token),
    db: AsyncSession = Depends(get_db)
):
    """üëë –ê–î–ú–ò–ù: –ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    
    # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    shops_result = await db.execute(select(Shop))
    all_shops = shops_result.scalars().all()
    
    users_result = await db.execute(select(User))
    all_users = users_result.scalars().all()
    
    active_bots = len([shop for shop in all_shops if shop.is_bot_active])
    
    stats = {
        "total_users": len(all_users),
        "total_bots": len(all_shops),
        "active_bots": active_bots,
        "inactive_bots": len(all_shops) - active_bots,
        "admin_access": True,
        "system_status": "operational"
    }
    
    print(f"üëë –ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    return stats

async def get_current_user(request: Request, db: AsyncSession = Depends(get_db)) -> User:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã)"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ cookies
    auth_header = request.headers.get("Authorization")
    token = None
    
    if auth_header and auth_header.startswith("Bearer "):
        token = auth_header[7:]
    else:
        token = request.cookies.get("admin_token") or request.cookies.get("session_token")
    
    if not token:
        raise HTTPException(status_code=401, detail="–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω
    if token.startswith("admin_"):
        if verify_admin_token(token):
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            admin_user = User(
                id=0,  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è –∞–¥–º–∏–Ω–∞
                telegram_id="admin",
                username="admin",
                first_name="Admin",
                last_name="Temporary",
                is_active=True
            )
            print(f"üëë –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {token[:20]}...")
            return admin_user
        else:
            raise HTTPException(status_code=401, detail="–ê–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫")
    
    # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    result = await db.execute(
        select(User)
        .join(UserSession)
        .where(UserSession.session_token == token)
        .where(UserSession.is_active == True)
        .where(UserSession.expires_at > datetime.now(timezone.utc))
    )
    user = result.scalar_one_or_none()
    
    if not user:
        raise HTTPException(status_code=401, detail="–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω")
    
    return user 