#!/usr/bin/env python3
"""
üîí –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ –ë–ï–ó–û–ü–ê–°–ù–û–ì–û API
–ó–∞–ø—É—Å–∫ TeleShop Constructor —Å –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –∏–∑–æ–ª—è—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import uvicorn
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, RedirectResponse

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from logging_config import setup_development_logging, get_logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, current_dir)

# –ò–º–ø–æ—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
from secure_api import router as secure_router
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.auth.db_code_auth import get_current_user_by_session
from shared.models.user import User
from shared.auth.cleanup_task import start_cleanup_task, stop_cleanup_task

# Lifespan context manager –¥–ª—è startup/shutdown
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    await start_cleanup_task()
    yield
    # Shutdown
    await stop_cleanup_task()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="üîí TeleShop Constructor - Secure API",
    description="–ó–∞—â–∏—â–µ–Ω–Ω–∞—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –º–∞–≥–∞–∑–∏–Ω–æ–≤",
    version="2.0.0",
    docs_url="/secure/docs",
    redoc_url="/secure/redoc",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–æ—É—Ç—ã
app.include_router(secure_router)

# –°—Ç–∞—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Next.js —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
# app.mount("/static", StaticFiles(directory="constructor/blocks"), name="static")
# app.mount("/shared", StaticFiles(directory="shared"), name="shared")

# ===== –û–°–ù–û–í–ù–´–ï –ú–ê–†–®–†–£–¢–´ =====

@app.get("/")
async def dashboard_page(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –¥–∞—à–±–æ—Ä–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    logger = get_logger("dashboard")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ cookie —Å–µ—Å—Å–∏–∏ (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ò –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
        session_token = request.cookies.get("session_token")
        admin_token = request.cookies.get("admin_token")
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
        if not session_token and not admin_token:
            return RedirectResponse(url="/login", status_code=302)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –≤—Ö–æ–¥–∞
        if admin_token:
            logger.info("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—à–µ–ª –≤ –¥–∞—à–±–æ—Ä–¥")
        elif session_token:
            logger.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –¥–∞—à–±–æ—Ä–¥")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        dashboard_path = os.path.join(project_root, "01-user-dashboard", "shop_platform", "frontend", "index.html")
        return FileResponse(dashboard_path)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ dashboard_page: {e}")
        return RedirectResponse(url="/login", status_code=302)

@app.get("/dashboard")
async def dashboard_redirect(request: Request):
    """–î–∞—à–±–æ—Ä–¥ (–∞–ª–∏–∞—Å –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)"""
    return await dashboard_page(request)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "security": "enabled",
        "database": "postgresql",
        "message": "Secure API is running"
    }

@app.get("/constructor")
async def constructor_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)"""
    constructor_path = os.path.join(project_root, "01-user-dashboard/konstruktor", "frontend", "constructor.html")
    return FileResponse(constructor_path)

@app.get("/blocks")
async def blocks_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–ª–æ–∫–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)"""
    blocks_path = os.path.join(project_root, "01-user-dashboard/konstruktor", "frontend", "block-constructor.html")
    return FileResponse(blocks_path)

@app.get("/login")
async def login_page():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    login_path = os.path.join(project_root, "02-auth-panel", "frontend", "login.html")
    return FileResponse(login_path)

@app.get("/admin")
async def admin_page():
    """üîê –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å"""
    admin_path = os.path.join(project_root, "03-admin-panel", "frontend", "admin.html")
    return FileResponse(admin_path)

@app.get("/secure/user/profile")
async def get_user_profile(current_user: User = Depends(get_current_user_by_session)):
    """üîí –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return {
        "id": current_user.id,
        "telegram_id": current_user.telegram_id,
        "username": current_user.username,
        "first_name": current_user.first_name,
        "last_name": current_user.last_name,
        "subscription_plan": current_user.subscription_plan,
        "is_active": current_user.is_active,
        "created_at": current_user.created_at
    }

# ===== –û–¢–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ï–ë–ï–ó–û–ü–ê–°–ù–û–ì–û API =====

@app.get("/api/bots")
async def deprecated_bots_endpoint():
    """–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    raise HTTPException(
        status_code=410,
        detail={
            "error": "–≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "reason": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "solution": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/secure/bots —Å Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π",
            "migration": {
                "old": "/api/bots",
                "new": "/api/secure/bots",
                "auth": "–ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ @–≤–∞—à–µ–º_–±–æ—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /login"
            },
            "security": "üîí –í–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"
        }
    )

@app.get("/api/constructor/designs")
async def deprecated_designs_endpoint():
    """–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    raise HTTPException(
        status_code=410,
        detail={
            "error": "–≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "reason": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ –≤–∏–¥–µ—Ç—å —á—É–∂–∏–µ –¥–∏–∑–∞–π–Ω—ã",
            "solution": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/secure/constructor/designs",
            "migration": {
                "old": "/api/constructor/designs",
                "new": "/api/secure/constructor/designs"
            }
        }
    )

@app.get("/api/analytics/dashboard")
async def deprecated_analytics_endpoint():
    """–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    raise HTTPException(
        status_code=410,
        detail={
            "error": "–≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "reason": "–ü–æ–∫–∞–∑—ã–≤–∞–ª –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "solution": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /api/secure/analytics/dashboard",
            "message": "–¢–µ–ø–µ—Ä—å –≤—ã –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"
        }
    )

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_development_logging()
    logger = get_logger("main")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
    if os.name == 'nt':
        try:
            os.system('chcp 65001 >nul')  # UTF-8 –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
        except:
            pass
    
    logger.info("üîí –ó–∞–ø—É—Å–∫ TeleShop Constructor - Secure API")
    logger.info("‚îÅ" * 50)
    logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–¥–∞–º: –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL: –ü–û–î–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("‚úÖ –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (12—á): –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: –ê–ö–¢–ò–í–ù–´")
    logger.warning("‚ùå –ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: –û–¢–ö–õ–Æ–ß–ï–ù–´")
    logger.info("‚îÅ" * 50)
    logger.info("üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞: http://localhost:8000/login")
    logger.info("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/secure/docs")
    logger.info("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: http://localhost:8000/api/auth/login")
    logger.info("ü§ñ –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ Telegram –±–æ—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /login")
    logger.info("‚îÅ" * 50)
    
    uvicorn.run(
        "main_secure:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 
