#!/usr/bin/env python3
"""
üîí –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ –ë–ï–ó–û–ü–ê–°–ù–û–ì–û API
–ó–∞–ø—É—Å–∫ TeleShop Constructor —Å –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –∏–∑–æ–ª—è—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import uvicorn
import logging
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, RedirectResponse

# –ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from logging_config import setup_development_logging, get_logger

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, current_dir)

# –ò–º–ø–æ—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ä–æ—É—Ç–µ—Ä–æ–≤
from secure_api import router as secure_router
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.auth.db_code_auth import get_current_user_by_session
from shared.models.user import User
from shared.auth.cleanup_task import start_cleanup_task, stop_cleanup_task
from shared.utils.database import get_db

# –ò–º–ø–æ—Ä—Ç BotManager
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))
from bot_engine.manager import BotManager

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è BotManager
bot_manager = None

def get_bot_manager():
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä BotManager"""
    global bot_manager
    if bot_manager is None:
        raise HTTPException(status_code=500, detail="BotManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    return bot_manager

# Lifespan context manager –¥–ª—è startup/shutdown
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global bot_manager
    
    # Startup
    await start_cleanup_task()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BotManager
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –≤–º–µ—Å—Ç–æ get_db()
        from shared.utils.database import AsyncSessionLocal
        async with AsyncSessionLocal() as db_session:
            bot_manager = BotManager(db_session)
            await bot_manager.load_active_bots()
            get_logger("main").info("‚úÖ BotManager –∑–∞–ø—É—â–µ–Ω –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
    except Exception as e:
        get_logger("main").error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BotManager: {e}")
    
    yield
    
    # Shutdown
    if bot_manager:
        await bot_manager.shutdown()
        get_logger("main").info("üõë BotManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    await stop_cleanup_task()

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title="üîí TeleShop Constructor - Secure API",
    description="–ó–∞—â–∏—â–µ–Ω–Ω–∞—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –º–∞–≥–∞–∑–∏–Ω–æ–≤",
    version="2.0.0",
    docs_url="/secure/docs",
    redoc_url="/secure/redoc",
    lifespan=lifespan
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000",
        "https://localhost:3000", 
        "http://localhost:3001",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:3001",
        "http://77.73.232.46:3000",
        "http://77.73.232.46:3001",
        "https://77.73.232.46:3000",
        "https://77.73.232.46:3001"
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–æ—É—Ç—ã –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞
app.include_router(secure_router)

@app.get("/")
async def dashboard_page(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –¥–∞—à–±–æ—Ä–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"""
    logger = get_logger("dashboard")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ cookie —Å–µ—Å—Å–∏–∏ (–æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ò –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)
        session_token = request.cookies.get("session_token")
        admin_token = request.cookies.get("admin_token")
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
        if not session_token and not admin_token:
            return RedirectResponse(url="/login", status_code=302)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –≤—Ö–æ–¥–∞
        if admin_token:
            logger.info("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—à–µ–ª –≤ –¥–∞—à–±–æ—Ä–¥")
        elif session_token:
            logger.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—à–µ–ª –≤ –¥–∞—à–±–æ—Ä–¥")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        dashboard_path = os.path.join(project_root, "01-user-dashboard", "shop_platform", "frontend", "index.html")
        return FileResponse(dashboard_path)
    except Exception as e:
        logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ dashboard_page: {e}")
        return RedirectResponse(url="/login", status_code=302)

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "security": "enabled",
        "database": "postgresql",
        "message": "Secure API is running"
    }

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_development_logging()
    logger = get_logger("main")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
    if os.name == 'nt':
        try:
            os.system('chcp 65001 >nul')  # UTF-8 –¥–ª—è Windows –∫–æ–Ω—Å–æ–ª–∏
        except:
            pass
    
    logger.info("üîí –ó–∞–ø—É—Å–∫ TeleShop Constructor - Secure API (FIXED)")
    logger.info("‚îÅ" * 50)
    logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–¥–∞–º: –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL: –ü–û–î–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("‚úÖ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("‚úÖ –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (12—á): –í–ö–õ–Æ–ß–ï–ù–ê")
    logger.info("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: –ê–ö–¢–ò–í–ù–´")
    logger.info("‚úÖ –†–æ—É—Ç–µ—Ä –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api: –ò–°–ü–†–ê–í–õ–ï–ù–û")
    logger.info("‚îÅ" * 50)
    logger.info("üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: http://localhost:8000/auth/login")
    logger.info("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞: http://localhost:8000/auth/check")
    logger.info("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/secure/docs")
    logger.info("‚îÅ" * 50)
    
    uvicorn.run(
        "api_server:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    ) 