#!/usr/bin/env python3
"""
üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è TeleShop Constructor
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞–º–∏ backend API
"""

import logging
import sys
from datetime import datetime
from typing import Optional

class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏"""
    
    # –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ANSI
    COLORS = {
        'DEBUG': '\033[36m',     # Cyan
        'INFO': '\033[32m',      # Green  
        'WARNING': '\033[33m',   # Yellow
        'ERROR': '\033[31m',     # Red
        'CRITICAL': '\033[35m',  # Magenta
        'RESET': '\033[0m'       # Reset
    }
    
    def format(self, record):
        # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        reset = self.COLORS['RESET']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
        log_message = super().format(record)
        return f"{color}{log_message}{reset}"

def setup_logging(
    level: str = "INFO",
    log_to_file: bool = False,
    log_file: Optional[str] = None,
    colored_output: bool = True
):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    
    Args:
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARNING, ERROR, CRITICAL)
        log_to_file: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª
        log_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
        colored_output: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ —Ü–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏
    """
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
    logging.getLogger().handlers.clear()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    log_level = getattr(logging, level.upper(), logging.INFO)
    logging.getLogger().setLevel(log_level)
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    date_format = '%Y-%m-%d %H:%M:%S'
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(log_level)
    
    if colored_output:
        console_formatter = ColoredFormatter(log_format, date_format)
    else:
        console_formatter = logging.Formatter(log_format, date_format)
    
    console_handler.setFormatter(console_formatter)
    logging.getLogger().addHandler(console_handler)
    
    # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if log_to_file:
        if not log_file:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            log_file = f"logs/teleshop_api_{timestamp}.log"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        import os
        os.makedirs(os.path.dirname(log_file), exist_ok=True)
        
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(log_level)
        file_formatter = logging.Formatter(log_format, date_format)
        file_handler.setFormatter(file_formatter)
        logging.getLogger().addHandler(file_handler)
        
        print(f"üìÑ –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª: {log_file}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    configure_specific_loggers(log_level)
    
    print(f"üìä –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ | –£—Ä–æ–≤–µ–Ω—å: {level} | –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥: {colored_output} | –§–∞–π–ª: {log_to_file}")

def configure_specific_loggers(log_level):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è API
    api_logger = logging.getLogger("secure_api")
    api_logger.setLevel(log_level)
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_logger = logging.getLogger("auth_system")
    auth_logger.setLevel(log_level)
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è Telegram –±–æ—Ç–∞
    bot_logger = logging.getLogger("telegram_bot")
    bot_logger.setLevel(log_level)
    
    # –õ–æ–≥–≥–µ—Ä –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_logger = logging.getLogger("database")
    db_logger.setLevel(log_level)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∏–∑–ª–∏—à–Ω–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("urllib3").setLevel(logging.WARNING)
    logging.getLogger("sqlalchemy.engine").setLevel(logging.WARNING)
    logging.getLogger("asyncpg").setLevel(logging.WARNING)

def get_logger(name: str) -> logging.Logger:
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º"""
    return logging.getLogger(name)

# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
PRODUCTION_CONFIG = {
    "level": "WARNING",
    "log_to_file": True,
    "colored_output": False
}

DEVELOPMENT_CONFIG = {
    "level": "INFO", 
    "log_to_file": False,
    "colored_output": True
}

DEBUG_CONFIG = {
    "level": "DEBUG",
    "log_to_file": True,
    "colored_output": True
}

def setup_production_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞"""
    setup_logging(**PRODUCTION_CONFIG)

def setup_development_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    setup_logging(**DEVELOPMENT_CONFIG)

def setup_debug_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    setup_logging(**DEBUG_CONFIG) 