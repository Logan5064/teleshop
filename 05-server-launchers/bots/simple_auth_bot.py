#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ü§ñ TeleShop Simple Auth Bot
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
import asyncio
import logging
import random
import string
from pathlib import Path

# –ü—Ä–æ—Å—Ç—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import asyncpg
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# FastAPI –¥–ª—è –≤–µ–± API
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import uvicorn
import threading

# –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
BOT_TOKEN = None
config_path = os.path.join(project_root, "05-server-launchers", "config", "shared", "config", "auth_config.env")

try:
    if os.path.exists(config_path):
        with open(config_path, 'r', encoding='utf-8') as f:
            for line in f:
                if line.startswith('TELEGRAM_BOT_TOKEN='):
                    BOT_TOKEN = line.split('=', 1)[1].strip()
                    break
        if BOT_TOKEN:
            logger.info("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ auth_config.env")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

if not BOT_TOKEN:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    sys.exit(1)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ –ø–∞–º—è—Ç–∏)
auth_codes = {}

def generate_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è 6-–∑–Ω–∞—á–Ω–æ–≥–æ –∫–æ–¥–∞"""
    return ''.join(random.choices(string.digits, k=6))

# FastAPI –º–æ–¥–µ–ª–∏
class CodeVerifyRequest(BaseModel):
    code: str

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="TeleShop Auth Bot API")

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:8000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/health")
async def health():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return {"status": "ok", "bot": "simple_auth_bot"}

@app.post("/api/auth/verify-code")
async def verify_code(request: CodeVerifyRequest):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    code = request.code
    
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞: {code}")
    
    if code not in auth_codes:
        logger.warning(f"‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {code}")
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è (15 –º–∏–Ω—É—Ç)
    code_data = auth_codes[code]
    current_time = asyncio.get_event_loop().time()
    if current_time - code_data['created_at'] > 900:  # 15 –º–∏–Ω—É—Ç
        del auth_codes[code]
        logger.warning(f"‚è∞ –ö–æ–¥ –∏—Å—Ç–µ–∫: {code}")
        raise HTTPException(status_code=400, detail="–ö–æ–¥ –∏—Å—Ç–µ–∫")
    
    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    user_data = auth_codes.pop(code)
    
    logger.info(f"‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['user_id']}")
    
    return {
        "success": True,
        "session_token": f"session_{user_data['user_id']}_{random.randint(100000, 999999)}",
        "expires_in": 86400,  # 24 —á–∞—Å–∞
        "message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
        "user": {
            "telegram_id": user_data['user_id'],
            "username": user_data['username'],
            "first_name": user_data['first_name']
        }
    }

def run_fastapi():
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞"""
    uvicorn.run(app, host="127.0.0.1", port=8080, log_level="info")

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    keyboard = [
        [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞", callback_data="get_code")],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeleShop Constructor!**

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –º–∞–≥–∞–∑–∏–Ω–æ–≤.

üîë **–î–ª—è –≤—Ö–æ–¥–∞:**
‚Ä¢ –ù–∞–∂–º–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"  
‚Ä¢ –ü–æ–ª—É—á–∏—à—å 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
‚Ä¢ –í–≤–µ–¥–∏ –µ–≥–æ –Ω–∞ http://localhost:3000

‚è∞ **–ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç**
"""
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ TeleShop Auth Bot**

üîë **–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/login` - –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üöÄ **–ö–∞–∫ –≤–æ–π—Ç–∏:**
1. –û—Ç–ø—Ä–∞–≤—å `/login` –∏–ª–∏ –Ω–∞–∂–º–∏ "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥"
2. –ü–æ–ª—É—á–∏ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
3. –ü–µ—Ä–µ–π–¥–∏ –Ω–∞ http://localhost:3000
4. –í–≤–µ–¥–∏ –∫–æ–¥ –≤ —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞

‚ö° **–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç
‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
‚Ä¢ –û–¥–∏–Ω –∫–æ–¥ = –æ–¥–∏–Ω –≤—Ö–æ–¥
"""
    
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞"""
    await generate_code_for_user(update.effective_user, update)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    
    if query.data == "get_code":
        await generate_code_for_user(user, query)
    elif query.data == "help":
        await help_command(update, context)

async def generate_code_for_user(user, update_or_query):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
        code = generate_code()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –≤ –ë–î)
        auth_codes[code] = {
            'user_id': user.id,
            'username': user.username,
            'first_name': user.first_name,
            'created_at': asyncio.get_event_loop().time()
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥", callback_data="get_code")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        success_text = f"""
‚úÖ **–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!**

üîë **–í–∞—à –∫–æ–¥:** `{code}`

üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:3000
2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥: `{code}`
3. –ù–∞–∂–º–∏—Ç–µ "–í–æ–π—Ç–∏"

‚è∞ **–ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 15 –º–∏–Ω—É—Ç**

*–ù–∏–∫–æ–º—É –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ —Å–≤–æ–π –∫–æ–¥!*
"""
        
        if hasattr(update_or_query, 'edit_message_text'):
            await update_or_query.edit_message_text(
                success_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        else:
            await update_or_query.message.reply_text(
                success_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        logger.info(f"‚úÖ –ö–æ–¥ {code} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} ({user.username})")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {e}")
        
        error_msg = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        try:
            if hasattr(update_or_query, 'edit_message_text'):
                await update_or_query.edit_message_text(error_msg)
            else:
                await update_or_query.message.reply_text(error_msg)
        except Exception:
            pass

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        fastapi_thread = threading.Thread(target=run_fastapi, daemon=True)
        fastapi_thread.start()
        logger.info("‚úÖ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("login", login_command))
        application.add_handler(CallbackQueryHandler(button_callback))
        application.add_error_handler(error_handler)
        
        logger.info("‚úÖ Simple Auth Bot –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        application.run_polling(
            poll_interval=1.0,
            timeout=10,
            drop_pending_updates=True
        )
        
    except KeyboardInterrupt:
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main() 