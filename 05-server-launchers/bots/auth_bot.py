import os
import asyncio
import logging
from datetime import datetime, timedelta, timezone
from random import randint
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy import select, Column, Integer, String, DateTime, Boolean
from sqlalchemy.orm import declarative_base

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))

auth_config_path = os.path.join(project_root, "05-server-launchers", "config", "shared", "config", "auth_config.env")
db_config_path = os.path.join(project_root, "05-server-launchers", "config", "shared", "config", "database.env")

load_dotenv(auth_config_path)
load_dotenv(db_config_path)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
raw_url = os.getenv("DATABASE_URL")
# –ó–∞–º–µ–Ω—è–µ–º postgresql –Ω–∞ postgresql+asyncpg –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –ø–∞—Ä–æ–ª–µ
DATABASE_URL = raw_url.replace("postgresql://", "postgresql+asyncpg://").replace("&", "%26")
CODE_TTL_MINUTES = int(os.getenv("AUTH_CODE_LIFETIME_MINUTES", 30))

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
Base = declarative_base()

class AuthCode(Base):
    __tablename__ = "auth_codes"

    id = Column(Integer, primary_key=True)
    code = Column(String, unique=True, nullable=False)
    telegram_id = Column(String, nullable=False)
    telegram_username = Column(String)
    telegram_first_name = Column(String)
    telegram_last_name = Column(String)
    created_at = Column(DateTime(timezone=True), nullable=False)
    expires_at = Column(DateTime(timezone=True), nullable=False)
    is_used = Column(Boolean, default=False)

# --- SQLAlchemy Async Engine ---
engine = create_async_engine(DATABASE_URL, echo=False, future=True)
AsyncSessionLocal = async_sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ ---
def generate_code() -> str:
    return f"{randint(100000, 999999)}"

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ –ë–î ---
async def create_temp_code(telegram_id: str, telegram_data: dict) -> str:
    code = generate_code()
    expires_at = datetime.now(timezone.utc) + timedelta(minutes=CODE_TTL_MINUTES)
    async with AsyncSessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞
        while await session.scalar(select(AuthCode).where(AuthCode.code == code)):
            code = generate_code()
        auth_code = AuthCode(
            code=code,
            telegram_id=telegram_id,
            telegram_username=telegram_data.get('username'),
            telegram_first_name=telegram_data.get('first_name'),
            telegram_last_name=telegram_data.get('last_name'),
            created_at=datetime.now(timezone.utc),
            expires_at=expires_at,
            is_used=False
        )
        session.add(auth_code)
        await session.commit()
    logger.info(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ {code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
    return code

# --- Telegram Bot Handlers ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = f"""üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeleShop Constructor!**\n\n–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\nTeleShop Constructor ‚Äî —ç—Ç–æ SaaS-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –º–∞–≥–∞–∑–∏–Ω–æ–≤ —Å –ø–æ–º–æ—â—å—é drag & drop –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.\n\n**–î–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /login**"""
    keyboard = [
        [InlineKeyboardButton("üîë –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞", callback_data="get_login_code")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def login_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        user = update.callback_query.from_user
        send_method = update.callback_query.edit_message_text
    else:
        user = update.effective_user
        send_method = update.message.reply_text
    telegram_data = {
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name
    }
    try:
        code = await create_temp_code(str(user.id), telegram_data)
        code_text = f"""üîë **–í–∞—à –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞:**\n\n`{code}`\n\n**–í–∞–∂–Ω–æ:**\n‚Ä¢ –ö–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç **{CODE_TTL_MINUTES} –º–∏–Ω—É—Ç**\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏\n‚Ä¢ –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ **24 —á–∞—Å–∞**\n‚Ä¢ –ù–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥!\n\n_–ö–æ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è_"""
        await send_method(code_text, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞ –¥–ª—è {user.id}: {e}")
        await send_method("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        send_method = update.callback_query.edit_message_text
    else:
        send_method = update.message.reply_text
    help_text = """üìñ **–ü–æ–º–æ—â—å –ø–æ TeleShop Constructor**\n\n**–ö–æ–º–∞–Ω–¥—ã:**\n‚Ä¢ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n‚Ä¢ `/login` - –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É\n‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n**–ö–∞–∫ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É:**\n1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/login` –∏–ª–∏ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ\n2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥\n3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n4. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Ö–æ–¥–∞\n5. –ì–æ—Ç–æ–≤–æ! –í—ã –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞ 24 —á–∞—Å–∞\n\n**–û –ø—Ä–æ–µ–∫—Ç–µ:**\nTeleShop Constructor - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è SaaS-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Telegram –º–∞–≥–∞–∑–∏–Ω–æ–≤ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await send_method(help_text, parse_mode='Markdown')

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "get_login_code":
        await login_command(update, context)
    elif query.data == "help":
        await help_command(update, context)

# --- Main ---
def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("login", login_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ TeleShop Auth Bot (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
    application.run_polling()

if __name__ == "__main__":
    main() 