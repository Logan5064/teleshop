#!/usr/bin/env python3
"""
üîë –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–¥–∞–º —Å –ë–î
–†–∞–±–æ—Ç–∞–µ—Ç —Å PostgreSQL, –∫–æ–¥—ã –∏ —Å–µ—Å—Å–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ë–î
"""

import random
import string
import hashlib
import logging
import traceback
from typing import Optional, Dict
from datetime import datetime, timedelta, timezone
from fastapi import HTTPException, Depends, Request
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete, and_

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π  
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.models.user import User
from shared.models.auth_models import AuthCode, UserSession, TelegramUserProfile
from shared.utils.database import get_db, AsyncSessionLocal

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logger = logging.getLogger("auth_system")
logger.setLevel(logging.INFO)

class DatabaseCodeAuth:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–æ–¥–∞–º —á–µ—Ä–µ–∑ –ë–î"""
    
    @staticmethod
    def generate_temp_code() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ (6 —Ü–∏—Ñ—Ä)"""
        return ''.join(random.choices(string.digits, k=6))
    
    @staticmethod
    async def create_temp_code(telegram_id: str, telegram_data: dict, db: AsyncSession) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        telegram_data —Å–æ–¥–µ—Ä–∂–∏—Ç: username, first_name, last_name
        """
        logger.info(f"üîë CODE CREATION START | Telegram ID: {telegram_id} | Username: {telegram_data.get('username', 'None')} | Name: {telegram_data.get('first_name', 'None')}")
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            old_codes_result = await db.execute(
                delete(AuthCode).where(
                    and_(
                        AuthCode.telegram_id == telegram_id,
                        AuthCode.is_used == False
                    )
                )
            )
            deleted_codes = old_codes_result.rowcount
            if deleted_codes > 0:
                logger.info(f"üßπ OLD CODES CLEANED | Telegram ID: {telegram_id} | Deleted: {deleted_codes}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
            attempts = 0
            max_attempts = 10
            while attempts < max_attempts:
                code = DatabaseCodeAuth.generate_temp_code()
                attempts += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
                result = await db.execute(
                    select(AuthCode).where(AuthCode.code == code)
                )
                if result.scalar_one_or_none() is None:
                    logger.info(f"‚úÖ UNIQUE CODE GENERATED | Code: {code} | Attempts: {attempts}")
                    break
                    
                if attempts >= max_attempts:
                    logger.error(f"‚ùå CODE GENERATION FAILED | Telegram ID: {telegram_id} | Max attempts reached")
                    raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥ (15 –º–∏–Ω—É—Ç –∂–∏–∑–Ω–∏)
            current_time = datetime.now(timezone.utc)
            expires_at = current_time + timedelta(minutes=15)
            
            new_code = AuthCode(
                code=code,
                telegram_id=telegram_id,
                telegram_username=telegram_data.get('username'),
                telegram_first_name=telegram_data.get('first_name'),
                telegram_last_name=telegram_data.get('last_name'),
                expires_at=expires_at,
                created_at=current_time  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º created_at –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            )
            
            db.add(new_code)
            await db.commit()
            
            logger.info(f"‚úÖ CODE CREATED SUCCESS | Code: {code} | Telegram ID: {telegram_id} | Expires: {expires_at} | Valid for: 15 min")
            
            return code
            
        except HTTPException as e:
            # –ü–µ—Ä–µ–±—Ä–æ—Å HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            raise e
        except Exception as e:
            error_trace = traceback.format_exc()
            logger.error(f"‚ùå CODE CREATION CRITICAL ERROR | Telegram ID: {telegram_id} | Error: {str(e)}")
            logger.error(f"   Traceback: {error_trace}")
            raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞")
    
    @staticmethod
    def generate_session_token() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏"""
        random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=32))
        return hashlib.sha256(random_string.encode()).hexdigest()
    
    @staticmethod
    async def verify_code_and_create_session(
        code: str, 
        db: AsyncSession,
        ip_address: str = None,
        user_agent: str = None
    ) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤ –ë–î
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
        """
        logger.info(f"üîç CODE VERIFICATION START | Code: {code} | IP: {ip_address} | UA: {user_agent[:50] if user_agent else 'unknown'}...")
        
        try:
            # –ù–∞–π—Ç–∏ –∫–æ–¥ –≤ –ë–î
            result = await db.execute(
                select(AuthCode).where(AuthCode.code == code)
            )
            auth_code = result.scalar_one_or_none()
            
            if not auth_code:
                logger.warning(f"‚ùå CODE NOT FOUND | Code: {code} | IP: {ip_address}")
                raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
            
            logger.info(f"üìã CODE FOUND | Code: {code} | Telegram ID: {auth_code.telegram_id} | Created: {auth_code.created_at} | Expires: {auth_code.expires_at}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –≤–∞–ª–∏–¥–µ–Ω
            if not auth_code.is_valid:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥
                await db.delete(auth_code)
                await db.commit()
                
                if auth_code.is_used:
                    logger.warning(f"‚ùå CODE ALREADY USED | Code: {code} | Telegram ID: {auth_code.telegram_id} | Used at: {auth_code.used_at}")
                    raise HTTPException(status_code=400, detail="–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
                else:
                    logger.warning(f"‚ùå CODE EXPIRED | Code: {code} | Telegram ID: {auth_code.telegram_id} | Expired at: {auth_code.expires_at}")
                    raise HTTPException(status_code=400, detail="–ö–æ–¥ –∏—Å—Ç–µ–∫")
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            auth_code.is_used = True
            auth_code.used_at = datetime.now(timezone.utc)
            logger.info(f"‚úÖ CODE MARKED AS USED | Code: {code} | Telegram ID: {auth_code.telegram_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await DatabaseCodeAuth._get_or_create_user(auth_code, db)
            logger.info(f"üë§ USER PROCESSED | User ID: {user.id} | Telegram ID: {user.telegram_id} | Username: {user.username}")
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å Telegram
            await DatabaseCodeAuth._update_telegram_profile(user, auth_code, db)
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            old_sessions_result = await db.execute(
                delete(UserSession).where(
                    and_(
                        UserSession.user_id == user.id,
                        UserSession.expires_at < datetime.now(timezone.utc)
                    )
                )
            )
            deleted_sessions = old_sessions_result.rowcount
            if deleted_sessions > 0:
                logger.info(f"üßπ OLD SESSIONS CLEANED | User ID: {user.id} | Deleted: {deleted_sessions}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (24 —á–∞—Å–∞)
            session_token = DatabaseCodeAuth.generate_session_token()
            current_time = datetime.now(timezone.utc)
            new_session = UserSession(
                session_token=session_token,
                user_id=user.id,
                telegram_id=auth_code.telegram_id,
                ip_address=ip_address,
                user_agent=user_agent,
                expires_at=current_time + timedelta(hours=24),  # 24 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 12
                created_at=current_time,      # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                last_activity=current_time   # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            )
            
            db.add(new_session)
            await db.commit()
            
            logger.info(f"üé´ SESSION CREATED | User ID: {user.id} | Telegram ID: {auth_code.telegram_id} | Token: {session_token[:20]}... | Expires: 24h")
            
            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
            await db.delete(auth_code)
            await db.commit()
            logger.info(f"üóëÔ∏è CODE DELETED | Code: {code} | Telegram ID: {auth_code.telegram_id}")
            
            return session_token
            
        except HTTPException as e:
            # –ü–µ—Ä–µ–±—Ä–æ—Å HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            raise e
        except Exception as e:
            error_trace = traceback.format_exc()
            logger.error(f"‚ùå CODE VERIFICATION CRITICAL ERROR | Code: {code} | Error: {str(e)}")
            logger.error(f"   Traceback: {error_trace}")
            raise HTTPException(status_code=500, detail="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
    
    @staticmethod
    async def _get_or_create_user(auth_code: AuthCode, db: AsyncSession) -> User:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == auth_code.telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id=auth_code.telegram_id,
                username=auth_code.telegram_username,
                first_name=auth_code.telegram_first_name,
                last_name=auth_code.telegram_last_name,
                is_active=True,
                subscription_plan="free"
            )
            db.add(user)
            await db.commit()
            await db.refresh(user)
            try:
                print(f"üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {auth_code.telegram_id}")
            except UnicodeEncodeError:
                print(f"Sozdan novyy polzovatel: {auth_code.telegram_id}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.username = auth_code.telegram_username
            user.first_name = auth_code.telegram_first_name
            user.last_name = auth_code.telegram_last_name
            await db.commit()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –∫–æ–¥–æ–º
        auth_code.user_id = user.id
        await db.commit()
        
        return user
    
    @staticmethod
    async def _update_telegram_profile(user: User, auth_code: AuthCode, db: AsyncSession):
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
        result = await db.execute(
            select(TelegramUserProfile).where(TelegramUserProfile.user_id == user.id)
        )
        profile = result.scalar_one_or_none()
        
        telegram_data = {
            'username': auth_code.telegram_username,
            'first_name': auth_code.telegram_first_name,
            'last_name': auth_code.telegram_last_name
        }
        
        if not profile:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º timestamp –ø–æ–ª–µ–π
            current_time = datetime.now(timezone.utc)
            profile = TelegramUserProfile(
                user_id=user.id,
                telegram_id=auth_code.telegram_id,
                username=auth_code.telegram_username,
                first_name=auth_code.telegram_first_name,
                last_name=auth_code.telegram_last_name,
                first_seen=current_time,  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
                last_seen=current_time,   # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
                total_logins=1            # –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥
            )
            db.add(profile)
            logger.info(f"üìù PROFILE CREATED | User ID: {user.id} | Telegram ID: {auth_code.telegram_id} | Username: {auth_code.telegram_username}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
            profile.update_profile(telegram_data)
            logger.info(f"üîÑ PROFILE UPDATED | User ID: {user.id} | Telegram ID: {auth_code.telegram_id} | Total logins: {profile.total_logins}")
        
        await db.commit()
    
    @staticmethod
    async def verify_session(session_token: str, db: AsyncSession) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –≤ –ë–î"""
        result = await db.execute(
            select(UserSession).where(UserSession.session_token == session_token)
        )
        session = result.scalar_one_or_none()
        
        if not session:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞
        if not session.is_valid:
            # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
            await db.delete(session)
            await db.commit()
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        session.last_activity = datetime.now(timezone.utc)
        await db.commit()
        
        return {
            "user_id": session.user_id,
            "telegram_id": session.telegram_id,
            "expires_at": session.expires_at,
            "ip_address": session.ip_address
        }
    
    @staticmethod
    async def cleanup_expired(db: AsyncSession):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã –∏ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î"""
        current_time = datetime.now(timezone.utc)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
        expired_codes_result = await db.execute(
            delete(AuthCode).where(AuthCode.expires_at < current_time)
        )
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
        expired_sessions_result = await db.execute(
            delete(UserSession).where(UserSession.expires_at < current_time)
        )
        
        await db.commit()
        
        codes_deleted = expired_codes_result.rowcount
        sessions_deleted = expired_sessions_result.rowcount
        
        if codes_deleted > 0 or sessions_deleted > 0:
            try:
                print(f"üßπ –û—á–∏—â–µ–Ω–æ –∏–∑ –ë–î: {codes_deleted} –∫–æ–¥–æ–≤, {sessions_deleted} —Å–µ—Å—Å–∏–π")
            except UnicodeEncodeError:
                print(f"Ochishcheno iz BD: {codes_deleted} kodov, {sessions_deleted} sessiy")
    
    @staticmethod
    async def logout_session(session_token: str, db: AsyncSession) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Å–µ—Å—Å–∏—é (–≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)"""
        result = await db.execute(
            delete(UserSession).where(UserSession.session_token == session_token)
        )
        await db.commit()
        
        return result.rowcount > 0

# FastAPI Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
async def get_current_user_by_session(
    request: Request,
    db: AsyncSession = Depends(get_db)
) -> User:
    """
    FastAPI Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, —Ç–∞–∫ –∏ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –∏–∑ cookie –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    session_token = request.cookies.get("session_token") or request.cookies.get("admin_token")
    if not session_token:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        session_token = request.headers.get("Authorization")
        if session_token and session_token.startswith("Bearer "):
            session_token = session_token[7:]
    
    if not session_token:
        raise HTTPException(
            status_code=401,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ @–≤–∞—à–µ–º_–±–æ—Ç–µ"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    if session_token.startswith("admin_"):
        from shared.auth.admin_auth import AdminSessionManager, TemporaryAdminUser
        
        admin_session_data = await AdminSessionManager.verify_admin_session(session_token, db)
        if admin_session_data:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π –æ–±—ä–µ–∫—Ç (–ù–ï SQLAlchemy –º–æ–¥–µ–ª—å)
            admin_user = TemporaryAdminUser(admin_session_data)
            try:
                print(f"üëë –ê–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –ë–î: {session_token[:20]}... (–æ—Å—Ç–∞–ª–æ—Å—å {admin_user.time_left_hours:.1f}—á)")
            except:
                print(f"Admin access via DB: {session_token[:20]}... ({admin_user.time_left_hours:.1f}h left)")
            return admin_user
        else:
            raise HTTPException(status_code=401, detail="–ê–¥–º–∏–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞")
    
    # –û–±—ã—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –≤ –ë–î
    session_data = await DatabaseCodeAuth.verify_session(session_token, db)
    if not session_data:
        raise HTTPException(
            status_code=401,
            detail="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ @–≤–∞—à–µ–º_–±–æ—Ç–µ"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    result = await db.execute(
        select(User).where(User.id == session_data["user_id"])
    )
    user = result.scalar_one_or_none()
    
    if not user:
        raise HTTPException(status_code=401, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return user

def verify_admin_token(token: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    if not token or not token.startswith("admin_"):
        return False
    
    try:
        import time
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∏–∑ —Ç–æ–∫–µ–Ω–∞
        parts = token.split("_")
        if len(parts) < 3:
            return False
        
        timestamp = int(parts[1])
        current_time = int(time.time())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫ (12 —á–∞—Å–æ–≤ = 43200 —Å–µ–∫—É–Ω–¥)
        if current_time - timestamp > 43200:
            return False
        
        return True
    except Exception as e:
        try:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω —Ç–æ–∫–µ–Ω–∞: {e}")
        except:
            print(f"Warning: Admin token verification error")
        return False

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def get_auth_stats(db: AsyncSession):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ –ë–î"""
    # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–¥—ã
    active_codes_result = await db.execute(
        select(AuthCode).where(
            and_(
                AuthCode.is_used == False,
                AuthCode.expires_at > datetime.now(timezone.utc)
            )
        )
    )
    active_codes = len(active_codes_result.scalars().all())
    
    # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    active_sessions_result = await db.execute(
        select(UserSession).where(
            and_(
                UserSession.is_active == True,
                UserSession.expires_at > datetime.now(timezone.utc)
            )
        )
    )
    active_sessions = len(active_sessions_result.scalars().all())
    
    # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    total_codes_result = await db.execute(select(AuthCode))
    total_codes = len(total_codes_result.scalars().all())
    
    total_sessions_result = await db.execute(select(UserSession))
    total_sessions = len(total_sessions_result.scalars().all())
    
    return {
        "active_codes": active_codes,
        "active_sessions": active_sessions,
        "total_codes_generated": total_codes,
        "total_sessions_created": total_sessions
    } 