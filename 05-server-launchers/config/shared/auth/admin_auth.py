#!/usr/bin/env python3
"""
üîê –°–∏—Å—Ç–µ–º–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –≤ –ë–î
"""

import random
import string
import hashlib
import json
from typing import Optional, Dict
from datetime import datetime, timedelta, timezone
from fastapi import HTTPException, Request
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete, and_


# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.models.auth_models import AdminSession
from shared.utils.database import get_db

class AdminSessionManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π"""
    
    @staticmethod
    def generate_admin_token() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω"""
        timestamp = str(int(datetime.now(timezone.utc).timestamp()))
        random_string = ''.join(random.choices(string.ascii_letters + string.digits + '-_', k=32))
        return f"admin_{timestamp}_{random_string}"
    
    @staticmethod
    async def create_admin_session(
        password: str,
        db: AsyncSession,
        ip_address: str = None,
        user_agent: str = None,
        session_info: dict = None
    ) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ environment variables
        admin_password = os.getenv("ADMIN_PASSWORD", "")
        if not admin_password:
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        
        if password != admin_password:
            raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π –ø–∞—Ä–æ–ª—å")
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await db.execute(
            delete(AdminSession).where(
                AdminSession.expires_at < datetime.now(timezone.utc)
            )
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        admin_token = AdminSessionManager.generate_admin_token()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é (12 —á–∞—Å–æ–≤)
        new_session = AdminSession(
            admin_token=admin_token,
            ip_address=ip_address,
            user_agent=user_agent,
            expires_at=datetime.now(timezone.utc) + timedelta(hours=12),
            login_method="password",
            session_info=json.dumps(session_info) if session_info else None
        )
        
        db.add(new_session)
        await db.commit()
        
        try:
            print(f"üëë –°–æ–∑–¥–∞–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è: {admin_token[:30]}... (12 —á–∞—Å–æ–≤)")
        except:
            print(f"Admin session created: {admin_token[:30]}... (12 hours)")
        
        return admin_token
    
    @staticmethod
    async def verify_admin_session(admin_token: str, db: AsyncSession) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î"""
        result = await db.execute(
            select(AdminSession).where(AdminSession.admin_token == admin_token)
        )
        session = result.scalar_one_or_none()
        
        if not session:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        if not session.is_valid:
            # –£–¥–∞–ª—è–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é
            await db.delete(session)
            await db.commit()
            return None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        session.last_activity = datetime.now(timezone.utc)
        await db.commit()
        
        return {
            "admin_token": session.admin_token,
            "expires_at": session.expires_at,
            "time_left_hours": session.time_left_hours,
            "ip_address": session.ip_address,
            "created_at": session.created_at
        }
    
    @staticmethod
    async def cleanup_expired_sessions(db: AsyncSession):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏ –∏–∑ –ë–î"""
        current_time = datetime.now(timezone.utc)
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
        expired_result = await db.execute(
            delete(AdminSession).where(AdminSession.expires_at < current_time)
        )
        
        await db.commit()
        
        sessions_deleted = expired_result.rowcount
        
        if sessions_deleted > 0:
            try:
                print(f"üßπ –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π: {sessions_deleted}")
            except:
                print(f"Deleted expired admin sessions: {sessions_deleted}")
        
        return sessions_deleted
    
    @staticmethod
    async def logout_admin_session(admin_token: str, db: AsyncSession) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é —Å–µ—Å—Å–∏—é (–≤—ã—Ö–æ–¥)"""
        result = await db.execute(
            delete(AdminSession).where(AdminSession.admin_token == admin_token)
        )
        await db.commit()
        
        return result.rowcount > 0
    
    @staticmethod
    async def get_admin_sessions_stats(db: AsyncSession) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π"""
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        active_result = await db.execute(
            select(AdminSession).where(
                and_(
                    AdminSession.is_active == True,
                    AdminSession.expires_at > datetime.now(timezone.utc)
                )
            )
        )
        active_sessions = active_result.scalars().all()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_result = await db.execute(select(AdminSession))
        total_sessions = len(total_result.scalars().all())
        
        return {
            "active_sessions": len(active_sessions),
            "total_sessions_created": total_sessions,
            "active_sessions_details": [
                {
                    "token": session.admin_token[:20] + "...",
                    "created_at": session.created_at,
                    "expires_at": session.expires_at,
                    "time_left_hours": session.time_left_hours,
                    "ip_address": session.ip_address
                }
                for session in active_sessions
            ]
        }

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
class TemporaryAdminUser:
    """–í—Ä–µ–º–µ–Ω–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–Ω–µ SQLAlchemy –º–æ–¥–µ–ª—å)"""
    
    def __init__(self, admin_session_data: dict):
        self.id = 0  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è –∞–¥–º–∏–Ω–∞
        self.telegram_id = "admin"
        self.username = "admin"
        self.first_name = "Admin"
        self.last_name = "Temporary"
        self.is_active = True
        self.subscription_plan = "enterprise"
        self.created_at = admin_session_data.get("created_at", datetime.now(timezone.utc))
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
        self.admin_token = admin_session_data.get("admin_token")
        self.expires_at = admin_session_data.get("expires_at")
        self.time_left_hours = admin_session_data.get("time_left_hours", 0)
        self.ip_address = admin_session_data.get("ip_address")
    
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤"""
        return {
            "id": self.id,
            "telegram_id": self.telegram_id,
            "username": self.username,
            "first_name": self.first_name,
            "last_name": self.last_name,
            "is_active": self.is_active,
            "subscription_plan": self.subscription_plan,
            "profile_type": "admin_temporary",
            "expires_at": self.expires_at,
            "time_left_hours": round(self.time_left_hours, 2),
            "ip_address": self.ip_address
        } 