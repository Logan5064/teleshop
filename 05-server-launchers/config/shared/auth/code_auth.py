#!/usr/bin/env python3
"""
üîë –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∫–æ–¥–∞–º
–ü—Ä–æ—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è —Å—Ö–µ–º–∞ –±–µ–∑ Telegram Web App
"""

import random
import string
import time
import hashlib
from typing import Optional, Dict
from datetime import datetime, timedelta
from fastapi import HTTPException, Depends, Request
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥–µ–ª–µ–π  
import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.models.user import User
from shared.utils.database import get_db

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis)
temp_codes = {}  # {code: {telegram_id, expires_at, used}}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis)
active_sessions = {}  # {session_token: {user_id, expires_at}}

class CodeAuth:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –ø–æ –∫–æ–¥–∞–º"""
    
    @staticmethod
    def generate_temp_code() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ (6 —Ü–∏—Ñ—Ä)"""
        return ''.join(random.choices(string.digits, k=6))
    
    @staticmethod
    def create_temp_code(telegram_id: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        code = CodeAuth.generate_temp_code()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ —É–Ω–∏–∫–∞–ª–µ–Ω
        while code in temp_codes:
            code = CodeAuth.generate_temp_code()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ (–¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç)
        temp_codes[code] = {
            "telegram_id": telegram_id,
            "expires_at": datetime.utcnow() + timedelta(minutes=30),
            "used": False,
            "created_at": datetime.utcnow()
        }
        
        print(f"üîë –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ {code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
        return code
    
    @staticmethod
    def generate_session_token() -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏"""
        random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=32))
        return hashlib.sha256(random_string.encode()).hexdigest()
    
    @staticmethod
    async def verify_code_and_create_session(code: str, db: AsyncSession) -> str:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–¥ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏
        """
        if code not in temp_codes:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥")
        
        code_data = temp_codes[code]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        if code_data["used"]:
            raise HTTPException(status_code=400, detail="–ö–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–¥ –Ω–µ –∏—Å—Ç–µ–∫
        if datetime.utcnow() > code_data["expires_at"]:
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥
            del temp_codes[code]
            raise HTTPException(status_code=400, detail="–ö–æ–¥ –∏—Å—Ç–µ–∫")
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        code_data["used"] = True
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = code_data["telegram_id"]
        user = await CodeAuth._get_or_create_user(telegram_id, db)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é (12 —á–∞—Å–æ–≤)
        session_token = CodeAuth.generate_session_token()
        active_sessions[session_token] = {
            "user_id": user.id,
            "telegram_id": telegram_id,
            "expires_at": datetime.utcnow() + timedelta(hours=12),
            "created_at": datetime.utcnow()
        }
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å–µ—Å—Å–∏—è –Ω–∞ 12 —á–∞—Å–æ–≤")
        
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
        del temp_codes[code]
        
        return session_token
    
    @staticmethod
    async def _get_or_create_user(telegram_id: str, db: AsyncSession) -> User:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
            user = User(
                telegram_id=telegram_id,
                username=f"user_{telegram_id}",
                is_active=True,
                subscription_plan="free"
            )
            db.add(user)
            await db.commit()
            await db.refresh(user)
            print(f"üìù –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}")
        
        return user
    
    @staticmethod
    def verify_session(session_token: str) -> Optional[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"""
        if session_token not in active_sessions:
            return None
        
        session_data = active_sessions[session_token]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Å—Å–∏—è –Ω–µ –∏—Å—Ç–µ–∫–ª–∞
        if datetime.utcnow() > session_data["expires_at"]:
            # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à—É—é —Å–µ—Å—Å–∏—é
            del active_sessions[session_token]
            return None
        
        return session_data
    
    @staticmethod
    def cleanup_expired():
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã –∏ —Å–µ—Å—Å–∏–∏"""
        current_time = datetime.utcnow()
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
        expired_codes = [
            code for code, data in temp_codes.items() 
            if current_time > data["expires_at"]
        ]
        for code in expired_codes:
            del temp_codes[code]
        
        # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
        expired_sessions = [
            token for token, data in active_sessions.items()
            if current_time > data["expires_at"]
        ]
        for token in expired_sessions:
            del active_sessions[token]
        
        if expired_codes or expired_sessions:
            print(f"üßπ –û—á–∏—â–µ–Ω–æ: {len(expired_codes)} –∫–æ–¥–æ–≤, {len(expired_sessions)} —Å–µ—Å—Å–∏–π")

# FastAPI Dependency –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
async def get_current_user_by_session(
    request: Request,
    db: AsyncSession = Depends(get_db)
) -> User:
    """
    FastAPI Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–µ—Å—Å–∏–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —Å–µ—Å—Å–∏–∏ –∏–∑ cookie –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    session_token = request.cookies.get("session_token")
    if not session_token:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        session_token = request.headers.get("Authorization")
        if session_token and session_token.startswith("Bearer "):
            session_token = session_token[7:]
    
    if not session_token:
        raise HTTPException(
            status_code=401,
            detail="–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –≤ @–≤–∞—à–µ–º_–±–æ—Ç–µ"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é
    session_data = CodeAuth.verify_session(session_token)
    if not session_data:
        raise HTTPException(
            status_code=401,
            detail="–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –≤ @–≤–∞—à–µ–º_–±–æ—Ç–µ"
        )
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    result = await db.execute(
        select(User).where(User.id == session_data["user_id"])
    )
    user = result.scalar_one_or_none()
    
    if not user:
        raise HTTPException(status_code=401, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return user

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def get_auth_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    current_time = datetime.utcnow()
    
    active_codes = len([
        code for code, data in temp_codes.items()
        if not data["used"] and current_time <= data["expires_at"]
    ])
    
    active_sessions_count = len([
        token for token, data in active_sessions.items()
        if current_time <= data["expires_at"]
    ])
    
    return {
        "active_codes": active_codes,
        "active_sessions": active_sessions_count,
        "total_codes_generated": len(temp_codes),
        "total_sessions_created": len(active_sessions)
    } 