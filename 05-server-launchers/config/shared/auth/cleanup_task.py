#!/usr/bin/env python3
"""
üßπ –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–¥–æ–≤ –∏ —Å–µ—Å—Å–∏–π
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –æ—á–∏—â–∞–µ—Ç –ë–î –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
"""

import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.auth.db_code_auth import DatabaseCodeAuth
from shared.utils.database import AsyncSessionLocal

class AuthCleanupTask:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, interval_minutes: int = 5):
        self.interval_minutes = interval_minutes
        self.is_running = False
        self.task = None
    
    async def cleanup_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏"""
        try:
            print(f"üßπ –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–∫–∞–∂–¥—ã–µ {self.interval_minutes} –º–∏–Ω)")
        except UnicodeEncodeError:
            print(f"Zapushchena zadacha ochistki avtorizacii (kazhdye {self.interval_minutes} min)")
        
        while self.is_running:
            try:
                async with AsyncSessionLocal() as db:
                    await DatabaseCodeAuth.cleanup_expired(db)
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
                await asyncio.sleep(self.interval_minutes * 60)
                
            except Exception as e:
                try:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –æ—á–∏—Å—Ç–∫–∏: {e}")
                except UnicodeEncodeError:
                    print(f"Oshibka v zadache ochistki: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏"""
        if not self.is_running:
            self.is_running = True
            self.task = asyncio.create_task(self.cleanup_loop())
            try:
                print("‚úÖ –§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω–∞")
            except UnicodeEncodeError:
                print("Fonovaya ochistka avtorizacii zapushchena")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏"""
        if self.is_running:
            self.is_running = False
            if self.task:
                self.task.cancel()
                try:
                    await self.task
                except asyncio.CancelledError:
                    pass
            try:
                print("üõë –§–æ–Ω–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            except UnicodeEncodeError:
                print("Fonovaya ochistka avtorizacii ostanovlena")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–¥–∞—á–∏
cleanup_task = AuthCleanupTask()

async def start_cleanup_task():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É"""
    await cleanup_task.start()

async def stop_cleanup_task():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É"""
    await cleanup_task.stop() 