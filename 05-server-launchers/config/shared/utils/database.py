import os
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–µ –∏–∑ —Å–≤–æ–µ–π –ø–∞–ø–∫–∏)
if 'shared' not in __file__:
    current_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = current_dir
    for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
        if os.path.exists(os.path.join(project_root, "main_launcher.py")):
            break
        project_root = os.path.dirname(project_root)
    shared_path = os.path.join(project_root, "05-server-launchers", "config")
    if shared_path not in sys.path:
        sys.path.insert(0, shared_path)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
config_path = os.path.join(os.path.dirname(__file__), "..", "auth_config.env")
load_dotenv(config_path)

# URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ env, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω—é—é –ë–î –Ω–∞–ø—Ä—è–º—É—é
DATABASE_URL = os.getenv("DATABASE_URL")

if not DATABASE_URL:
    # –ü—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–µ–π PostgreSQL –ë–î
    DATABASE_URL = "postgresql+asyncpg://cloud_user:u61e&ke&!Ty1@ladixoofilad.beget.app:5432/default_db"
    print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–µ–π –ë–î")

print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL.split('://')[0]}://...")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è PostgreSQL
engine_kwargs = {
    "echo": False, 
    "future": True,
    "pool_pre_ping": True,
    "pool_recycle": 300,
    "pool_size": 5,
    "max_overflow": 10
}

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º URL –¥–ª—è PostgreSQL —Å asyncpg
if DATABASE_URL.startswith("postgresql://"):
    ASYNC_DATABASE_URL = DATABASE_URL.replace("postgresql://", "postgresql+asyncpg://")
else:
    ASYNC_DATABASE_URL = DATABASE_URL

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
engine = create_async_engine(ASYNC_DATABASE_URL, **engine_kwargs)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
AsyncSessionLocal = sessionmaker(
    engine, 
    class_=AsyncSession, 
    expire_on_commit=False
)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def get_database():
    async with AsyncSessionLocal() as session:
        try:
            yield session
        except Exception as e:
            await session.rollback()
            raise
        finally:
            await session.close()

# –ê–ª–∏–∞—Å –¥–ª—è FastAPI Depends
async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
        except Exception as e:
            await session.rollback()
            raise
        finally:
            await session.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
async def create_tables():
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    from shared.models.user import User
    from shared.models.shop import Shop
    from shared.models.auth_models import AuthCode, UserSession, TelegramUserProfile
    
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –≤ –≤–Ω–µ—à–Ω–µ–π –ë–î —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async def check_database_connection():
    try:
        async with AsyncSessionLocal() as session:
            result = await session.execute(text("SELECT 1"))
            result.fetchone()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–Ω–µ—à–Ω–µ–π PostgreSQL –ë–î —É—Å–ø–µ—à–Ω–æ!")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–π –ë–î: {e}")
        return False 