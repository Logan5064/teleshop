#!/usr/bin/env python3
"""
üîê –ú–æ–¥–µ–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –ë–î
"""

from sqlalchemy import Column, Integer, String, DateTime, Boolean, Text, ForeignKey
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from datetime import datetime, timedelta, timezone

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.utils.database import Base

class AuthCode(Base):
    """
    üîë –¢–∞–±–ª–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    –ö–æ–¥—ã –¥–µ–π—Å—Ç–≤—É—é—Ç 30 –º–∏–Ω—É—Ç
    """
    __tablename__ = "auth_codes"
    
    id = Column(Integer, primary_key=True, index=True)
    code = Column(String(6), unique=True, index=True, nullable=False)
    telegram_id = Column(String, nullable=False)
    user_id = Column(Integer, nullable=True)  # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
    telegram_username = Column(String, nullable=True)
    telegram_first_name = Column(String, nullable=True) 
    telegram_last_name = Column(String, nullable=True)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    expires_at = Column(DateTime(timezone=True), nullable=False)
    used_at = Column(DateTime(timezone=True), nullable=True)
    is_used = Column(Boolean, default=False)
    
    def __repr__(self):
        return f"<AuthCode(code={self.code}, telegram_id={self.telegram_id}, expires_at={self.expires_at})>"
    
    @property
    def is_expired(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫ –ª–∏ –∫–æ–¥"""
        return datetime.now(timezone.utc) > self.expires_at
    
    @property
    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–¥–∞"""
        if self.is_used:
            return False
        return datetime.now(timezone.utc) < self.expires_at


class UserSession(Base):
    """
    üé´ –¢–∞–±–ª–∏—Ü–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –°–µ—Å—Å–∏–∏ –¥–µ–π—Å—Ç–≤—É—é—Ç 12 —á–∞—Å–æ–≤
    """
    __tablename__ = "user_sessions"
    
    id = Column(Integer, primary_key=True, index=True)
    session_token = Column(String, unique=True, index=True, nullable=False)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)
    telegram_id = Column(String, nullable=False)
    
    # IP –∏ User-Agent –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    ip_address = Column(String, nullable=True)
    user_agent = Column(Text, nullable=True)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    last_activity = Column(DateTime(timezone=True), server_default=func.now())
    expires_at = Column(DateTime(timezone=True), nullable=False)
    is_active = Column(Boolean, default=True)
    
    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user = relationship("User", back_populates="sessions")
    
    def __repr__(self):
        return f"<UserSession(token={self.session_token[:8]}..., user_id={self.user_id}, expires_at={self.expires_at})>"
    
    @property
    def is_expired(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ —Å–µ—Å—Å–∏—è"""
        return datetime.now(timezone.utc) > self.expires_at
    
    @property
    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏"""
        if not self.is_active:
            return False
        return datetime.now(timezone.utc) < self.expires_at
    
    def extend_session(self, hours=12):
        """–ü—Ä–æ–¥–ª–µ–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
        self.expires_at = datetime.now(timezone.utc) + timedelta(hours=hours)
        self.last_activity = datetime.now(timezone.utc)


class AdminSession(Base):
    """–ú–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π"""
    __tablename__ = "admin_sessions"

    id = Column(Integer, primary_key=True, index=True)
    admin_token = Column(String, unique=True, index=True, nullable=False)
    ip_address = Column(String, nullable=True)
    user_agent = Column(Text, nullable=True)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    last_activity = Column(DateTime(timezone=True), server_default=func.now())
    expires_at = Column(DateTime(timezone=True), nullable=False)
    is_active = Column(Boolean, default=True)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    login_method = Column(String, default="password")  # password, emergency, etc.
    session_info = Column(Text, nullable=True)  # JSON —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

    @property
    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
        if not self.is_active:
            return False
        return datetime.now(timezone.utc) < self.expires_at
    
    @property
    def time_left_hours(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö"""
        if not self.is_valid:
            return 0
        delta = self.expires_at - datetime.now(timezone.utc)
        return delta.total_seconds() / 3600


class TelegramUserProfile(Base):
    """
    üë§ –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Telegram
    –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ
    """
    __tablename__ = "telegram_user_profiles"
    
    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(Integer, ForeignKey('users.id'), nullable=False, unique=True)
    telegram_id = Column(String, nullable=False)
    
    # –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è Telegram
    username = Column(String, nullable=True)
    first_name = Column(String, nullable=True)
    last_name = Column(String, nullable=True)
    language_code = Column(String(10), nullable=True)
    is_premium = Column(Boolean, default=False, nullable=False)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    photo_url = Column(Text, nullable=True)  # URL —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    bio = Column(Text, nullable=True)  # –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    first_seen = Column(DateTime(timezone=True), server_default=func.now())
    last_seen = Column(DateTime(timezone=True), server_default=func.now())
    total_logins = Column(Integer, default=1, nullable=False)
    
    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user = relationship("User", back_populates="telegram_profile")
    
    def __repr__(self):
        return f"<TelegramUserProfile(telegram_id={self.telegram_id}, username={self.username})>"
    
    def update_profile(self, telegram_data: dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Telegram"""
        self.username = telegram_data.get('username')
        self.first_name = telegram_data.get('first_name')
        self.last_name = telegram_data.get('last_name')
        self.language_code = telegram_data.get('language_code')
        self.is_premium = telegram_data.get('is_premium', False)
        self.last_seen = datetime.now(timezone.utc)
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤—Ö–æ–¥–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if self.total_logins is not None:
            self.total_logins += 1
        else:
            self.total_logins = 1 