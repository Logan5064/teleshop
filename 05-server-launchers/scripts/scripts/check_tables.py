#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL
"""

import asyncio
import sys
import os
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.utils.database import AsyncSessionLocal
from sqlalchemy import text

async def check_tables():
    print("üóÑÔ∏è  –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶ –í POSTGRESQL")
    print("=" * 60)
    
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        result = await session.execute(text("""
            SELECT table_name
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        """))
        
        tables = [row[0] for row in result]
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        print()
        
        for table in tables:
            print(f"üìã {table.upper()}:")
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
            result = await session.execute(text(f"""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_schema = 'public' AND table_name = '{table}'
                ORDER BY ordinal_position
            """))
            
            for row in result:
                col_name, data_type, nullable, default = row
                nullable_mark = "‚úì" if nullable == "YES" else "‚úó"
                default_str = f" DEFAULT: {default}" if default else ""
                print(f"   ‚Ä¢ {col_name} ({data_type}) - NULL: {nullable_mark}{default_str}")
            print()

async def check_needed_tables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç –ù–£–ñ–ù–´–ï –¢–ê–ë–õ–ò–¶–´ –î–õ–Ø –ü–†–û–ï–ö–¢–ê:")
    print("=" * 40)
    
    needed_tables = {
        "users": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ Telegram",
        "shops": "‚úÖ –ú–∞–≥–∞–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
        "shop_designs": "‚úÖ –î–∏–∑–∞–π–Ω—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤",
        "shop_banners": "‚úÖ –ë–∞–Ω–Ω–µ—Ä—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤",
        "shop_navigation": "‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤",
        # –¢–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã:
        "shop_categories": "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ (platform)",
        "products": "‚ùå –¢–æ–≤–∞—Ä—ã (platform)", 
        "orders": "‚ùå –ó–∞–∫–∞–∑—ã (bot_engine)",
        "analytics": "‚ùå –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ (bot_engine)"
    }
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(text("""
            SELECT table_name
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            ORDER BY table_name
        """))
        
        existing_tables = {row[0] for row in result}
        
        for table, description in needed_tables.items():
            if table in existing_tables:
                print(f"‚úÖ {table} - {description}")
            else:
                print(f"‚ùå {table} - {description}")
    
    print()
    print("üí° –í—ã–≤–æ–¥:")
    print("   –°–æ–∑–¥–∞–Ω—ã –±–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–∏–∑–∞–π–Ω–∞")
    print("   –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∑–∞–∫–∞–∑–æ–≤")

async def main():
    load_dotenv("shared/config/config.env")
    await check_tables()
    await check_needed_tables()

if __name__ == "__main__":
    asyncio.run(main()) 