import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))


# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.utils.database import AsyncSessionLocal, engine
from sqlalchemy import text

async def check_tables():
    print("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
    
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
        result = await session.execute(text("SELECT tablename FROM pg_tables WHERE schemaname = 'public';"))
        tables = result.fetchall()
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        print("\nüìã –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:")
        
        for table in tables:
            table_name = table[0]
            print(f"  ‚Ä¢ {table_name}")
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü–µ
            try:
                count_result = await session.execute(text(f"SELECT COUNT(*) FROM {table_name}"))
                count = count_result.fetchone()[0]
                print(f"    –ó–∞–ø–∏—Å–µ–π: {count}")
            except Exception as e:
                print(f"    –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞: {e}")
        
        print("\nüéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:")
        constructor_tables = [
            "users", "shops", "shop_designs", "shop_banners", 
            "shop_categories", "products", "shop_navigation", 
            "orders", "analytics"
        ]
        
        existing_tables = [t[0] for t in tables]
        
        for table in constructor_tables:
            status = "‚úÖ" if table in existing_tables else "‚ùå"
            print(f"  {status} {table}")

if __name__ == "__main__":
    asyncio.run(check_tables()) 