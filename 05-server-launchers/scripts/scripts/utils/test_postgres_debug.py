#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
"""

import asyncio
import socket
import os
from dotenv import load_dotenv

async def test_network_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
    
    host = "ladixoofilad.beget.app"
    port = 5432
    
    print(f"üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)  # 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        result = sock.connect_ex((host, port))
        sock.close()
        
        if result == 0:
            print("‚úÖ –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"‚ùå –°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (–∫–æ–¥: {result})")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

async def test_different_urls():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL"""
    
    load_dotenv("config.env")
    
    # –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL
    urls = [
        "postgresql+asyncpg://cloud_user:u61e&ke&!Ty1@ladixoofilad.beget.app:5432/default_db",
        "postgresql://cloud_user:u61e&ke&!Ty1@ladixoofilad.beget.app:5432/default_db",
        "postgresql+asyncpg://cloud_user:u61e%26ke%26%21Ty1@ladixoofilad.beget.app:5432/default_db",
    ]
    
    from sqlalchemy.ext.asyncio import create_async_engine
    from sqlalchemy import text
    
    for i, url in enumerate(urls, 1):
        print(f"\nüîÑ –¢–µ—Å—Ç {i}: {url.split('@')[0]}@***")
        
        try:
            engine = create_async_engine(url, echo=False, pool_size=1, max_overflow=0)
            
            async with engine.begin() as conn:
                result = await conn.execute(text("SELECT 1"))
                result.fetchone()
                print(f"‚úÖ URL {i} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                await engine.dispose()
                return url
                
        except Exception as e:
            print(f"‚ùå URL {i} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            try:
                await engine.dispose()
            except:
                pass
    
    return None

async def test_with_private_ip():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º IP"""
    
    print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–∏–≤–∞—Ç–Ω—ã–º IP: 10.16.0.1:5432")
    
    try:
        from sqlalchemy.ext.asyncio import create_async_engine
        from sqlalchemy import text
        
        url = "postgresql+asyncpg://cloud_user:u61e&ke&!Ty1@10.16.0.1:5432/default_db"
        engine = create_async_engine(url, echo=False, pool_size=1, max_overflow=0)
        
        async with engine.begin() as conn:
            result = await conn.execute(text("SELECT 1"))
            result.fetchone()
            print(f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π IP —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            await engine.dispose()
            return True
            
    except Exception as e:
        print(f"‚ùå –ü—Ä–∏–≤–∞—Ç–Ω—ã–π IP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        return False

async def main():
    print("üöÄ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ç—å
    network_ok = await test_network_connection()
    
    if not network_ok:
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
        print("   - –•–æ—Å—Ç–∏–Ω–≥ –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        print("   - –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—à IP –≤ whitelist")
        print("   - –ü–æ—Ä—Ç 5432 –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω firewall")
        return
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ URL
    working_url = await test_different_urls()
    
    if working_url:
        print(f"\n‚úÖ –†–∞–±–æ—á–∏–π URL –Ω–∞–π–¥–µ–Ω!")
        print(f"üîß –û–±–Ω–æ–≤–∏—Ç–µ config.env:")
        print(f"DATABASE_URL={working_url}")
        return
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π IP
    private_ok = await test_with_private_ip()
    
    if private_ok:
        print(f"\n‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π IP —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π IP –≤ config.env")
        return
    
    print("\n‚ùå –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("   1. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ö–æ—Å—Ç–∏–Ω–≥–∞")
    print("   2. –£–∑–Ω–∞–π—Ç–µ –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ –ë–î –∏–∑–≤–Ω–µ")
    print("   3. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω VPN –∏–ª–∏ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ IP")

if __name__ == "__main__":
    asyncio.run(main()) 