#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è Telegram –±–æ—Ç–æ–≤
"""

import asyncio
# Removed SQLite import - using PostgreSQL only
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'backend'))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.utils.database import engine, Base, get_database
from shared.models.shop import Shop
from sqlalchemy import text

async def update_database():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–æ—Ç–æ–≤"""
    
    print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Telegram –±–æ—Ç–æ–≤...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        async with engine.begin() as conn:
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø–æ–ª—è —É–∂–µ –µ—Å—Ç—å
            result = await conn.execute(text("PRAGMA table_info(shops)"))
            existing_columns = [row[1] for row in result.fetchall()]
            
            print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: {existing_columns}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            new_fields = [
                ("bot_webhook_url", "VARCHAR"),
                ("is_bot_active", "BOOLEAN DEFAULT 0"),
                ("bot_settings", "JSON")
            ]
            
            for field_name, field_type in new_fields:
                if field_name not in existing_columns:
                    try:
                        query = f"ALTER TABLE shops ADD COLUMN {field_name} {field_type}"
                        await conn.execute(text(query))
                        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field_name}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –ü–æ–ª–µ {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
                else:
                    print(f"‚è≠Ô∏è –ü–æ–ª–µ {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            indexes = [
                "CREATE INDEX IF NOT EXISTS idx_shops_bot_token ON shops(bot_token)",
                "CREATE INDEX IF NOT EXISTS idx_shops_bot_username ON shops(bot_username)", 
                "CREATE INDEX IF NOT EXISTS idx_shops_is_bot_active ON shops(is_bot_active)",
                "CREATE INDEX IF NOT EXISTS idx_shops_domain_slug ON shops(domain_slug)"
            ]
            
            for index_query in indexes:
                try:
                    await conn.execute(text(index_query))
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å")
                except Exception as e:
                    print(f"‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {e}")
            
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        async with engine.begin() as conn:
            result = await conn.execute(text("PRAGMA table_info(shops)"))
            final_columns = [row[1] for row in result.fetchall()]
            print(f"üìã –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã shops:")
            for col in final_columns:
                print(f"   - {col}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î: {e}")
        raise

async def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    
    print("\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        async with engine.begin() as conn:
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            user_check = await conn.execute(text("SELECT id FROM users WHERE telegram_id = 'test_user_123'"))
            if not user_check.fetchone():
                await conn.execute(text("""
                    INSERT INTO users (telegram_id, username, first_name, subscription_plan)
                    VALUES ('test_user_123', 'testuser', 'Test User', 'free')
                """))
                print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await conn.execute(text("SELECT id FROM users WHERE telegram_id = 'test_user_123'"))
            user_id = user_result.fetchone()[0]
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            shop_check = await conn.execute(text("SELECT id FROM shops WHERE user_id = ? AND name = '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω'"), (user_id,))
            if not shop_check.fetchone():
                await conn.execute(text("""
                    INSERT INTO shops (
                        user_id, name, description, currency, language,
                        is_published, is_bot_active
                    ) VALUES (?, ?, ?, ?, ?, ?, ?)
                """), (
                    user_id,
                    '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω',
                    '–ú–∞–≥–∞–∑–∏–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã',
                    'RUB',
                    'ru',
                    True,
                    False
                ))
                print("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω")
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
                shop_result = await conn.execute(text("SELECT id FROM shops WHERE user_id = ? AND name = '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω'"), (user_id,))
                shop_id = shop_result.fetchone()[0]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–ª–æ—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                test_blocks = {
                    "blocks": [
                        {
                            "id": "block_header_1",
                            "type": "header",
                            "position": 0,
                            "properties": {
                                "title": "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω",
                                "subtitle": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!",
                                "primaryColor": "#3182ce",
                                "secondaryColor": "#805ad5"
                            },
                            "created_at": "2024-01-01T00:00:00Z"
                        },
                        {
                            "id": "block_categories_1", 
                            "type": "categories",
                            "position": 1,
                            "properties": {
                                "title": "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"
                            },
                            "created_at": "2024-01-01T00:00:00Z"
                        },
                        {
                            "id": "block_products_1",
                            "type": "products", 
                            "position": 2,
                            "properties": {
                                "title": "–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã",
                                "columns": 2
                            },
                            "created_at": "2024-01-01T00:00:00Z"
                        }
                    ],
                    "menu": {
                        "style": "modern",
                        "buttons": ["home", "catalog", "cart", "profile"],
                        "color": "#ffffff",
                        "activeColor": "#3182ce"
                    },
                    "updated_at": "2024-01-01T00:00:00Z"
                }
                
                import json
                await conn.execute(text("""
                    UPDATE shops SET blocks_structure = ? WHERE id = ?
                """), (json.dumps(test_blocks), shop_id))
                
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –±–ª–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
            
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã!")
        print(f"üîó –¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω: http://localhost:8000/shop/1")
        print(f"üîó –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: http://localhost:8000/block-constructor/1")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    await update_database()
    await create_test_data()
    
    print("\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python -m uvicorn app.main:app --reload")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä: http://localhost:8000/block-constructor/1")
    print("3. –°–æ–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: http://localhost:8000/shop/1")

if __name__ == "__main__":
    asyncio.run(main()) 