#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—Ç Beget
"""

import asyncio
import psycopg2
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text
from dotenv import load_dotenv
import os

# –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Beget
DB_CONFIGS = {
    "external": {
        "host": "ladixoofilad.beget.app",
        "port": 5432,
        "database": "default_db", 
        "user": "cloud_user",
        "password": "u61e&ke&!Ty1"
    },
    "private": {
        "host": "10.16.0.1",
        "port": 5432,
        "database": "default_db", 
        "user": "cloud_user",
        "password": "u61e&ke&!Ty1"
    }
}

async def test_async_connection():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ SQLAlchemy"""
    print("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è asyncpg
    db_url = f"postgresql+asyncpg://{DB_CONFIGS['external']['user']}:{DB_CONFIGS['external']['password']}@{DB_CONFIGS['external']['host']}:{DB_CONFIGS['external']['port']}/{DB_CONFIGS['external']['database']}"
    
    try:
        engine = create_async_engine(db_url, echo=False)
        
        async with engine.begin() as conn:
            result = await conn.execute(text("SELECT version()"))
            version = result.fetchone()
            print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìã –í–µ—Ä—Å–∏—è PostgreSQL: {version[0]}")
            
        await engine.dispose()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_sync_connection():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ psycopg2"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    
    try:
        conn = psycopg2.connect(
            host=DB_CONFIGS["external"]["host"],
            port=DB_CONFIGS["external"]["port"],
            database=DB_CONFIGS["external"]["database"],
            user=DB_CONFIGS["external"]["user"],
            password=DB_CONFIGS["external"]["password"]
        )
        
        cursor = conn.cursor()
        cursor.execute("SELECT version()")
        version = cursor.fetchone()
        
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìã –í–µ—Ä—Å–∏—è PostgreSQL: {version[0]}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

async def test_private_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π IP"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π IP...")
    
    db_url = f"postgresql+asyncpg://{DB_CONFIGS['private']['user']}:{DB_CONFIGS['private']['password']}@{DB_CONFIGS['private']['host']}:{DB_CONFIGS['private']['port']}/{DB_CONFIGS['private']['database']}"
    
    try:
        engine = create_async_engine(db_url, echo=False)
        
        async with engine.begin() as conn:
            result = await conn.execute(text("SELECT version()"))
            version = result.fetchone()
            print(f"‚úÖ –ü—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìã –í–µ—Ä—Å–∏—è PostgreSQL: {version[0]}")
            
        await engine.dispose()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_private_sync_connection():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π IP"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π IP...")
    
    try:
        conn = psycopg2.connect(
            host=DB_CONFIGS["private"]["host"],
            port=DB_CONFIGS["private"]["port"],
            database=DB_CONFIGS["private"]["database"],
            user=DB_CONFIGS["private"]["user"],
            password=DB_CONFIGS["private"]["password"]
        )
        
        cursor = conn.cursor()
        cursor.execute("SELECT version()")
        version = cursor.fetchone()
        
        print(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìã –í–µ—Ä—Å–∏—è PostgreSQL: {version[0]}")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

async def test_database_operations(config_name="external"):
    """–¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î"""
    print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î ({config_name})...")
    
    config = DB_CONFIGS[config_name]
    db_url = f"postgresql+asyncpg://{config['user']}:{config['password']}@{config['host']}:{config['port']}/{config['database']}"
    
    try:
        engine = create_async_engine(db_url, echo=False)
        
        async with engine.begin() as conn:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            await conn.execute(text("""
                CREATE TABLE IF NOT EXISTS test_table (
                    id SERIAL PRIMARY KEY,
                    name VARCHAR(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """))
            
            # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            await conn.execute(text("""
                INSERT INTO test_table (name) VALUES ('Test Connection')
                ON CONFLICT DO NOTHING
            """))
            
            # –¢–µ—Å—Ç –≤—ã–±–æ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            result = await conn.execute(text("SELECT COUNT(*) FROM test_table"))
            count = result.fetchone()
            
            print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î —É—Å–ø–µ—à–Ω—ã!")
            print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ: {count[0]}")
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
            await conn.execute(text("DROP TABLE IF EXISTS test_table"))
            
        await engine.dispose()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î: {e}")
        return False

async def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (Beget)")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("üìã –í–ù–ï–®–ù–ò–ô –•–û–°–¢:")
    print(f"   üåê Host: {DB_CONFIGS['external']['host']}")
    print(f"   üîå Port: {DB_CONFIGS['external']['port']}")
    print(f"   üóÑÔ∏è  Database: {DB_CONFIGS['external']['database']}")
    print(f"   üë§ User: {DB_CONFIGS['external']['user']}")
    
    print("\nüìã –ü–†–ò–í–ê–¢–ù–´–ô IP:")
    print(f"   üåê Host: {DB_CONFIGS['private']['host']}")
    print(f"   üîå Port: {DB_CONFIGS['private']['port']}")
    print(f"   üóÑÔ∏è  Database: {DB_CONFIGS['private']['database']}")
    print(f"   üë§ User: {DB_CONFIGS['private']['user']}")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\nüî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ù–ï–®–ù–ï–ì–û –•–û–°–¢–ê:")
    external_sync_ok = test_sync_connection()
    external_async_ok = await test_async_connection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\nüî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ò–í–ê–¢–ù–û–ì–û IP:")
    private_sync_ok = test_private_sync_connection()
    private_async_ok = await test_private_connection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î –Ω–∞ —Ä–∞–±–æ—á–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    ops_ok = False
    working_config = None
    
    if external_async_ok:
        ops_ok = await test_database_operations("external")
        working_config = "external"
    elif private_async_ok:
        ops_ok = await test_database_operations("private")
        working_config = "private"
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("\nüåê –í–ù–ï–®–ù–ò–ô –•–û–°–¢:")
    print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if external_sync_ok else '‚ùå'}")
    print(f"   –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if external_async_ok else '‚ùå'}")
    
    print("\nüè† –ü–†–ò–í–ê–¢–ù–´–ô IP:")
    print(f"   –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if private_sync_ok else '‚ùå'}")
    print(f"   –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if private_async_ok else '‚ùå'}")
    
    print(f"\nüõ†Ô∏è  –û–ü–ï–†–ê–¶–ò–ò –° –ë–î: {'‚úÖ' if ops_ok else '‚ùå'}")
    
    if working_config:
        print(f"\nüéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ {working_config.upper()}!")
        print("üí° –ú–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å config.env —Å —Ä–∞–±–æ—á–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π DATABASE_URL
        config = DB_CONFIGS[working_config]
        correct_url = f"postgresql+asyncpg://{config['user']}:{config['password']}@{config['host']}:{config['port']}/{config['database']}"
        print(f"\nüîß –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π DATABASE_URL –¥–ª—è config.env:")
        print(f"DATABASE_URL={correct_url}")
        
    else:
        print("\n‚ùå –ù–ò –û–î–ù–û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –°–µ—Ä–≤–µ—Ä PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        print("   - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ firewall")
        print("   - –ù—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞ Beget")

if __name__ == "__main__":
    asyncio.run(main()) 