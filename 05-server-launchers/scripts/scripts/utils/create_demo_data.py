import asyncio
import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –ø–∞–ø–∫–µ  
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', 'backend'))


# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.utils.database import AsyncSessionLocal
from shared.models.user import User
from shared.models.shop import Shop

async def create_demo_data():
    print("üéØ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞...")
    
    async with AsyncSessionLocal() as session:
        try:
            # 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                telegram_id="123456789",
                username="demo_user",
                first_name="–î–µ–º–æ",
                last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                subscription_plan="pro"
            )
            session.add(user)
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
            # 2. –°–æ–∑–¥–∞–µ–º –º–∞–≥–∞–∑–∏–Ω —Å –±–ª–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
            demo_blocks_structure = {
                "blocks": [
                    {
                        "id": "header_1",
                        "type": "header",
                        "order": 0,
                        "data": {
                            "title": "Tamas Living",
                            "subtitle": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞",
                            "backgroundColor": "#2c3e50",
                            "textColor": "#ffffff"
                        }
                    },
                    {
                        "id": "products_1",
                        "type": "products", 
                        "order": 1,
                        "data": {
                            "title": "–ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã",
                            "layout": "grid",
                            "columns": 2
                        }
                    }
                ]
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ environment variables
            demo_bot_token = os.getenv("DEMO_BOT_TOKEN", "DEMO-TOKEN-CHANGE-ME")
            
            shop = Shop(
                user_id=user.id,
                name="Tamas Living - –ú–µ–±–µ–ª—å",
                description="–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ–±–µ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –¥–æ–º–∞",
                bot_token=demo_bot_token,
                bot_username="teleshop_constructor_bot",
                domain_slug="tamas-living",
                is_published=True,
                is_bot_active=True,
                blocks_structure=demo_blocks_structure
            )
            session.add(shop)
            await session.flush()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()
            
            print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name}")
            print(f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {shop.name}")
            print(f"ü§ñ –ë–æ—Ç —Ç–æ–∫–µ–Ω: {shop.bot_token}")
            print(f"üé® –ë–ª–æ—á–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(demo_blocks_structure['blocks'])} –±–ª–æ–∫–æ–≤")
            
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

if __name__ == "__main__":
    asyncio.run(create_demo_data()) 