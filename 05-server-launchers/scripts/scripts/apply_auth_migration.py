#!/usr/bin/env python3
"""
üóÑÔ∏è –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã: auth_codes, user_sessions, telegram_user_profiles
"""

import asyncio
import os
import sys
from sqlalchemy import text

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.utils.database import engine, AsyncSessionLocal
from shared.models.auth_models import AuthCode, UserSession, TelegramUserProfile
from shared.utils.database import Base

async def create_auth_tables():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ SQLAlchemy
        async with engine.begin() as conn:
            # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            await conn.run_sync(Base.metadata.create_all, tables=[
                AuthCode.__table__,
                UserSession.__table__, 
                TelegramUserProfile.__table__
            ])
        
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã
        await check_tables()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
        return False
    
    return True

async def check_tables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü"""
    print("\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
    
    async with AsyncSessionLocal() as db:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º auth_codes
            result = await db.execute(text("""
                SELECT table_name, column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'auth_codes'
                ORDER BY ordinal_position
            """))
            auth_codes_columns = result.fetchall()
            
            if auth_codes_columns:
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ auth_codes:")
                for row in auth_codes_columns:
                    print(f"   ‚Ä¢ {row.column_name} ({row.data_type})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º user_sessions
            result = await db.execute(text("""
                SELECT table_name, column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'user_sessions'
                ORDER BY ordinal_position
            """))
            sessions_columns = result.fetchall()
            
            if sessions_columns:
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_sessions:")
                for row in sessions_columns:
                    print(f"   ‚Ä¢ {row.column_name} ({row.data_type})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º telegram_user_profiles
            result = await db.execute(text("""
                SELECT table_name, column_name, data_type 
                FROM information_schema.columns 
                WHERE table_name = 'telegram_user_profiles'
                ORDER BY ordinal_position
            """))
            profiles_columns = result.fetchall()
            
            if profiles_columns:
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ telegram_user_profiles:")
                for row in profiles_columns:
                    print(f"   ‚Ä¢ {row.column_name} ({row.data_type})")
            
            print(f"\nüéØ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len([auth_codes_columns, sessions_columns, profiles_columns])}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü: {e}")

async def test_auth_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    try:
        from shared.auth.db_code_auth import DatabaseCodeAuth
        
        async with AsyncSessionLocal() as db:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞
            test_telegram_id = "123456789"
            test_data = {
                'username': 'test_user',
                'first_name': 'Test',
                'last_name': 'User'
            }
            
            code = await DatabaseCodeAuth.create_temp_code(test_telegram_id, test_data, db)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–¥: {code}")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞
            session_token = await DatabaseCodeAuth.verify_code_and_create_session(
                code, db, ip_address="127.0.0.1", user_agent="Test"
            )
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {session_token[:16]}...")
            
            # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏
            session_data = await DatabaseCodeAuth.verify_session(session_token, db)
            if session_data:
                print(f"‚úÖ –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {session_data['telegram_id']}")
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await DatabaseCodeAuth.logout_session(session_token, db)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ TeleShop Constructor")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    success = await create_auth_tables()
    
    if success:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        await test_auth_system()
        
        print("\n" + "=" * 60)
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
        print("üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ shared/config/auth_config.env")
        print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main_secure.py")
        print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python auth_bot.py")
        print("   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
        print("=" * 60)
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 