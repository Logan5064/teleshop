import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import subprocess
import threading
import re
import os
import sys
from datetime import datetime

class AdvancedTeleShopGUI:
    def __init__(self, root):
        self.root = root
        self.root.title('TeleShop Advanced Manager v2.0')
        self.root.geometry('950x750')
        self.root.configure(bg='#2d2d30')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.processes = {}
        self.tunnel_url = None
        self.tunnel_process = None
        
        self.setup_ui()
        self.log("üöÄ TeleShop Advanced Manager v2.0 –∑–∞–ø—É—â–µ–Ω!")
        self.log(f"üìÅ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {os.getcwd()}")
        self.log(f"üêç Python: {sys.version.split()[0]}")
        
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, bg='#2d2d30')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(
            main_frame, 
            text='üöÄ TeleShop Advanced Manager v2.0', 
            font=('Arial', 18, 'bold'),
            fg='#4CAF50', 
            bg='#2d2d30'
        )
        title_label.pack(pady=(0, 20))
        
        # –§—Ä–µ–π–º –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∏ URL
        status_frame = tk.LabelFrame(
            main_frame, 
            text="üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", 
            font=('Arial', 12, 'bold'),
            fg='white', 
            bg='#2d2d30'
        )
        status_frame.pack(fill=tk.X, pady=(0, 10))
        
        # URL —Ç—É–Ω–Ω–µ–ª—è
        url_frame = tk.Frame(status_frame, bg='#2d2d30')
        url_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(url_frame, text='üåê –ü—É–±–ª–∏—á–Ω—ã–π URL:', 
                font=('Arial', 10, 'bold'), fg='#2196F3', bg='#2d2d30').pack(side=tk.LEFT)
        
        self.url_var = tk.StringVar(value="–¢—É–Ω–Ω–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω")
        self.url_entry = tk.Entry(
            url_frame, 
            textvariable=self.url_var, 
            font=('Arial', 10),
            state='readonly', 
            bg='#3c3c3c', 
            fg='#4CAF50',
            width=60
        )
        self.url_entry.pack(side=tk.LEFT, padx=(10, 5), fill=tk.X, expand=True)
        
        self.copy_btn = tk.Button(
            url_frame, 
            text='üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 
            command=self.copy_url,
            bg='#2196F3', 
            fg='white', 
            state='disabled'
        )
        self.copy_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        # –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä URL
        constructor_frame = tk.Frame(status_frame, bg='#2d2d30')
        constructor_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Label(constructor_frame, text='üé® URL –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞:', 
                font=('Arial', 10, 'bold'), fg='#FF9800', bg='#2d2d30').pack(side=tk.LEFT)
        
        self.constructor_url_var = tk.StringVar(value="localhost:3001")
        self.constructor_url_entry = tk.Entry(
            constructor_frame, 
            textvariable=self.constructor_url_var, 
            font=('Arial', 10),
            state='readonly', 
            bg='#3c3c3c', 
            fg='#FF9800',
            width=60
        )
        self.constructor_url_entry.pack(side=tk.LEFT, padx=(10, 5), fill=tk.X, expand=True)
        
        self.copy_constructor_btn = tk.Button(
            constructor_frame, 
            text='üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 
            command=self.copy_constructor_url,
            bg='#FF9800', 
            fg='white', 
            state='normal'
        )
        self.copy_constructor_btn.pack(side=tk.RIGHT, padx=(5, 0))
        
        # –°—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components_frame = tk.Frame(status_frame, bg='#2d2d30')
        components_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.status_labels = {}
        components = [
            ('ü§ñ Auth Bot', 'auth_bot'),
            ('‚öôÔ∏è Backend API', 'backend'),
            ('üåê Frontend', 'frontend'),
            ('üé® Constructor', 'constructor'),
            ('üöÄ –¢—É–Ω–Ω–µ–ª—å', 'tunnel')
        ]
        
        for i, (text, key) in enumerate(components):
            frame = tk.Frame(components_frame, bg='#2d2d30')
            frame.pack(side=tk.LEFT, padx=(0, 15))
            
            tk.Label(frame, text=text, font=('Arial', 9), 
                    fg='white', bg='#2d2d30').pack()
            
            status_label = tk.Label(frame, text='‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 
                                  font=('Arial', 8), fg='#f44336', bg='#2d2d30')
            status_label.pack()
            self.status_labels[key] = status_label
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.LabelFrame(
            main_frame, 
            text="üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏", 
            font=('Arial', 12, 'bold'),
            fg='white', 
            bg='#2d2d30'
        )
        buttons_frame.pack(fill=tk.X, pady=(0, 10))
        
        # –†—è–¥ 1 - –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        row1 = tk.Frame(buttons_frame, bg='#2d2d30')
        row1.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(row1, text='ü§ñ Auth Bot', command=self.start_auth_bot,
                bg='#FF9800', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=(0, 5))
        
        tk.Button(row1, text='‚öôÔ∏è Backend API', command=self.start_backend,
                bg='#9C27B0', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=5)
        
        tk.Button(row1, text='üåê Frontend', command=self.start_frontend,
                bg='#2196F3', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=5)
        
        # –†—è–¥ 2 - –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ —Ç—É–Ω–Ω–µ–ª—å
        row2 = tk.Frame(buttons_frame, bg='#2d2d30')
        row2.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(row2, text='üé® Constructor', command=self.start_constructor,
                bg='#FF5722', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=(0, 5))
        
        tk.Button(row2, text='üöÄ –°–æ–∑–¥–∞—Ç—å —Ç—É–Ω–Ω–µ–ª—å', command=self.create_tunnel,
                bg='#4CAF50', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=5)
        
        tk.Button(row2, text='üåê –û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥', command=self.open_dashboard,
                bg='#2196F3', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=5)
        
        # –†—è–¥ 3 - –£—Ç–∏–ª–∏—Ç—ã
        row3 = tk.Frame(buttons_frame, bg='#2d2d30')
        row3.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(row3, text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', command=self.refresh_status,
                bg='#607D8B', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=(0, 5))
        
        tk.Button(row3, text='üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏', command=self.clear_logs,
                bg='#795548', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=5)
        
        tk.Button(row3, text='üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à', command=self.clear_next_cache,
                bg='#FF5722', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=5)
        
        tk.Button(row3, text='üåç –û—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', command=self.open_constructor,
                bg='#795548', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=5)
        
        tk.Button(row3, text='üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ', command=self.start_all_components,
                bg='#8BC34A', fg='white', font=('Arial', 10), width=15).pack(side=tk.LEFT, padx=5)
        
        # –õ–æ–≥–∏
        logs_frame = tk.LabelFrame(
            main_frame, 
            text="üìù –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", 
            font=('Arial', 12, 'bold'),
            fg='white', 
            bg='#2d2d30'
        )
        logs_frame.pack(fill=tk.BOTH, expand=True)
        
        self.log_text = scrolledtext.ScrolledText(
            logs_frame,
            height=20,
            bg='#1e1e1e',
            fg='#ffffff',
            font=('Consolas', 9),
            wrap=tk.WORD
        )
        self.log_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ - –û–¢–ö–õ–Æ–ß–ï–ù–û
        self.refresh_status()
    
    def log(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_text.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_text.see(tk.END)
        print(f"[{timestamp}] {message}")  # –î—É–±–ª–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    
    def clear_logs(self):
        self.log_text.delete(1.0, tk.END)
        self.log("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def copy_url(self):
        if self.tunnel_url:
            self.root.clipboard_clear()
            self.root.clipboard_append(self.tunnel_url)
            self.log(f"üìã URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {self.tunnel_url}")
            messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", "URL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
    
    def copy_constructor_url(self):
        constructor_url = "http://localhost:3001"
        self.root.clipboard_clear()
        self.root.clipboard_append(constructor_url)
        self.log(f"üìã URL –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {constructor_url}")
        messagebox.showinfo("‚úÖ –£—Å–ø–µ—Ö", "URL –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!")
    
    def update_status(self, component, status, color='#4CAF50'):
        if component in self.status_labels:
            self.status_labels[component].config(text=status, fg=color)
    
    def refresh_status(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # Auth Bot
            if self.is_process_running('auth-bot', 'simple_auth_bot.py'):
                self.update_status('auth_bot', '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç', '#4CAF50')
            else:
                self.update_status('auth_bot', '‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', '#f44336')
            
            # Backend API
            if self.is_port_listening(8000):
                self.update_status('backend', '‚úÖ –ü–æ—Ä—Ç 8000', '#4CAF50')
            else:
                self.update_status('backend', '‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', '#f44336')
            
            # Frontend
            if self.is_port_listening(3000):
                self.update_status('frontend', '‚úÖ –ü–æ—Ä—Ç 3000', '#4CAF50')
            else:
                self.update_status('frontend', '‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', '#f44336')
            
            # Constructor
            if self.is_port_listening(3001):
                self.update_status('constructor', '‚úÖ –ü–æ—Ä—Ç 3001', '#4CAF50')
            else:
                self.update_status('constructor', '‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', '#f44336')
            
            # –¢—É–Ω–Ω–µ–ª—å
            if self.tunnel_process and self.tunnel_process.poll() is None:
                self.update_status('tunnel', '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω', '#4CAF50')
            else:
                self.update_status('tunnel', '‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', '#f44336')
                
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def is_port_listening(self, port):
        try:
            result = subprocess.run(['netstat', '-an'], capture_output=True, text=True)
            return f":{port}" in result.stdout and "LISTENING" in result.stdout
        except:
            return False
    
    def is_process_running(self, cwd_contains, script_name):
        try:
            result = subprocess.run(['tasklist', '/V'], capture_output=True, text=True)
            return script_name in result.stdout
        except:
            return False
    
    def start_auth_bot(self):
        self.log("ü§ñ === –ó–ê–ü–£–°–ö AUTH BOT ===")
        if not os.path.exists('auth-bot/simple_auth_bot.py'):
            self.log("‚ùå –§–∞–π–ª auth-bot/simple_auth_bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        try:
            process = subprocess.Popen(
                ['python', 'simple_auth_bot.py'], 
                cwd='auth-bot',
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
            self.processes['auth_bot'] = process
            self.log(f"‚úÖ Auth Bot –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            self.update_status('auth_bot', '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç', '#4CAF50')
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Auth Bot: {e}")
    
    def start_backend(self):
        self.log("‚öôÔ∏è === –ó–ê–ü–£–°–ö BACKEND API ===")
        if not os.path.exists('05-server-launchers/main/main_secure_fixed.py'):
            self.log("‚ùå –§–∞–π–ª main_secure_fixed.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        try:
            process = subprocess.Popen(
                ['python', 'main_secure_fixed.py'],
                cwd='05-server-launchers/main',
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
            self.processes['backend'] = process
            self.log(f"‚úÖ Backend API –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            self.update_status('backend', '‚úÖ –ü–æ—Ä—Ç 8000', '#4CAF50')
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Backend: {e}")
    
    def start_frontend(self):
        self.log("üåê === –ó–ê–ü–£–°–ö FRONTEND ===")
        if not os.path.exists('01-user-dashboard/package.json'):
            self.log("‚ùå –§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        try:
            process = subprocess.Popen(
                ['npm', 'run', 'dev'],
                cwd='01-user-dashboard',
                creationflags=subprocess.CREATE_NEW_CONSOLE,
                shell=True
            )
            self.processes['frontend'] = process
            self.log(f"‚úÖ Frontend –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
            self.update_status('frontend', '‚úÖ –ü–æ—Ä—Ç 3000', '#4CAF50')
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Frontend: {e}")
    
    def start_constructor(self):
        self.log("üé® === –ó–ê–ü–£–°–ö CONSTRUCTOR ===")
        if not os.path.exists('offconstryktor/package.json'):
            self.log("‚ùå –§–∞–π–ª offconstryktor/package.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        try:
            process = subprocess.Popen(
                ['npm', 'run', 'dev'],
                cwd='offconstryktor',
                creationflags=subprocess.CREATE_NEW_CONSOLE,
                shell=True
            )
            self.processes['constructor'] = process
            self.log(f"‚úÖ Constructor –∑–∞–ø—É—â–µ–Ω (PID: {process.pid}) –Ω–∞ –ø–æ—Ä—Ç—É 3001")
            self.update_status('constructor', '‚úÖ –ü–æ—Ä—Ç 3001', '#4CAF50')
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Constructor: {e}")
    
    def create_tunnel(self):
        if self.tunnel_process and self.tunnel_process.poll() is None:
            self.log("‚ö†Ô∏è –¢—É–Ω–Ω–µ–ª—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
            return
        
        self.log("üöÄ === –°–û–ó–î–ê–ù–ò–ï –¢–£–ù–ù–ï–õ–Ø –î–õ–Ø –ü–û–†–¢–ê 3000 ===")
        self.update_status('tunnel', 'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ...', '#FF9800')
        
        def tunnel_thread():
            try:
                self.tunnel_process = subprocess.Popen(
                    ['npx', 'localtunnel', '--port', '3000'],
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    text=True,
                    shell=True
                )
                
                # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ —Ç—É–Ω–Ω–µ–ª—è
                while True:
                    line = self.tunnel_process.stdout.readline()
                    if not line:
                        break
                    
                    self.root.after(0, lambda l=line: self.log(f"üì° Tunnel: {l.strip()}"))
                    
                    # –ò—â–µ–º URL
                    match = re.search(r'your url is: (https://[^\s]+)', line)
                    if match:
                        url = match.group(1)
                        self.tunnel_url = url
                        self.root.after(0, lambda: self.tunnel_created(url))
                        break
                        
            except Exception as e:
                self.root.after(0, lambda: self.tunnel_error(str(e)))
        
        threading.Thread(target=tunnel_thread, daemon=True).start()
    
    def tunnel_created(self, url):
        self.log(f"üéâ –¢—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω: {url}")
        self.log(f"üé® –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: localhost:3001")
        
        self.url_var.set(url)
        self.constructor_url_var.set("localhost:3001")
        
        self.copy_btn.config(state='normal')
        
        self.update_status('tunnel', '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω', '#4CAF50')
        
        messagebox.showinfo("üéâ –¢—É–Ω–Ω–µ–ª—å –≥–æ—Ç–æ–≤!", 
                           f"–î–∞—à–±–æ—Ä–¥:\n{url}\n\n–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä:\nlocalhost:3001")
    
    def tunnel_error(self, error):
        self.log(f"‚ùå –û—à–∏–±–∫–∞ —Ç—É–Ω–Ω–µ–ª—è: {error}")
        self.update_status('tunnel', '‚ùå –û—à–∏–±–∫–∞', '#f44336')
        self.tunnel_process = None
    
    def open_dashboard(self):
        if self.tunnel_url:
            self.log(f"üåê –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∞—à–±–æ—Ä–¥–∞: {self.tunnel_url}")
            try:
                import webbrowser
                webbrowser.open(self.tunnel_url)
            except:
                subprocess.run(['start', self.tunnel_url], shell=True)
        else:
            self.log("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—É–Ω–Ω–µ–ª—å!")
            messagebox.showwarning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —Ç—É–Ω–Ω–µ–ª—å!")
    
    def open_constructor(self):
        constructor_url = "http://localhost:3001"
        self.log(f"üåç –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞: {constructor_url}")
        try:
            import webbrowser
            webbrowser.open(constructor_url)
        except:
            subprocess.run(['start', constructor_url], shell=True)
    
    def clear_next_cache(self):
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à Next.js –∏–∑ –æ–±–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        self.log("üóëÔ∏è === –û–ß–ò–°–¢–ö–ê –ö–≠–®–ê NEXT.JS ===")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã
            self.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
            result = subprocess.run(['taskkill', '/F', '/IM', 'node.exe'], 
                                   capture_output=True, text=True)
            if "–£—Å–ø–µ—à–Ω–æ" in result.stdout:
                self.log("‚úÖ Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                self.log("‚ö†Ô∏è Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à Frontend
            frontend_cache = "01-user-dashboard\\.next"
            if os.path.exists(frontend_cache):
                subprocess.run(['Remove-Item', '-Recurse', '-Force', frontend_cache], 
                              shell=True, capture_output=True)
                self.log("üßπ –ö—ç—à Frontend –æ—á–∏—â–µ–Ω")
            else:
                self.log("üí° –ö—ç—à Frontend —É–∂–µ —á–∏—Å—Ç")
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à Constructor
            constructor_cache = "offconstryktor\\.next"
            if os.path.exists(constructor_cache):
                subprocess.run(['Remove-Item', '-Recurse', '-Force', constructor_cache], 
                              shell=True, capture_output=True)
                self.log("üßπ –ö—ç—à Constructor –æ—á–∏—â–µ–Ω")
            else:
                self.log("üí° –ö—ç—à Constructor —É–∂–µ —á–∏—Å—Ç")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
            self.update_status('frontend', '‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', '#f44336')
            self.update_status('constructor', '‚≠ï –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', '#f44336')
            
            self.log("‚úÖ –ö—ç—à Next.js –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω!")
            self.log("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å Frontend –∏ Constructor")
            
            messagebox.showinfo("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω!", 
                               "–ö—ç—à Next.js –æ—á–∏—â–µ–Ω!\n\n–¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ:\n‚Ä¢ üåê Frontend\n‚Ä¢ üé® Constructor")
                               
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}")
            messagebox.showerror("‚ùå –û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à:\n{e}")
    
    def start_all_components(self):
        self.log("üöÄ === –ó–ê–ü–£–°–ö –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
        def start_sequence():
            self.start_auth_bot()
            self.root.after(2000, self.start_backend)
            self.root.after(4000, self.start_frontend)
            self.root.after(6000, self.start_constructor)
            self.root.after(8000, lambda: self.log("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã! –°–æ–∑–¥–∞–π—Ç–µ —Ç—É–Ω–Ω–µ–ª–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞."))
        
        start_sequence()

if __name__ == '__main__':
    root = tk.Tk()
    app = AdvancedTeleShopGUI(root)
    root.mainloop() 