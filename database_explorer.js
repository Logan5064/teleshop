const { Pool } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
const pool = new Pool({
  host: 'ladixoofilad.beget.app',
  port: 5432,
  database: 'default_db',
  user: 'cloud_user',
  password: 'u61e&ke&!Ty1',
  ssl: false,
});

async function exploreDatabase() {
  try {
    console.log('üîç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const testResult = await pool.query('SELECT NOW()');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!', testResult.rows[0]);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
    const tablesResult = await pool.query(`
      SELECT 
        schemaname,
        tablename,
        tableowner
      FROM pg_catalog.pg_tables 
      WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
      ORDER BY schemaname, tablename;
    `);
    
    console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tablesResult.rows.length}`);
    console.log('=' .repeat(80));
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–∞–±–ª–∏—Ü—É
    for (const table of tablesResult.rows) {
      console.log(`\nüìä –¢–ê–ë–õ–ò–¶–ê: ${table.tablename}`);
      console.log('-'.repeat(50));
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        const structureResult = await pool.query(`
          SELECT 
            column_name,
            data_type,
            is_nullable,
            column_default,
            character_maximum_length
          FROM information_schema.columns 
          WHERE table_name = $1
          ORDER BY ordinal_position;
        `, [table.tablename]);
        
        console.log('üìù –°—Ç—Ä—É–∫—Ç—É—Ä–∞:');
        structureResult.rows.forEach(col => {
          const nullable = col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL';
          const length = col.character_maximum_length ? `(${col.character_maximum_length})` : '';
          console.log(`  - ${col.column_name}: ${col.data_type}${length} ${nullable}`);
        });
        
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const countResult = await pool.query(`SELECT COUNT(*) as count FROM ${table.tablename}`);
        console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${countResult.rows[0].count}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏)
        if (parseInt(countResult.rows[0].count) > 0) {
          const sampleResult = await pool.query(`SELECT * FROM ${table.tablename} LIMIT 3`);
          console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:');
          sampleResult.rows.forEach((row, index) => {
            console.log(`  –ó–∞–ø–∏—Å—å ${index + 1}:`, JSON.stringify(row, null, 2));
          });
        } else {
          console.log('üìã –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è');
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–∞–±–ª–∏—Ü—ã ${table.tablename}:`, error.message);
      }
    }
    
    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
  } finally {
    await pool.end();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
exploreDatabase(); 