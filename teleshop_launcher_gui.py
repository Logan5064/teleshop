#!/usr/bin/env python3
"""
üöÄ TeleShop Launcher GUI
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import subprocess
import threading
import os
import sys
import time
import requests
from pathlib import Path

class TeleShopLauncher:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ TeleShop Constructor Launcher")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # –ü—Ä–æ—Ü–µ—Å—Å—ã
        self.processes = {
            'frontend': None,
            'backend': None,
            'auth_bot': None
        }
        
        # –°—Ç–∞—Ç—É—Å—ã
        self.statuses = {
            'frontend': tk.StringVar(value="üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"),
            'backend': tk.StringVar(value="üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"),
            'auth_bot': tk.StringVar(value="üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        }
        
        self.setup_ui()
        self.check_statuses()
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root)
        title_frame.pack(pady=10)
        
        title = tk.Label(title_frame, text="üöÄ TeleShop Constructor Launcher", 
                        font=("Arial", 16, "bold"))
        title.pack()
        
        subtitle = tk.Label(title_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã", 
                           font=("Arial", 10))
        subtitle.pack()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        main_frame = tk.Frame(self.root)
        main_frame.pack(expand=True, fill='both', padx=20, pady=10)
        
        # –§—Ä–æ–Ω—Ç–µ–Ω–¥
        self.create_service_frame(main_frame, "Frontend (Next.js)", 'frontend', 0)
        
        # –ë—ç–∫–µ–Ω–¥
        self.create_service_frame(main_frame, "Backend API + BotManager", 'backend', 1)
        
        # –ë–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.create_service_frame(main_frame, "Auth Bot", 'auth_bot', 2)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏
        control_frame = tk.Frame(main_frame)
        control_frame.grid(row=3, column=0, columnspan=3, pady=20)
        
        start_all_btn = tk.Button(control_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—ë", 
                                 command=self.start_all, bg="#4CAF50", fg="white",
                                 font=("Arial", 12, "bold"), padx=20)
        start_all_btn.pack(side='left', padx=10)
        
        stop_all_btn = tk.Button(control_frame, text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—ë", 
                                command=self.stop_all, bg="#f44336", fg="white",
                                font=("Arial", 12, "bold"), padx=20)
        stop_all_btn.pack(side='left', padx=10)
        
        # –õ–æ–≥
        log_frame = tk.LabelFrame(main_frame, text="üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", font=("Arial", 10, "bold"))
        log_frame.grid(row=4, column=0, columnspan=3, sticky='ew', pady=(20, 0))
        
        self.log_text = scrolledtext.ScrolledText(log_frame, height=8, width=90)
        self.log_text.pack(expand=True, fill='both', padx=10, pady=10)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        status_frame = tk.Frame(self.root)
        status_frame.pack(side='bottom', fill='x')
        
        self.status_bar = tk.Label(status_frame, text="–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É", 
                                  relief='sunken', anchor='w')
        self.status_bar.pack(side='bottom', fill='x')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        main_frame.grid_columnconfigure(0, weight=1)
        main_frame.grid_columnconfigure(1, weight=1)
        main_frame.grid_columnconfigure(2, weight=1)
    
    def create_service_frame(self, parent, title, service_key, row):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞"""
        frame = tk.LabelFrame(parent, text=title, font=("Arial", 10, "bold"))
        frame.grid(row=row, column=0, columnspan=3, sticky='ew', pady=5)
        
        # –°—Ç–∞—Ç—É—Å
        status_label = tk.Label(frame, textvariable=self.statuses[service_key], 
                               font=("Arial", 11))
        status_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(frame)
        button_frame.pack(pady=5)
        
        start_btn = tk.Button(button_frame, text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å", 
                             command=lambda: self.start_service(service_key),
                             bg="#4CAF50", fg="white", padx=10)
        start_btn.pack(side='left', padx=5)
        
        stop_btn = tk.Button(button_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                            command=lambda: self.stop_service(service_key),
                            bg="#f44336", fg="white", padx=10)
        stop_btn.pack(side='left', padx=5)
        
        if service_key == 'frontend':
            open_btn = tk.Button(button_frame, text="üåê –û—Ç–∫—Ä—ã—Ç—å", 
                                command=lambda: self.open_url("http://localhost:3000"),
                                bg="#2196F3", fg="white", padx=10)
            open_btn.pack(side='left', padx=5)
        elif service_key == 'backend':
            open_btn = tk.Button(button_frame, text="üìñ API Docs", 
                                command=lambda: self.open_url("http://localhost:8000/secure/docs"),
                                bg="#2196F3", fg="white", padx=10)
            open_btn.pack(side='left', padx=5)
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = time.strftime("%H:%M:%S")
        log_message = f"[{timestamp}] {message}\n"
        
        self.log_text.insert(tk.END, log_message)
        self.log_text.see(tk.END)
        self.root.update()
    
    def start_service(self, service):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞"""
        if self.processes[service] and self.processes[service].poll() is None:
            self.log(f"‚ö†Ô∏è {service} —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.log(f"üöÄ –ó–∞–ø—É—Å–∫ {service}...")
        self.status_bar.config(text=f"–ó–∞–ø—É—Å–∫ {service}...")
        
        try:
            if service == 'frontend':
                self.processes[service] = subprocess.Popen(
                    ['npm.cmd', 'run', 'dev'],
                    cwd='01-user-dashboard',
                    creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == 'nt' else 0
                )
            elif service == 'backend':
                self.processes[service] = subprocess.Popen(
                    ['python', 'api_server.py'],
                    cwd='05-server-launchers/main',
                    creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == 'nt' else 0
                )
            elif service == 'auth_bot':
                self.processes[service] = subprocess.Popen(
                    ['python', 'auth_bot.py'],
                    cwd='05-server-launchers/bots',
                    creationflags=subprocess.CREATE_NEW_CONSOLE if os.name == 'nt' else 0
                )
            
            self.log(f"‚úÖ {service} –∑–∞–ø—É—â–µ–Ω (PID: {self.processes[service].pid})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
            threading.Timer(3.0, lambda: self.check_service_status(service)).start()
            
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {service}: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å {service}:\n{e}")
    
    def stop_service(self, service):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        if not self.processes[service] or self.processes[service].poll() is not None:
            self.log(f"‚ö†Ô∏è {service} –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.log(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {service}...")
        
        try:
            self.processes[service].terminate()
            self.processes[service].wait(timeout=5)
            self.log(f"‚úÖ {service} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.statuses[service].set("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.TimeoutExpired:
            self.processes[service].kill()
            self.log(f"üî• {service} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            self.statuses[service].set("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {service}: {e}")
    
    def start_all(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.log("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        self.start_service('backend')
        time.sleep(2)
        self.start_service('auth_bot')
        time.sleep(1)
        self.start_service('frontend')
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        for service in ['frontend', 'backend', 'auth_bot']:
            self.stop_service(service)
    
    def check_service_status(self, service):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            if service == 'frontend':
                response = requests.get("http://localhost:3000", timeout=2)
                if response.status_code == 200:
                    self.statuses[service].set("üü¢ –†–∞–±–æ—Ç–∞–µ—Ç (Port 3000)")
                else:
                    self.statuses[service].set("üü° –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            elif service == 'backend':
                response = requests.get("http://localhost:8000/health", timeout=2)
                if response.status_code == 200:
                    self.statuses[service].set("üü¢ –†–∞–±–æ—Ç–∞–µ—Ç (Port 8000)")
                else:
                    self.statuses[service].set("üü° –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            elif service == 'auth_bot':
                # –î–ª—è –±–æ—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤
                if self.processes[service] and self.processes[service].poll() is None:
                    self.statuses[service].set("üü¢ –†–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    self.statuses[service].set("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except:
            if self.processes[service] and self.processes[service].poll() is None:
                self.statuses[service].set("üü° –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            else:
                self.statuses[service].set("üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def check_statuses(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤"""
        for service in ['frontend', 'backend', 'auth_bot']:
            self.check_service_status(service)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
        threading.Timer(10.0, self.check_statuses).start()
    
    def open_url(self, url):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        import webbrowser
        webbrowser.open(url)
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏ –≤—ã–π—Ç–∏?"):
            self.stop_all()
            time.sleep(1)
            self.root.destroy()

def main():
    root = tk.Tk()
    app = TeleShopLauncher(root)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    root.mainloop()

if __name__ == "__main__":
    main() 