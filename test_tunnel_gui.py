#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ TeleShop Tunnel GUI
"""

import time
import os
import subprocess
import re

def test_tunnel_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
    print("=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è ===")
    print("–ó–∞–ø—É—Å–∫–∞—é npx localtunnel --port 3000...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É–Ω–Ω–µ–ª—å
        process = subprocess.Popen(
            ['npx', 'localtunnel', '--port', '3000'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            cwd=os.getcwd()
        )
        
        print("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è URL...")
        
        # –ñ–¥–µ–º URL –º–∞–∫—Å–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥
        for i in range(15):
            if process.poll() is not None:
                break
                
            line = process.stdout.readline()
            if line:
                print(f"Output: {line.strip()}")
                
                # –ò—â–µ–º URL
                match = re.search(r'your url is: (https://[^\s]+)', line)
                if match:
                    tunnel_url = match.group(1)
                    print(f"‚úÖ –¢—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω: {tunnel_url}")
                    
                    # –°–æ–∑–¥–∞–µ–º .env.local —Ñ–∞–π–ª
                    env_path = os.path.join("01-user-dashboard", ".env.local")
                    with open(env_path, 'w', encoding='utf-8') as f:
                        f.write("# Auto-generated by Test Script\n")
                        f.write(f"NEXT_PUBLIC_TUNNEL_URL={tunnel_url}\n")
                    
                    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {env_path}")
                    return tunnel_url
            
            time.sleep(1)
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –∑–∞ 15 —Å–µ–∫—É–Ω–¥")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_component_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ ===")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    result = subprocess.run(['tasklist'], capture_output=True, text=True)
    processes = result.stdout
    
    components = {
        'python.exe': 'Python –ø—Ä–æ—Ü–µ—Å—Å—ã',
        'node.exe': 'Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã', 
        'npm.exe': 'NPM –ø—Ä–æ—Ü–µ—Å—Å—ã'
    }
    
    for process, description in components.items():
        if process in processes:
            print(f"‚úÖ {description}: –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"‚ùå {description}: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def test_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env.local —Ñ–∞–π–ª–∞"""
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ===")
    
    env_path = os.path.join("01-user-dashboard", ".env.local")
    
    if os.path.exists(env_path):
        print(f"‚úÖ –§–∞–π–ª {env_path} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        with open(env_path, 'r', encoding='utf-8') as f:
            content = f.read()
            print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:")
            print(content)
    else:
        print(f"‚ùå –§–∞–π–ª {env_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    print("üåê TeleShop Tunnel GUI - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    test_component_status()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    test_env_file()
    
    # –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É–Ω–Ω–µ–ª—è
    print("\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è? (y/n): ", end="")
    choice = input().lower().strip()
    
    if choice in ['y', 'yes', '–¥–∞', '–¥']:
        tunnel_url = test_tunnel_creation()
        if tunnel_url:
            print(f"\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! URL: {tunnel_url}")
        else:
            print("\n‚ùå –¢–µ—Å—Ç –Ω–µ —É–¥–∞–ª—Å—è")
    
    print("\n" + "=" * 50)
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 