import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
import os
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = current_dir
for _ in range(10):  # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
    if os.path.exists(os.path.join(project_root, "main_launcher.py")):
        break
    project_root = os.path.dirname(project_root)
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.utils.database import AsyncSessionLocal
from shared.models.user import User
from shared.models.shop import Shop
from shared.schemas.user_schemas import UserCreate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# URL Web App (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
WEB_APP_URL = os.getenv("WEB_APP_URL", "https://your-domain.com")


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as db:
        await create_or_get_user(db, user)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üè™ –ú–æ–π –º–∞–≥–∞–∑–∏–Ω", callback_data="my_shop")],
        [InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤", callback_data="browse_shops")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_text = f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Shops, {user.first_name}!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω
‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    
    if query.data == "my_shop":
        await handle_my_shop(query, user)
    elif query.data == "browse_shops":
        await handle_browse_shops(query)
    elif query.data == "help":
        await handle_help(query)
    elif query.data == "create_shop":
        await handle_create_shop(query, user)
    elif query.data == "manage_shop":
        await handle_manage_shop(query, user)


async def handle_my_shop(query, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ–π –º–∞–≥–∞–∑–∏–Ω'"""
    async with AsyncSessionLocal() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–≥–∞–∑–∏–Ω
        db_user = await get_user_by_telegram_id(db, user.id)
        if not db_user:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await db.execute(
            select(Shop).where(Shop.owner_id == db_user.id, Shop.is_active == True)
        )
        shop = result.scalar_one_or_none()
        
        if shop:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –º–∞–≥–∞–∑–∏–Ω
            keyboard = [
                [InlineKeyboardButton(
                    "üõ†Ô∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –º–∞–≥–∞–∑–∏–Ω–æ–º", 
                    web_app=WebAppInfo(url=f"{WEB_APP_URL}/shop/{shop.id}/manage")
                )],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"""
üè™ –í–∞—à –º–∞–≥–∞–∑–∏–Ω: {shop.name}

üìù –û–ø–∏—Å–∞–Ω–∏–µ: {shop.description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ –°–æ–∑–¥–∞–Ω: {shop.created_at.strftime('%d.%m.%Y')}

–ù–∞–∂–º–∏—Ç–µ "–£–ø—Ä–∞–≤–ª—è—Ç—å –º–∞–≥–∞–∑–∏–Ω–æ–º" –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
"""
        else:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞
            keyboard = [
                [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="create_shop")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = """
–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω–∞. 

–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –º–∞–≥–∞–∑–∏–Ω –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –ø—Ä—è–º–æ –≤ Telegram!
"""
        
        await query.edit_message_text(text, reply_markup=reply_markup)


async def handle_create_shop(query, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"""
    keyboard = [
        [InlineKeyboardButton(
            "üè™ –°–æ–∑–¥–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=f"{WEB_APP_URL}/create-shop")
        )],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_shop")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üè™ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞. 
–í—ã —Å–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã.
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup)


async def handle_browse_shops(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(
            "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", 
            web_app=WebAppInfo(url=f"{WEB_APP_URL}/catalog")
        )],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ –º–∞–≥–∞–∑–∏–Ω–æ–≤

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –∏ –¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑—ã.
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup)


async def handle_help(query):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–º–æ—â–∏"""
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = """
‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

üè™ –ú–æ–π –º–∞–≥–∞–∑–∏–Ω:
- –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω
- –î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä—ã —Å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
- –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö

üõçÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤:
- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
- –î–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –æ–¥–Ω–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support_bot
"""
    
    await query.edit_message_text(text, reply_markup=reply_markup)


async def create_or_get_user(db: AsyncSession, telegram_user) -> User:
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_user_id
    result = await db.execute(
        select(User).where(User.telegram_user_id == telegram_user.id)
    )
    user = result.scalar_one_or_none()
    
    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = UserCreate(
            telegram_user_id=telegram_user.id,
            username=telegram_user.username,
            first_name=telegram_user.first_name,
            last_name=telegram_user.last_name
        )
        user = User(**user_data.dict())
        db.add(user)
        await db.commit()
        await db.refresh(user)
        logger.info(f"Created new user: {telegram_user.id}")
    
    return user


async def get_user_by_telegram_id(db: AsyncSession, telegram_user_id: int) -> User:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_user_id"""
    result = await db.execute(
        select(User).where(User.telegram_user_id == telegram_user_id)
    )
    return result.scalar_one_or_none()


async def send_order_notification(shop_owner_telegram_id: int, order_data: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –º–∞–≥–∞–∑–∏–Ω–∞"""
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        logger.error("TELEGRAM_BOT_TOKEN not set")
        return
    
    app = Application.builder().token(bot_token).build()
    
    message = f"""
üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!

üì¶ –¢–æ–≤–∞—Ä: {order_data['product_name']}
üí∞ –°—É–º–º–∞: {order_data['total_price']} —Ä—É–±.
üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {order_data['customer_name']}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: @{order_data['customer_username']}

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏.
"""
    
    try:
        await app.bot.send_message(
            chat_id=shop_owner_telegram_id,
            text=message
        )
    except Exception as e:
        logger.error(f"Failed to send order notification: {e}")


def create_bot_application():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞"""
    bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not bot_token:
        raise ValueError("TELEGRAM_BOT_TOKEN not set")
    
    application = Application.builder().token(bot_token).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    return application


if __name__ == "__main__":
    app = create_bot_application()
    app.run_polling() 