import os
import logging
from typing import Dict, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
import json


# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared –º–æ–¥—É–ª—è–º
import sys
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(os.path.dirname(os.path.dirname(current_dir))))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
shared_path = os.path.join(project_root, "05-server-launchers", "config")
sys.path.insert(0, shared_path)

from shared.utils.database import AsyncSessionLocal
from shared.models.user import User
from shared.models.shop import Shop
from shared.schemas.user_schemas import UserCreate

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
active_bots: Dict[str, Application] = {}

class BotManager:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
    
    async def start_bot(self, bot_token: str, bot_id: int):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
        if bot_token in active_bots:
            logger.info(f"–ë–æ—Ç {bot_token[:10]}... —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
            application = Application.builder().token(bot_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", self.create_start_handler(bot_id)))
            application.add_handler(CallbackQueryHandler(self.create_callback_handler(bot_id)))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –±–æ—Ç—ã –ü–ï–†–ï–î –∑–∞–ø—É—Å–∫–æ–º
            active_bots[bot_token] = application
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await application.initialize()
            await application.start()
            await application.updater.start_polling(drop_pending_updates=True)
            
            logger.info(f"‚úÖ –ë–æ—Ç {bot_token[:10]}... —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_token[:10]}...: {e}")
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if bot_token in active_bots:
                del active_bots[bot_token]
            raise
    
    async def stop_bot(self, bot_token: str):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç"""
        if bot_token not in active_bots:
            return
        
        try:
            application = active_bots[bot_token]
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling
            if application.updater.running:
                await application.updater.stop()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if application.running:
                await application.stop()
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await application.shutdown()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤
            del active_bots[bot_token]
            logger.info(f"‚úÖ –ë–æ—Ç {bot_token[:10]}... –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_token[:10]}...: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            if bot_token in active_bots:
                del active_bots[bot_token]
    
    def create_start_handler(self, bot_id: int):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            user = update.effective_user
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ (–º–∞–≥–∞–∑–∏–Ω–µ) –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            async with AsyncSessionLocal() as db:
                result = await db.execute(
                    select(Shop).where(Shop.id == bot_id)
                )
                bot_info = result.scalar_one_or_none()
                
                if not bot_info:
                    await update.message.reply_text("‚ùå –ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.create_or_get_user(db, user)
            
            # –ü–∞—Ä—Å–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ bot_settings
            custom_colors = {}
            custom_texts = {}
            
            if bot_info.bot_settings:
                try:
                    settings = bot_info.bot_settings
                    if isinstance(settings, str):
                        settings = json.loads(settings)
                    custom_colors = settings.get('colors', {})
                    custom_texts = settings.get('texts', {})
                except:
                    pass
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            webapp_url = f"{self.base_url}/webapp/{bot_id}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
            keyboard = [
                [InlineKeyboardButton(
                    "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
                    web_app=WebAppInfo(url=webapp_url)
                )],
                [InlineKeyboardButton("‚ÑπÔ∏è –û –º–∞–≥–∞–∑–∏–Ω–µ", callback_data=f"info_{bot_id}")],
                [InlineKeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data=f"support_{bot_id}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_text = custom_texts.get('welcome', f"""
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {bot_info.name or '–Ω–∞—à –º–∞–≥–∞–∑–∏–Ω'}, {user.first_name}!

üõçÔ∏è –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
‚Ä¢ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω:
""")
            
            await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        
        return start_command
    
    def create_callback_handler(self, bot_id: int):
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
            query = update.callback_query
            await query.answer()
            
            if query.data == f"info_{bot_id}":
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–≥–∞–∑–∏–Ω–µ
                async with AsyncSessionLocal() as db:
                    result = await db.execute(
                        select(Shop).where(Shop.id == bot_id)
                    )
                    bot_info = result.scalar_one_or_none()
                    
                    if bot_info:
                        info_text = f"""
‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ

üè™ –ù–∞–∑–≤–∞–Ω–∏–µ: {bot_info.name}
ü§ñ –ë–æ—Ç: @{bot_info.bot_username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üí∞ –í–∞–ª—é—Ç–∞: {bot_info.currency or 'RUB'}
‚ö° –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω—ã–π' if bot_info.is_bot_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π'}

Powered by TeleShop üöÄ
"""
                        await query.edit_message_text(info_text)
            
            elif query.data == f"support_{bot_id}":
                support_text = """
üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ —á–∞—Ç
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help

–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å! üòä
"""
                await query.edit_message_text(support_text)
        
        return button_callback
    
    async def create_or_get_user(self, db: AsyncSession, telegram_user):
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        result = await db.execute(
            select(User).where(User.telegram_user_id == telegram_user.id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            user = User(
                telegram_user_id=telegram_user.id,
                username=telegram_user.username,
                first_name=telegram_user.first_name,
                last_name=telegram_user.last_name,
            )
            db.add(user)
            await db.commit()
            await db.refresh(user)
        
        return user

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
bot_manager = BotManager()

async def start_all_active_bots():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with AsyncSessionLocal() as db:
        result = await db.execute(
            select(Shop).where(Shop.is_bot_active == True)
        )
        active_bots_list = result.scalars().all()
        
        for bot in active_bots_list:
            try:
                await bot_manager.start_bot(bot.bot_token, bot.id)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ {bot.bot_username}: {e}")

async def stop_all_bots():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
    for bot_token in list(active_bots.keys()):
        await bot_manager.stop_bot(bot_token) 