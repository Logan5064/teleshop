import React, { useState } from 'react';
import { 
  Squares2X2Icon,
  PlusIcon,
  TrashIcon
} from '@heroicons/react/24/outline';

interface CharacteristicsPanelProps {
  productForm: any;
  setProductForm: (updater: (prev: any) => any) => void;
  characteristicsLibrary: any[];
  setCharacteristicsLibrary: (updater: (prev: any[]) => any[]) => void;
  generateId: () => string;
}

export const CharacteristicsPanel = ({ 
  productForm, 
  setProductForm, 
  characteristicsLibrary, 
  setCharacteristicsLibrary,
  generateId 
}: CharacteristicsPanelProps) => {
  const [showCreateCharacteristic, setShowCreateCharacteristic] = useState(false);
  const [newCharacteristic, setNewCharacteristic] = useState({
    name: '',
    values: ['']
  });

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
  const createCharacteristic = () => {
    if (!newCharacteristic.name.trim()) return;
    
    const characteristic = {
      id: generateId(),
      name: newCharacteristic.name,
      values: newCharacteristic.values
        .filter(v => v.trim())
        .map(v => ({ id: generateId(), name: v.trim() }))
    };
    
    setCharacteristicsLibrary(prev => [...prev, characteristic]);
    setNewCharacteristic({ name: '', values: [''] });
    setShowCreateCharacteristic(false);
  };

  const addValueToNewCharacteristic = () => {
    setNewCharacteristic(prev => ({
      ...prev,
      values: [...prev.values, '']
    }));
  };

  const updateNewCharacteristicValue = (index: number, value: string) => {
    setNewCharacteristic(prev => ({
      ...prev,
      values: prev.values.map((v, i) => i === index ? value : v)
    }));
  };

  const removeValueFromNewCharacteristic = (index: number) => {
    if (newCharacteristic.values.length > 1) {
      setNewCharacteristic(prev => ({
        ...prev,
        values: prev.values.filter((_, i) => i !== index)
      }));
    }
  };

  const selectCharacteristic = (characteristicId: string, valueId: string) => {
    setProductForm(prev => ({
      ...prev,
      selectedCharacteristics: {
        ...prev.selectedCharacteristics,
        [characteristicId]: valueId
      }
    }));
  };

  const removeCharacteristicFromProduct = (characteristicId: string) => {
    setProductForm(prev => ({
      ...prev,
      selectedCharacteristics: Object.fromEntries(
        Object.entries(prev.selectedCharacteristics).filter(([id]) => id !== characteristicId)
      )
    }));
  };

  const deleteCharacteristic = (characteristicId: string) => {
    const characteristic = characteristicsLibrary.find(c => c.id === characteristicId);
    if (characteristic && confirm(`–£–¥–∞–ª–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É "${characteristic.name}"?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`)) {
      // –£–¥–∞–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
      setCharacteristicsLibrary(prev => prev.filter(c => c.id !== characteristicId));
      // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
      removeCharacteristicFromProduct(characteristicId);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–∞ (–±–∞–∑–æ–≤—ã—Ö + –∫–∞—Å—Ç–æ–º–Ω—ã—Ö)
  const getAllSelectedProperties = () => {
    const properties: Array<{
      id: string;
      name: string;
      value: string;
      type: 'basic' | 'custom';
      source?: string;
    }> = [];

    // –°–ø–∏—Å–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–µ–π
    const addedProperties = new Set<string>();

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∞–º–∏ "–°–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏")
    productForm.attributes.forEach((attr: any) => {
      if (attr.isFromModule && attr.values.length > 0) {
        properties.push({
          id: attr.id,
          name: attr.name,
          value: attr.values.map((v: any) => v.name).join(', '),
          type: 'basic',
          source: 'attribute'
        });
        addedProperties.add(attr.name);
      }
    });

    // –ë–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –º–æ–¥—É–ª–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã)
    if (productForm.modules?.weight && productForm.weight && !addedProperties.has('–í–µ—Å')) {
      properties.push({
        id: 'weight',
        name: '–í–µ—Å',
        value: `${productForm.weight} ${productForm.weightUnit || '–∫–≥'}`,
        type: 'basic',
        source: 'module'
      });
    }

    if (productForm.modules?.condition && productForm.condition && !addedProperties.has('–°–æ—Å—Ç–æ—è–Ω–∏–µ')) {
      const conditionNames = {
        'new': '–ù–æ–≤—ã–π',
        'used': '–ë/–£', 
        'refurbished': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π',
        'defective': '–° –¥–µ—Ñ–µ–∫—Ç–æ–º'
      };
      properties.push({
        id: 'condition',
        name: '–°–æ—Å—Ç–æ—è–Ω–∏–µ',
        value: conditionNames[productForm.condition as keyof typeof conditionNames] || productForm.condition,
        type: 'basic',
        source: 'module'
      });
    }

    if (productForm.modules?.warranty && productForm.warrantyMonths && !addedProperties.has('–ì–∞—Ä–∞–Ω—Ç–∏—è')) {
      properties.push({
        id: 'warranty',
        name: '–ì–∞—Ä–∞–Ω—Ç–∏—è',
        value: `${productForm.warrantyMonths} –º–µ—Å`,
        type: 'basic',
        source: 'module'
      });
    }

    if (productForm.modules?.dimensions && (productForm.dimensions?.width || productForm.dimensions?.length || productForm.dimensions?.height) && !addedProperties.has('–ì–∞–±–∞—Ä–∏—Ç—ã')) {
      const dims = productForm.dimensions;
      const unit = productForm.dimensionUnit || '—Å–º';
      properties.push({
        id: 'dimensions',
        name: '–ì–∞–±–∞—Ä–∏—Ç—ã',
        value: `${dims.width || 0}√ó${dims.length || 0}√ó${dims.height || 0} ${unit}`,
        type: 'basic',
        source: 'module'
      });
    }

    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    Object.entries(productForm.selectedCharacteristics).forEach(([charId, valueId]) => {
      const characteristic = characteristicsLibrary.find(c => c.id === charId);
      const value = characteristic?.values.find((v: any) => v.id === valueId);
      
      if (characteristic && value) {
        properties.push({
          id: charId,
          name: characteristic.name,
          value: value.name,
          type: 'custom'
        });
      }
    });

    return properties;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞
  const removeBasicProperty = (propertyId: string, propertyName: string, source?: string) => {
    if (source === 'attribute') {
      // –£–¥–∞–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç (—Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–Ω–æ–ø–∫–æ–π "–°–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏")
      setProductForm(prev => ({
        ...prev,
        attributes: prev.attributes.filter((attr: any) => attr.id !== propertyId)
      }));
    } else {
      // –£–¥–∞–ª—è–µ–º –º–æ–¥—É–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
      if (propertyName === '–í–µ—Å') {
        setProductForm(prev => ({ ...prev, weight: '', weightUnit: 'kg' }));
      } else if (propertyName === '–°–æ—Å—Ç–æ—è–Ω–∏–µ') {
        setProductForm(prev => ({ ...prev, condition: 'new' }));
      } else if (propertyName === '–ì–∞—Ä–∞–Ω—Ç–∏—è') {
        setProductForm(prev => ({ ...prev, warrantyMonths: '' }));
      } else if (propertyName === '–ì–∞–±–∞—Ä–∏—Ç—ã') {
        setProductForm(prev => ({ ...prev, dimensions: { width: '', length: '', height: '' } }));
      }
    }
  };

  return (
    <div className="space-y-6 pb-8">
      <div className="bg-emerald-50 border border-emerald-200 rounded-xl p-4 mb-6">
        <h3 className="text-lg font-semibold text-emerald-900 mb-2">üìã –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞</h3>
        <p className="text-sm text-emerald-700 mb-3">
          –°–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤. 
          –ù–∞–ø—Ä–∏–º–µ—Ä: —Å–æ–∑–¥–∞–π—Ç–µ "–ë—Ä–µ–Ω–¥" —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ Apple, Samsung, Xiaomi, –∞ –ø–æ—Ç–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤—ã–±–∏—Ä–∞–π—Ç–µ –Ω—É–∂–Ω—ã–π –±—Ä–µ–Ω–¥.
        </p>
        <div className="bg-emerald-100 rounded-lg p-3">
          <p className="text-xs text-emerald-800">
            üí° <strong>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong> –°–æ–∑–¥–∞–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É ‚Üí –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ‚Üí –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
          </p>
        </div>
      </div>

      {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */}
      <div className="space-y-4">
        <div className="flex items-center justify-between">
          <div>
            <h4 className="text-lg font-semibold text-gray-800">–ú–æ–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
            <p className="text-sm text-gray-600">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤</p>
          </div>
          <button
            onClick={() => setShowCreateCharacteristic(!showCreateCharacteristic)}
            className="inline-flex items-center gap-2 px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors"
          >
            <PlusIcon className="w-4 h-4" />
            –°–æ–∑–¥–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
          </button>
        </div>

        {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ */}
        {showCreateCharacteristic && (
          <div className="bg-gray-50 border border-gray-200 rounded-xl p-4">
            <h5 className="font-medium text-gray-800 mb-3">–ù–æ–≤–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞</h5>
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</label>
                <input
                  type="text"
                  value={newCharacteristic.name}
                  onChange={(e) => setNewCharacteristic(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ë—Ä–µ–Ω–¥, –ú–∞—Ç–µ—Ä–∏–∞–ª, –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞"
                />
              </div>
              <div>
                <div className="flex items-center justify-between mb-2">
                  <label className="text-sm font-medium text-gray-700">–í–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è</label>
                  <button
                    onClick={addValueToNewCharacteristic}
                    className="text-emerald-600 hover:text-emerald-700 text-sm font-medium"
                  >
                    + –î–æ–±–∞–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                  </button>
                </div>
                <div className="space-y-2">
                  {newCharacteristic.values.map((value, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <input
                        type="text"
                        value={value}
                        onChange={(e) => updateNewCharacteristicValue(index, e.target.value)}
                        className="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500"
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Apple, Samsung, Xiaomi"
                      />
                      {newCharacteristic.values.length > 1 && (
                        <button
                          onClick={() => removeValueFromNewCharacteristic(index)}
                          className="p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors"
                        >
                          <TrashIcon className="w-4 h-4" />
                        </button>
                      )}
                    </div>
                  ))}
                </div>
              </div>
              <div className="flex items-center gap-3 pt-2">
                <button
                  onClick={createCharacteristic}
                  disabled={!newCharacteristic.name.trim() || newCharacteristic.values.filter(v => v.trim()).length === 0}
                  className="px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors disabled:bg-gray-300 disabled:cursor-not-allowed"
                >
                  –°–æ–∑–¥–∞—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
                </button>
                <button
                  onClick={() => {
                    setShowCreateCharacteristic(false);
                    setNewCharacteristic({ name: '', values: [''] });
                  }}
                  className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ */}
        {characteristicsLibrary.length > 0 ? (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
            {characteristicsLibrary.map((characteristic) => (
              <div key={characteristic.id} className="bg-white border border-gray-200 rounded-xl p-4">
                <div className="flex items-center justify-between mb-3">
                  <h5 className="font-medium text-gray-800">{characteristic.name}</h5>
                  <div className="flex items-center gap-2">
                    <div className="text-xs text-gray-500">
                      {characteristic.values.length} –∑–Ω–∞—á–µ–Ω–∏–π
                    </div>
                    <button
                      onClick={() => deleteCharacteristic(characteristic.id)}
                      className="p-1 text-red-500 hover:bg-red-50 rounded-lg transition-colors"
                      title="–£–¥–∞–ª–∏—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É"
                    >
                      <TrashIcon className="w-4 h-4" />
                    </button>
                  </div>
                </div>
                <div className="flex flex-wrap gap-1 mb-3">
                  {characteristic.values.map((value: any) => (
                    <span key={value.id} className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">
                      {value.name}
                    </span>
                  ))}
                </div>
                <div className="text-xs text-gray-500">
                  –°–æ–∑–¥–∞–Ω–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–∞—Ö
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8 border-2 border-dashed border-gray-300 rounded-xl">
            <div className="space-y-3">
              <div className="w-16 h-16 bg-gray-100 rounded-2xl flex items-center justify-center mx-auto">
                <Squares2X2Icon className="w-8 h-8 text-gray-400" />
              </div>
              <div>
                <h3 className="text-sm font-medium text-gray-700">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É</h3>
                <p className="text-xs text-gray-500 mt-1">
                  –ù–∞–ø—Ä–∏–º–µ—Ä: –ë—Ä–µ–Ω–¥, –ú–∞—Ç–µ—Ä–∏–∞–ª, –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞, –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
                </p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* –í—ã–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ */}
      {characteristicsLibrary.length > 0 && (
        <div className="border-t border-gray-200 pt-6">
          <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 mb-4">
            <h4 className="text-lg font-semibold text-blue-900 mb-2">üè∑Ô∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</h4>
            <p className="text-sm text-blue-700">
              –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã –∫ —ç—Ç–æ–º—É —Ç–æ–≤–∞—Ä—É –∏ —É–∫–∞–∂–∏—Ç–µ –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è
            </p>
          </div>

          <div className="space-y-4">
            {characteristicsLibrary.map((characteristic) => {
              const isSelected = characteristic.id in productForm.selectedCharacteristics;
              const selectedValue = productForm.selectedCharacteristics[characteristic.id];
              
              return (
                <div 
                  key={characteristic.id} 
                  className="bg-white border border-gray-200 rounded-xl p-4 hover:border-gray-300 transition-colors cursor-pointer" 
                  style={{ pointerEvents: 'auto' }}
                  onClick={(e) => {
                    // –ó–∞–ø–∞—Å–Ω–æ–π –∫–ª–∏–∫ –ø–æ –≤—Å–µ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
                    if (e.target === e.currentTarget) {
                      if (isSelected) {
                        removeCharacteristicFromProduct(characteristic.id);
                      } else {
                        selectCharacteristic(characteristic.id, characteristic.values[0]?.id || '');
                      }
                    }
                  }}
                >
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3" style={{ pointerEvents: 'auto' }}>
                      <button
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          if (isSelected) {
                            removeCharacteristicFromProduct(characteristic.id);
                          } else {
                            // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            selectCharacteristic(characteristic.id, characteristic.values[0]?.id || '');
                          }
                        }}
                        className={`font-medium transition-all duration-200 hover:scale-105 cursor-pointer relative z-10 px-3 py-2 rounded-lg border ${
                          isSelected 
                            ? 'text-blue-700 hover:text-blue-800 bg-blue-50 border-blue-200' 
                            : 'text-gray-800 hover:text-blue-600 hover:bg-gray-50 border-gray-200'
                        }`}
                        style={{ pointerEvents: 'auto' }}
                        type="button"
                      >
                        {isSelected ? '‚úì' : '‚óã'} {characteristic.name}
                      </button>
                      {isSelected && (
                        <span className="px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded font-medium animate-pulse">
                          –ê–∫—Ç–∏–≤–Ω–æ
                        </span>
                      )}
                    </div>
                    {isSelected && (
                      <div className="flex flex-wrap gap-2">
                        {characteristic.values.map((value: any) => (
                          <button
                            key={value.id}
                            onClick={(e) => {
                              e.preventDefault();
                              e.stopPropagation();
                              selectCharacteristic(characteristic.id, value.id);
                            }}
                            className={`px-3 py-1.5 rounded-lg text-sm font-medium transition-all duration-200 border ${
                              selectedValue === value.id
                                ? 'bg-blue-600 text-white border-blue-600 shadow-sm'
                                : 'bg-gray-100 text-gray-700 border-gray-200 hover:bg-gray-200 hover:border-gray-300'
                            }`}
                          >
                            {value.name}
                          </button>
                        ))}
                      </div>
                    )}
                  </div>
                  
                  {!isSelected && (
                    <div>
                      <p className="text-xs text-gray-500 mb-2">–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:</p>
                      <div className="flex flex-wrap gap-1">
                        {characteristic.values.map((value: any) => (
                          <span key={value.id} className="px-2 py-1 bg-gray-100 text-gray-500 text-xs rounded">
                            {value.name}
                          </span>
                        ))}
                      </div>
                      <p className="text-xs text-gray-400 mt-2 flex items-center gap-1">
                        üëÜ –ö–ª–∏–∫–Ω–∏—Ç–µ <strong>‚óã {characteristic.name}</strong> –∏–ª–∏ –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                      </p>
                    </div>
                  )}
                  
                  {isSelected && (
                    <div className="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-3 mt-2 border border-blue-200">
                      <div className="flex items-center justify-between">
                        <div>
                          <p className="text-sm font-medium text-blue-900">
                            ‚úì –í—ã–±—Ä–∞–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                          </p>
                          <div className="flex items-center gap-2 mt-1">
                            <span className="text-xs text-blue-700 font-medium">{characteristic.name}:</span>
                            <span className="px-2 py-1 bg-blue-600 text-white text-xs rounded font-medium">
                              {characteristic.values.find((v: any) => v.id === selectedValue)?.name}
                            </span>
                          </div>
                        </div>
                        <button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            removeCharacteristicFromProduct(characteristic.id);
                          }}
                          className="text-blue-600 hover:text-blue-800 text-xs font-medium hover:bg-blue-100 px-2 py-1 rounded transition-colors"
                        >
                          –û—Ç–º–µ–Ω–∏—Ç—å
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>

          {/* –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞ –≤—Å–µ—Ö —Å–≤–æ–π—Å—Ç–≤ —Ç–æ–≤–∞—Ä–∞ (–±–∞–∑–æ–≤—ã—Ö + –∫–∞—Å—Ç–æ–º–Ω—ã—Ö) */}
          {(() => {
            const allProperties = getAllSelectedProperties();
            return allProperties.length > 0 && (
              <div className="bg-white border border-gray-200 rounded-2xl p-6 mt-6 shadow-sm">
                <div className="flex items-center gap-3 mb-4">
                  <div className="w-10 h-10 bg-gradient-to-br from-emerald-400 to-green-500 rounded-xl flex items-center justify-center">
                    <span className="text-white text-lg">‚úì</span>
                  </div>
                  <div>
                    <h5 className="font-semibold text-gray-900">–í—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞</h5>
                    <p className="text-sm text-gray-600">
                      –ë–∞–∑–æ–≤—ã—Ö: {allProperties.filter(p => p.type === 'basic').length} ‚Ä¢ 
                      –ö–∞—Å—Ç–æ–º–Ω—ã—Ö: {allProperties.filter(p => p.type === 'custom').length}
                    </p>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                  {allProperties.map((property) => (
                    <div 
                      key={property.id} 
                      className={`rounded-xl p-4 border ${
                        property.type === 'basic' 
                          ? 'bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200' 
                          : 'bg-gradient-to-r from-gray-50 to-gray-100 border-gray-200'
                      }`}
                    >
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                            <p className="text-xs font-medium text-gray-500 uppercase tracking-wide">
                              {property.name}
                            </p>
                            <span className={`px-1.5 py-0.5 text-xs font-medium rounded ${
                              property.type === 'basic' 
                                ? 'bg-blue-600 text-white' 
                                : 'bg-gray-600 text-white'
                            }`}>
                              {property.type === 'basic' ? '–ë–∞–∑–∞' : '–°–≤–æ—ë'}
                            </span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="px-3 py-1.5 bg-white border border-gray-300 rounded-lg text-sm font-medium text-gray-900 shadow-sm">
                              {property.value}
                            </span>
                          </div>
                        </div>
                        <button
                          onClick={() => {
                            if (property.type === 'custom') {
                              removeCharacteristicFromProduct(property.id);
                            } else {
                              removeBasicProperty(property.id, property.name, property.source);
                            }
                          }}
                          className="ml-3 p-1.5 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded-lg transition-colors"
                          title={`–£–±—Ä–∞—Ç—å ${property.name}`}
                        >
                          <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
                
                {allProperties.length > 0 && (
                  <div className="mt-4 pt-4 border-t border-gray-200">
                    <div className="flex items-center justify-between">
                      <p className="text-sm text-gray-600">
                        –í—Å–µ —ç—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º
                      </p>
                      <div className="flex items-center gap-3">
                        <span className="text-xs text-gray-500">
                          üí° –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                        </span>
                        {Object.keys(productForm.selectedCharacteristics).length > 0 && (
                          <button
                            onClick={() => setProductForm(prev => ({ ...prev, selectedCharacteristics: {} }))}
                            className="text-sm text-red-600 hover:text-red-700 font-medium hover:bg-red-50 px-3 py-1.5 rounded-lg transition-colors"
                          >
                            –û—á–∏—Å—Ç–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                )}
              </div>
            );
          })()}
        </div>
      )}
    </div>
  );
}; 
