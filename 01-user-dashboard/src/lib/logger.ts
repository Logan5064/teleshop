/**
 * üìù TeleShop Frontend Logger
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã console.log
 */

type LogLevel = 'debug' | 'info' | 'warn' | 'error';

interface LogEntry {
  level: LogLevel;
  message: string;
  data?: any;
  timestamp: string;
  component?: string;
}

class FrontendLogger {
  private isDevelopment = process.env.NODE_ENV === 'development';
  private logs: LogEntry[] = [];
  private maxLogs = 1000; // –ú–∞–∫—Å–∏–º—É–º –ª–æ–≥–æ–≤ –≤ –ø–∞–º—è—Ç–∏

  private log(level: LogLevel, message: string, data?: any, component?: string) {
    const entry: LogEntry = {
      level,
      message,
      data,
      timestamp: new Date().toISOString(),
      component
    };

    // –í development –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏
    if (this.isDevelopment) {
      const prefix = this.getPrefix(level);
      const componentStr = component ? `[${component}] ` : '';
      
      if (data !== undefined) {
        console[level === 'debug' ? 'log' : level](`${prefix} ${componentStr}${message}`, data);
      } else {
        console[level === 'debug' ? 'log' : level](`${prefix} ${componentStr}${message}`);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)
    this.logs.push(entry);
    if (this.logs.length > this.maxLogs) {
      this.logs.shift();
    }

    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    if (level === 'error' && !this.isDevelopment) {
      this.sendErrorToServer(entry);
    }
  }

  private getPrefix(level: LogLevel): string {
    const prefixes = {
      debug: 'üîç',
      info: 'üìù',
      warn: '‚ö†Ô∏è',
      error: '‚ùå'
    };
    return prefixes[level];
  }

  private async sendErrorToServer(entry: LogEntry) {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –Ω–∞ backend –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      await fetch('/api/logs/error', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(entry)
      });
    } catch (e) {
      // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  debug(message: string, data?: any, component?: string) {
    this.log('debug', message, data, component);
  }

  info(message: string, data?: any, component?: string) {
    this.log('info', message, data, component);
  }

  warn(message: string, data?: any, component?: string) {
    this.log('warn', message, data, component);
  }

  error(message: string, data?: any, component?: string) {
    this.log('error', message, data, component);
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —á–∞—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
  apiRequest(url: string, method: string, component?: string) {
    this.debug(`API Request: ${method} ${url}`, undefined, component);
  }

  apiError(message: string, error: any, component?: string) {
    this.error(`API Error: ${message}`, error, component);
  }

  dragDrop(action: string, blockType?: string, component?: string) {
    this.debug(`Drag & Drop: ${action}${blockType ? ` - ${blockType}` : ''}`, undefined, component);
  }

  userAction(action: string, data?: any, component?: string) {
    this.info(`User Action: ${action}`, data, component);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  getLogs(level?: LogLevel): LogEntry[] {
    return level ? this.logs.filter(log => log.level === level) : this.logs;
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏
  clearLogs() {
    this.logs = [];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å
export const logger = new FrontendLogger();

// –£–¥–æ–±–Ω—ã–µ –∞–ª–∏–∞—Å—ã
export const log = logger;
export default logger; 