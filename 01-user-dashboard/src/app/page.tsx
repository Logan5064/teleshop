'use client';

import React, { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { 
  BoltIcon, 
  EyeIcon, 
  UserGroupIcon,
  ShoppingBagIcon,
  CurrencyDollarIcon,
  PlayIcon,
  StopIcon,
  PlusIcon,
  SparklesIcon,
  CubeIcon,
  ChartBarIcon,
  Cog6ToothIcon,
  GlobeAltIcon
} from '@heroicons/react/24/outline'
import { botsApi } from '@/services/bots'
import { analyticsApi } from '@/services/analytics'
import Sidebar from '@/components/Sidebar'
import { AddBotModal } from '@/components/AddBotModal'
import LoadingAnimation from '@/components/LoadingAnimation'
import Link from 'next/link'
import { FEATURES, API_CONFIG } from '@/lib/config'

interface DashboardStats {
  totalBots: number
  activeBots: number
  totalUsers: number
  todayOrders: number
  totalRevenue: number
}

interface BotStatus {
  id: number
  shop_name: string
  is_active: boolean
  created_at: string
  bot_username?: string
  description?: string
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ç—É–Ω–Ω–µ–ª—è
const TunnelIndicator = () => {
  if (!API_CONFIG.IS_TUNNELED) return null;

  const copyUrl = () => {
    navigator.clipboard.writeText(API_CONFIG.TUNNEL_URL || '');
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      className="mb-6 bg-gradient-to-r from-green-500 to-blue-500 rounded-lg p-4 text-white shadow-lg"
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <GlobeAltIcon className="w-6 h-6" />
          <div>
            <h3 className="font-semibold">üåê –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω</h3>
            <p className="text-sm opacity-90">
              –í–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: <strong>{API_CONFIG.TUNNEL_URL}</strong>
            </p>
            <p className="text-xs opacity-75 mt-1">
              –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–æ–π —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ TeleShop Constructor
            </p>
          </div>
        </div>
        <button
          onClick={copyUrl}
          className="bg-white/20 hover:bg-white/30 px-4 py-2 rounded-lg text-sm font-medium transition-colors"
        >
          üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL
        </button>
      </div>
    </motion.div>
  );
};

export default function Dashboard() {
  const [stats, setStats] = useState<DashboardStats>({
    totalBots: 0,
    activeBots: 0,
    totalUsers: 0,
    todayOrders: 0,
    totalRevenue: 0
  })
  const [bots, setBots] = useState<BotStatus[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState('')
  const [isAddBotModalOpen, setIsAddBotModalOpen] = useState(false)

  const loadDashboardData = async () => {
    try {
      setIsLoading(true)
      setError('')
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω
      const botsResponse = await botsApi.getAll()
      setBots(botsResponse)
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const activeBots = botsResponse.filter(bot => bot.is_active).length
      setStats({
        totalBots: botsResponse.length,
        activeBots: activeBots,
        totalUsers: activeBots * 15, // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 15 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        todayOrders: activeBots * 3, // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 3 –∑–∞–∫–∞–∑–∞ –≤ –¥–µ–Ω—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞  
        totalRevenue: activeBots * 1500 // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 1500‚ÇΩ –≤—ã—Ä—É—á–∫–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞
      })

    } catch (err: any) {
      console.error('Dashboard load error:', err)
      // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      if (err.response?.status === 401) {
        setError('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
        localStorage.removeItem('admin_token')
      } else {
        setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞')
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      setBots([])
      setStats({
        totalBots: 0,
        activeBots: 0,
        totalUsers: 0,
        todayOrders: 0,
        totalRevenue: 0
      })
    } finally {
      setIsLoading(false)
    }
  }

  const toggleBot = async (botId: number, isActive: boolean) => {
    try {
      // –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π API –¥–ª—è –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–æ–≤
      if (isActive) {
        await botsApi.stop(botId)
      } else {
        await botsApi.start(botId)
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞
      setBots(prev => prev.map(bot => 
        bot.id === botId ? { ...bot, is_active: !isActive } : bot
      ))
      
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const newActiveBots = isActive ? stats.activeBots - 1 : stats.activeBots + 1
      setStats(prev => ({
        ...prev,
        activeBots: newActiveBots,
        totalUsers: newActiveBots * 15,
        todayOrders: newActiveBots * 3,
        totalRevenue: newActiveBots * 1500
      }))
    } catch (err: any) {
      console.error('Bot toggle error:', err)
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ ${isActive ? '–æ—Å—Ç–∞–Ω–æ–≤–∫–µ' : '–∑–∞–ø—É—Å–∫–µ'} –±–æ—Ç–∞: ${err.message}`)
    }
  }

  const handleBotAdded = () => { loadDashboardData(); setIsAddBotModalOpen(false); }

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å—Ä–∞–∑—É –≤ useEffect
    const checkAuthAndLoad = () => {
      try {
        console.log('üîç Checking auth state...')
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å localStorage (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ SSR)
        const adminToken = typeof window !== 'undefined' ? localStorage.getItem('admin_token') : null
        const sessionToken = typeof window !== 'undefined' ? document.cookie.split('; ').find(row => row.startsWith('session_token='))?.split('=')[1] : null
        
        console.log('üîç Auth tokens:', { 
          adminToken: adminToken ? adminToken.substring(0, 20) + '...' : 'NONE',
          sessionToken: sessionToken ? sessionToken.substring(0, 20) + '...' : 'NONE'
        })
        
        // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ admin —Ç–æ–∫–µ–Ω—ã
        if (adminToken && !adminToken.startsWith('admin_')) {
          console.log('üßπ Cleaning invalid admin token')
          localStorage.removeItem('admin_token')
        }
        
        const validAdminToken = adminToken && adminToken.startsWith('admin_')
        const validSessionToken = sessionToken && sessionToken.length > 10
        
        if (!validAdminToken && !validSessionToken) {
          console.log('‚ùå No valid tokens found - redirecting to login')
          // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤, –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –ù–ï –¥–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å—ã
          setError('–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
          setBots([])
          setStats({
            totalBots: 0,
            activeBots: 0,
            totalUsers: 0,
            todayOrders: 0,
            totalRevenue: 0
          })
          setIsLoading(false)
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –µ—Å–ª–∏ middleware –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
          setTimeout(() => {
            console.log('üîÑ Forcing redirect to login')
            window.location.href = '/login'
          }, 1000)
          
          return
        }
        
        console.log('‚úÖ Valid tokens found - loading dashboard data')
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        loadDashboardData()
      } catch (err) {
        console.error('Auth check error:', err)
        setError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')
        setIsLoading(false)
      }
    }

    checkAuthAndLoad()
  }, [])

  if (isLoading) {
    return <LoadingAnimation />
  }

  return (
    <div className="ts-page-bg">
      <div className="flex h-screen">
        <Sidebar />
        <main className="ts-main-content">
          <div className="ts-container">
            {/* Error Message */}
            {error && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                className="mb-8 bg-red-50 border border-red-200 rounded-xl p-4"
              >
                <p className="text-red-700 font-medium">{error}</p>
                <div className="flex gap-4 mt-3">
                  {error.includes('–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏') || error.includes('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞') ? (
                    <Link 
                      href="/login"
                      className="text-red-600 underline text-sm hover:text-red-800 font-medium"
                    >
                      –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
                    </Link>
                  ) : (
                    <button 
                      onClick={loadDashboardData}
                      className="text-red-600 underline text-sm hover:text-red-800 font-medium"
                    >
                      –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                  )}
                </div>
              </motion.div>
            )}

            {/* Tunnel Indicator */}
            <TunnelIndicator />

            {/* Stats Grid */}
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8 mb-12 w-full">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.1 }}
                whileHover={{ y: -2 }}
                className="bg-white/95 backdrop-blur-sm rounded-2xl p-8 border border-gray-300/60 hover:border-gray-400/70 transition-all duration-300 shadow-sm hover:shadow-md"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-semibold text-gray-600 mb-2 tracking-wide">–í—Å–µ–≥–æ –±–æ—Ç–æ–≤</p>
                    <p className="text-3xl font-semibold text-gray-800 tracking-tight">{stats.totalBots}</p>
                    <p className="text-xs text-gray-500 mt-2 font-medium">
                      {stats.totalBots === 0 ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞' : '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã'}
                    </p>
                  </div>
                  <div className="w-14 h-14 bg-gray-200/80 rounded-2xl flex items-center justify-center border border-gray-300/50">
                    <BoltIcon className="w-7 h-7 text-gray-600" />
                  </div>
                </div>
              </motion.div>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.2 }}
                whileHover={{ y: -2 }}
                className="bg-white/95 backdrop-blur-sm rounded-2xl p-8 border border-gray-300/60 hover:border-gray-400/70 transition-all duration-300 shadow-sm hover:shadow-md"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-semibold text-gray-600 mb-2 tracking-wide">–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤</p>
                    <p className="text-3xl font-semibold text-gray-800 tracking-tight">{stats.activeBots}</p>
                    <p className="text-xs text-emerald-600 mt-2 font-medium">
                      {stats.totalBots > 0 ? `${Math.round((stats.activeBots / stats.totalBots) * 100)}% –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å` : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö'}
                    </p>
                  </div>
                  <div className="w-14 h-14 bg-emerald-100/80 rounded-2xl flex items-center justify-center border border-emerald-300/50">
                    <PlayIcon className="w-7 h-7 text-emerald-600" />
                  </div>
                </div>
              </motion.div>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
                whileHover={{ y: -2 }}
                className="bg-white/95 backdrop-blur-sm rounded-2xl p-8 border border-gray-300/60 hover:border-gray-400/70 transition-all duration-300 shadow-sm hover:shadow-md"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-semibold text-gray-600 mb-2 tracking-wide">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                    <p className="text-3xl font-semibold text-gray-800 tracking-tight">{stats.totalUsers.toLocaleString()}</p>
                    <p className="text-xs text-gray-500 mt-2 font-medium">–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –±–æ—Ç–æ–≤</p>
                  </div>
                  <div className="w-14 h-14 bg-violet-100/80 rounded-2xl flex items-center justify-center border border-violet-300/50">
                    <UserGroupIcon className="w-7 h-7 text-violet-600" />
                  </div>
                </div>
              </motion.div>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.4 }}
                whileHover={{ y: -2 }}
                className="bg-white/95 backdrop-blur-sm rounded-2xl p-8 border border-gray-300/60 hover:border-gray-400/70 transition-all duration-300 shadow-sm hover:shadow-md"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-semibold text-gray-600 mb-2 tracking-wide">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è</p>
                    <p className="text-3xl font-semibold text-gray-800 tracking-tight">{stats.todayOrders}</p>
                    <p className="text-xs text-gray-500 mt-2 font-medium">–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è</p>
                  </div>
                  <div className="w-14 h-14 bg-orange-100/80 rounded-2xl flex items-center justify-center border border-orange-300/50">
                    <EyeIcon className="w-7 h-7 text-orange-600" />
                  </div>
                </div>
              </motion.div>
            </div>

            {/* Main Content Grid */}
            <div className="grid grid-cols-1 xl:grid-cols-3 gap-8 w-full max-w-none">
              {/* Bots Management */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.5 }}
                className="xl:col-span-2 bg-white/95 backdrop-blur-sm rounded-2xl p-8 border border-gray-300/60 w-full shadow-sm"
              >
                <div className="flex items-center justify-between mb-8">
                  <h2 className="text-2xl font-semibold text-gray-800 tracking-tight">–í–∞—à–∏ –±–æ—Ç—ã</h2>
                  <button
                    onClick={() => setIsAddBotModalOpen(true)}
                    className="inline-flex items-center gap-3 px-6 py-3 bg-gray-700 text-white rounded-xl font-medium hover:bg-gray-800 transition-all duration-200 shadow-sm hover:shadow-md"
                  >
                    <PlusIcon className="w-4 h-4" />
                    –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
                  </button>
                </div>

                {bots.length === 0 ? (
                  <div className="text-center py-12">
                    <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                      <BoltIcon className="w-8 h-8 text-gray-400" />
                    </div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-2">–ù–µ—Ç –±–æ—Ç–æ–≤</h3>
                    <p className="text-gray-600 mb-6">–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ Telegram –±–æ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã</p>
                    <button
                      onClick={() => setIsAddBotModalOpen(true)}
                      className="inline-flex items-center gap-2 px-6 py-3 bg-gray-700 text-white rounded-xl font-medium hover:bg-gray-800 transition-all duration-200"
                    >
                      <PlusIcon className="w-4 h-4" />
                      –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
                    </button>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {bots.map((bot, index) => (
                      <motion.div
                        key={bot.id}
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: 0.1 * index }}
                        whileHover={{ y: -1 }}
                        className="flex items-center justify-between p-6 bg-gray-100/70 rounded-2xl border border-gray-300/60 hover:border-gray-400/70 transition-all duration-200 backdrop-blur-sm"
                      >
                        <div className="flex items-center gap-4 flex-1">
                          <div className="relative flex-shrink-0">
                            <div className={`w-3 h-3 rounded-full ${bot.is_active ? 'bg-emerald-500' : 'bg-gray-400'}`}></div>
                          </div>
                          <div className="flex-1 min-w-0">
                            <h3 className="font-semibold text-gray-800 truncate text-lg tracking-tight">{bot.shop_name}</h3>
                            <p className="text-sm text-gray-600 font-medium">
                              {bot.bot_username ? `@${bot.bot_username}` : '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ username'} ‚Ä¢ {new Date(bot.created_at).toLocaleDateString('ru-RU')}
                            </p>
                            {bot.description && (
                              <p className="text-xs text-gray-500 mt-1 truncate">{bot.description}</p>
                            )}
                          </div>
                        </div>
                        
                        <button
                          onClick={() => toggleBot(bot.id, bot.is_active)}
                          className={`px-4 py-2 rounded-xl text-sm font-semibold transition-all duration-200 flex-shrink-0 ml-4 border ${
                            bot.is_active
                              ? 'bg-red-100/80 text-red-700 hover:bg-red-200/80 border-red-300/60'
                              : 'bg-emerald-100/80 text-emerald-700 hover:bg-emerald-200/80 border-emerald-300/60'
                          }`}
                        >
                          {bot.is_active ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å'}
                        </button>
                      </motion.div>
                    ))}
                  </div>
                )}
              </motion.div>

              {/* Quick Actions */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.6 }}
                className="bg-white/95 backdrop-blur-sm rounded-2xl p-8 border border-gray-300/60 shadow-sm"
              >
                <h2 className="text-2xl font-semibold text-gray-800 mb-8 tracking-tight">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
                
                <div className="space-y-4">
                  <Link
                    href="http://77.73.232.46:3001/constructor"
                    target="_blank"
                    className="block p-6 bg-gray-700 text-white rounded-2xl hover:bg-gray-800 transition-all duration-200 group shadow-sm hover:shadow-md"
                  >
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-white/20 rounded-2xl flex items-center justify-center flex-shrink-0 border border-white/30">
                        <SparklesIcon className="w-6 h-6" />
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold text-lg tracking-tight">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä</div>
                        <div className="text-sm opacity-90 font-medium">–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –º–∞–≥–∞–∑–∏–Ω–∞</div>
                      </div>
                    </div>
                  </Link>

                  <Link
                    href="/bots"
                    className="block p-6 bg-gray-100/70 hover:bg-gray-200/80 rounded-2xl transition-all duration-200 border border-gray-300/60 hover:border-gray-400/70 backdrop-blur-sm"
                  >
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-blue-100/80 rounded-2xl flex items-center justify-center flex-shrink-0 border border-blue-300/50">
                        <ShoppingBagIcon className="w-6 h-6 text-blue-600" />
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold text-gray-800 text-lg tracking-tight">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞–º–∏</div>
                        <div className="text-sm text-gray-600 font-medium">–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</div>
                      </div>
                    </div>
                  </Link>

                  <Link
                    href="/products"
                    className="block p-6 bg-gray-100/70 hover:bg-gray-200/80 rounded-2xl transition-all duration-200 border border-gray-300/60 hover:border-gray-400/70 backdrop-blur-sm"
                  >
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-emerald-100/80 rounded-2xl flex items-center justify-center flex-shrink-0 border border-emerald-300/50">
                        <CubeIcon className="w-6 h-6 text-emerald-600" />
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold text-gray-800 text-lg tracking-tight">–¢–æ–≤–∞—Ä—ã</div>
                        <div className="text-sm text-gray-600 font-medium">–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥</div>
                      </div>
                    </div>
                  </Link>

                  <Link
                    href="/design-showcase"
                    className="block p-6 bg-gradient-to-br from-pink-100/80 to-purple-100/80 hover:from-pink-200/80 hover:to-purple-200/80 rounded-2xl transition-all duration-200 border border-pink-300/60 hover:border-purple-400/70 backdrop-blur-sm"
                  >
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-gradient-to-r from-pink-500 to-purple-500 rounded-2xl flex items-center justify-center flex-shrink-0 text-white shadow-sm">
                        <span className="text-lg">üé®</span>
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold text-gray-800 text-lg tracking-tight">–í–∏—Ç—Ä–∏–Ω–∞ –î–∏–∑–∞–π–Ω–∞</div>
                        <div className="text-sm text-gray-600 font-medium">–ì–∞–ª–µ—Ä–µ—è UI —Å—Ç–∏–ª–µ–π</div>
                      </div>
                    </div>
                  </Link>

                  <Link
                    href="/blocks-library"
                    className="block p-6 bg-gradient-to-br from-blue-100/80 to-cyan-100/80 hover:from-blue-200/80 hover:to-cyan-200/80 rounded-2xl transition-all duration-200 border border-blue-300/60 hover:border-cyan-400/70 backdrop-blur-sm"
                  >
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-cyan-500 rounded-2xl flex items-center justify-center flex-shrink-0 text-white shadow-sm">
                        <span className="text-lg">üì±</span>
                      </div>
                      <div className="flex-1">
                        <div className="font-semibold text-gray-800 text-lg tracking-tight">–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ë–ª–æ–∫–æ–≤</div>
                        <div className="text-sm text-gray-600 font-medium">100+ –≥–æ—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤</div>
                      </div>
                    </div>
                  </Link>
                </div>
              </motion.div>
            </div>
          </div>
        </main>

        {/* Add Bot Modal */}
        <AddBotModal
          isOpen={isAddBotModalOpen}
          onClose={() => setIsAddBotModalOpen(false)}
          onSuccess={handleBotAdded}
        />
      </div>
    </div>
  )
}

