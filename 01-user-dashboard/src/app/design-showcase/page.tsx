'use client'

import React, { useState } from 'react'
import { Copy, Check } from 'lucide-react'

// –ò–ú–ü–û–†–¢–´ –î–ê–ù–ù–´–• –ò–ó –ú–û–î–£–õ–¨–ù–´–• –§–ê–ô–õ–û–í
import { categories } from './data/categories'
import { layoutSystemData } from './data/layoutSystemData'
import { typographySystemData } from './data/typographySystemData'
import { iconSystemData } from './data/iconSystemData'
import { navigationSystemData } from './data/navigationSystemData'
import { advancedEffectsData } from './data/advancedEffectsData'
import { styleRecipes } from './data/styleRecipes'
import { buttonStyles } from './data/buttonStyles'
import { cardStyles } from './data/cardStyles'
import { typographyStyles } from './data/typographyStyles'
import { navigationStyles } from './data/navigationStyles'
import { formStyles } from './data/formStyles'
import { animationStyles } from './data/animationStyles'
import { glassmorphismData } from './data/glassmorphismData'
import { colorSchemes } from './data/colorSchemes'
import { modernUITrends } from './data/modernUITrends'

export default function DesignShowcase() {
  const [selectedCategory, setSelectedCategory] = useState('style-recipes')
  const [copiedCode, setCopiedCode] = useState<string | null>(null)
  const [selectedStyle, setSelectedStyle] = useState<string>('')
  const [showModal, setShowModal] = useState(false)

  const copyToClipboard = (code: string, name: string) => {
    navigator.clipboard.writeText(code)
    setCopiedCode(name)
    setTimeout(() => setCopiedCode(null), 2000)
  }

  const renderCategory = () => {
    switch (selectedCategory) {
      case 'style-recipes':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üß™ –†–µ—Ü–µ–ø—Ç—ã —Å—Ç–∏–ª–µ–π TeleShop</h2>
              <p className="text-gray-600">–ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ CSS –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</p>
            </div>
            
            {/* –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú */}
            {['–ö–Ω–æ–ø–∫–∏', '–ö–∞—Ä—Ç–æ—á–∫–∏', '–§–æ—Ä–º—ã', '–£—Ç–∏–ª–∏—Ç—ã', '–ê–Ω–∏–º–∞—Ü–∏–∏'].map(category => (
              <div key={category} className="mb-12">
                <h3 className="text-2xl font-bold mb-6 text-gray-800">{category}</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {styleRecipes
                    .filter(recipe => recipe.category === category)
                    .map((recipe, index) => (
                      <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                        <div className="flex justify-between items-start mb-4">
                          <div>
                            <h4 className="font-bold text-lg">{recipe.name}</h4>
                            <p className="text-sm text-gray-600 mt-1">{recipe.description}</p>
                          </div>
                          <button
                            onClick={() => copyToClipboard(recipe.code, recipe.name)}
                            className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                          >
                            {copiedCode === recipe.name ? <Check size={16} /> : <Copy size={16} />}
                          </button>
                        </div>
                        <div className="mb-4">
                          {recipe.component}
                        </div>
                        <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                          {recipe.code}
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            ))}
          </div>
        )

      case 'glassmorphism-showcase':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üîÆ Glassmorphism –í–∏—Ç—Ä–∏–Ω–∞</h2>
              <p className="text-gray-600">–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å—Ç–µ–∫–ª—è–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º —Ñ–æ–Ω–∞ –∏ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é</p>
            </div>
            
            {/* –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú */}
            {['–§–æ–Ω—ã', '–ö–∞—Ä—Ç–æ—á–∫–∏', '–ù–∞–≤–∏–≥–∞—Ü–∏—è', '–§–æ—Ä–º—ã', '–ò–∫–æ–Ω–∫–∏', '–ö–Ω–æ–ø–∫–∏', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'].map(category => (
              <div key={category} className="mb-12">
                <h3 className="text-2xl font-bold mb-6 text-gray-800">{category}</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {glassmorphismData
                    .filter(item => item.category === category)
                    .map((item, index) => (
                      <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                        <div className="flex justify-between items-start mb-4">
                          <div>
                            <h4 className="font-bold text-lg">{item.name}</h4>
                            <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                          </div>
                          <button
                            onClick={() => copyToClipboard(item.code, item.name)}
                            className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                          >
                            {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                          </button>
                        </div>
                        <div className="mb-4">
                          {item.component}
                        </div>
                        <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                          {item.code}
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            ))}
          </div>
        )

      case 'layout-system':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üèóÔ∏è Layout System</h2>
              <p className="text-gray-600">–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {layoutSystemData.map((item, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-lg">{item.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                    </div>
                    <button
                      onClick={() => copyToClipboard(item.code, item.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {item.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                    {item.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'typography-system':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üìù Typography System</h2>
              <p className="text-gray-600">–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {typographySystemData.map((item, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-lg">{item.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                    </div>
                    <button
                      onClick={() => copyToClipboard(item.code, item.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {item.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                    {item.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'icon-system':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üéØ Icon System</h2>
              <p className="text-gray-600">–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫ –∏ –∞–≤–∞—Ç–∞—Ä–æ–≤</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {iconSystemData.map((item, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-lg">{item.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                    </div>
                    <button
                      onClick={() => copyToClipboard(item.code, item.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {item.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                    {item.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'navigation-system':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üß≠ Navigation System</h2>
              <p className="text-gray-600">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {navigationSystemData.map((item, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-lg">{item.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                    </div>
                    <button
                      onClick={() => copyToClipboard(item.code, item.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {item.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                    {item.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'advanced-effects':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">‚ú® Advanced Effects</h2>
              <p className="text-gray-600">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {advancedEffectsData.map((item, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-lg">{item.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                    </div>
                    <button
                      onClick={() => copyToClipboard(item.code, item.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {item.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                    {item.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'buttons':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üî≤ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–Ω–æ–ø–æ–∫</h2>
              <p className="text-gray-600">–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {buttonStyles.map((button, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <h4 className="font-bold text-lg">{button.name}</h4>
                    <button
                      onClick={() => copyToClipboard(button.code, button.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === button.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4 flex justify-center">
                    {button.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700 break-all">
                    {button.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'cards':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">ü™ü –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫</h2>
              <p className="text-gray-600">–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {cardStyles.map((card, index) => (
                <div key={index} className="bg-gray-50 rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <h4 className="font-bold text-lg">{card.name}</h4>
                    <button
                      onClick={() => copyToClipboard(card.code, card.name)}
                      className="p-2 rounded-lg bg-white hover:bg-gray-100 transition-colors"
                    >
                      {copiedCode === card.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {card.component}
                  </div>
                  <div className="text-xs bg-white p-3 rounded-lg font-mono text-gray-700 break-all">
                    {card.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'colors':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üé® –¶–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã</h2>
              <p className="text-gray-600">–ì–æ—Ç–æ–≤—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–∞–ª–∏—Ç—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {colorSchemes.map((scheme, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border p-6">
                  <h3 className="text-lg font-bold text-gray-800 mb-2">{scheme.name}</h3>
                  <p className="text-sm text-gray-600 mb-4">{scheme.description}</p>
                  
                  <div className="flex space-x-1 mb-4">
                    {scheme.colors.map((color, colorIndex) => (
                      <div key={colorIndex} className={`w-8 h-8 rounded ${color} border border-gray-200`}></div>
                    ))}
                  </div>
                  
                  <button
                    onClick={() => setSelectedStyle(scheme.name)}
                    className={`w-full px-4 py-2 rounded-lg font-medium transition-colors ${scheme.primary} text-white hover:opacity-80`}
                  >
                    –í—ã–±—Ä–∞—Ç—å —Å—Ö–µ–º—É
                  </button>
                </div>
              ))}
            </div>
          </div>
        )

      case 'animations':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">‚ú® –ê–Ω–∏–º–∞—Ü–∏–∏</h2>
              <p className="text-gray-600">–ö–æ–ª–ª–µ–∫—Ü–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {animationStyles.map((style, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-bold text-gray-800">{style.name}</h3>
                    <button
                      onClick={() => copyToClipboard(style.code, style.name)}
                      className="text-gray-500 hover:text-blue-500 transition-colors"
                    >
                      {copiedCode === style.name ? <Check className="w-5 h-5 text-green-500" /> : <Copy className="w-5 h-5" />}
                    </button>
                  </div>
                  
                  <div className="flex items-center justify-center p-8 bg-gray-50 rounded-lg mb-4">
                    {style.component}
                  </div>
                  
                  <div className="bg-gray-100 rounded-lg p-3">
                    <code className="text-xs text-gray-700 break-all">{style.code}</code>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'typography':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üî§ –¢–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞</h2>
              <p className="text-gray-600">–°—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö —Å–ª—É—á–∞–µ–≤</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {typographyStyles.map((style, index) => (
                <div key={index} className="bg-gray-50 rounded-xl p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-bold text-gray-800">{style.name}</h3>
                    <button
                      onClick={() => copyToClipboard(style.code, style.name)}
                      className="text-gray-500 hover:text-blue-500 transition-colors"
                    >
                      {copiedCode === style.name ? <Check className="w-5 h-5 text-green-500" /> : <Copy className="w-5 h-5" />}
                    </button>
                  </div>
                  
                  <div className="mb-4">
                    {style.component}
                  </div>
                  
                  <div className="bg-white rounded-lg p-3">
                    <code className="text-xs text-gray-700 break-all">{style.code}</code>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'navigation':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è</h2>
              <p className="text-gray-600">–≠–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –º–µ–Ω—é</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {navigationStyles.map((style, index) => (
                <div key={index} className="bg-gray-50 rounded-xl p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-bold text-gray-800">{style.name}</h3>
                    <button
                      onClick={() => copyToClipboard(style.code, style.name)}
                      className="text-gray-500 hover:text-blue-500 transition-colors"
                    >
                      {copiedCode === style.name ? <Check className="w-5 h-5 text-green-500" /> : <Copy className="w-5 h-5" />}
                    </button>
                  </div>
                  
                  <div className="mb-4">
                    {style.component}
                  </div>
                  
                  <div className="bg-white rounded-lg p-3">
                    <code className="text-xs text-gray-700 break-all">{style.code}</code>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'forms':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üìù –§–æ—Ä–º—ã</h2>
              <p className="text-gray-600">–°—Ç–∏–ª–∏ –¥–ª—è —Ñ–æ—Ä–º –∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {formStyles.map((style, index) => (
                <div key={index} className="bg-gray-50 rounded-xl p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-bold text-gray-800">{style.name}</h3>
                    <button
                      onClick={() => copyToClipboard(style.code, style.name)}
                      className="text-gray-500 hover:text-blue-500 transition-colors"
                    >
                      {copiedCode === style.name ? <Check className="w-5 h-5 text-green-500" /> : <Copy className="w-5 h-5" />}
                    </button>
                  </div>
                  
                  <div className="mb-4">
                    {style.component}
                  </div>
                  
                  <div className="bg-white rounded-lg p-3">
                    <code className="text-xs text-gray-700 break-all">{style.code}</code>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'modals':
        return (
          <div className="space-y-6">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üñºÔ∏è –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞</h2>
              <p className="text-gray-600">–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω</p>
            </div>

            <div className="bg-white rounded-xl shadow-sm border p-6">
              <h3 className="text-lg font-bold text-gray-800 mb-4">–î–µ–º–æ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <button
                  onClick={() => setShowModal(true)}
                  className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg font-medium transition-colors"
                >
                  –ü—Ä–æ—Å—Ç–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                </button>
                
                <button className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-4 py-2 rounded-lg font-medium">
                  –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–µ –æ–∫–Ω–æ
                </button>
                
                <button className="backdrop-blur-md bg-white/20 border border-white/30 text-gray-800 px-4 py-2 rounded-lg font-medium">
                  –°—Ç–µ–∫–ª—è–Ω–Ω–æ–µ –æ–∫–Ω–æ
                </button>
              </div>
              
              {showModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50" onClick={() => setShowModal(false)}>
                  <div className="bg-white rounded-xl p-6 max-w-md mx-4 shadow-2xl" onClick={e => e.stopPropagation()}>
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-xl font-bold">–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ</h3>
                      <button onClick={() => setShowModal(false)} className="text-gray-500 hover:text-gray-700">
                        ‚úï
                      </button>
                    </div>
                    
                    <p className="text-gray-600 mb-6">
                      –≠—Ç–æ –ø—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º.
                    </p>
                    
                    <div className="flex space-x-3">
                      <button 
                        onClick={() => setShowModal(false)}
                        className="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg font-medium transition-colors"
                      >
                        –ü—Ä–∏–Ω—è—Ç—å
                      </button>
                      <button 
                        onClick={() => setShowModal(false)}
                        className="flex-1 bg-gray-200 hover:bg-gray-300 text-gray-800 py-2 rounded-lg font-medium transition-colors"
                      >
                        –û—Ç–º–µ–Ω–∞
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>
        )

      case 'modern-ui-trends':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ UI –¢—Ä–µ–Ω–¥—ã</h2>
              <p className="text-gray-600">–ö–æ–ª–ª–µ–∫—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö UI –ø–æ–¥—Ö–æ–¥–æ–≤: –º–∏–Ω–∏–º–∞–ª–∏–∑–º, –Ω–µ–æ–º–æ—Ä—Ñ–∏–∑–º, –≥–ª–∞—Å—Å–º–æ—Ä—Ñ–∏–∑–º, –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –∏ –∞–Ω–∏–º–∞—Ü–∏–∏</p>
            </div>
            
            {/* –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú */}
            {modernUITrends.map(trend => (
              <div key={trend.category} className="mb-12">
                <h3 className="text-2xl font-bold mb-6 text-gray-800">{trend.category}</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {trend.items.map((item, index) => (
                    <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                      <div className="flex justify-between items-start mb-4">
                        <div>
                          <h4 className="font-bold text-lg">{item.name}</h4>
                          <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                        </div>
                        <button
                          onClick={() => copyToClipboard(item.code, item.name)}
                          className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                        >
                          {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                        </button>
                      </div>
                      <div className="mb-4">
                        {item.component}
                      </div>
                      <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                        {item.code}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
        )

      default:
        return (
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold mb-4">üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h2>
            <p className="text-gray-600">–≠—Ç–∞ —Å–µ–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</p>
          </div>
        )
    }
  }

  return (
    <div className="ts-page-bg min-h-screen">
      <div className="ts-container max-w-7xl mx-auto px-4 py-8">
        {/* –®–ê–ü–ö–ê */}
        <div className="text-center mb-12">
          <h1 className="ts-title-main mb-4">üé® TeleShop Design Showcase</h1>
          <p className="ts-text-body max-w-2xl mx-auto">
            –í–∏—Ç—Ä–∏–Ω–∞ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã TeleShop Constructor —Å –≥–æ—Ç–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, —Å—Ç–∏–ª—è–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
          </p>
        </div>

        {/* –ù–ê–í–ò–ì–ê–¶–ò–Ø */}
        <div className="ts-card mb-8">
          <div className="p-6">
            <div className="flex flex-wrap gap-2 justify-center">
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`ts-nav-item ${
                    selectedCategory === category.id ? 'ts-nav-item-active' : 'ts-nav-item-inactive'
                  }`}
                >
                  <span className="mr-2">{category.icon}</span>
                  {category.name}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* –ö–û–ù–¢–ï–ù–¢ */}
        <div className="ts-spacing-section">
          {renderCategory()}
        </div>
      </div>
    </div>
  )
} 