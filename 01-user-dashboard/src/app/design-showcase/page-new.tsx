'use client'

import React, { useState } from 'react'
import { 
  Copy, Check, Play, Heart, ShoppingCart, User, Settings,
  Star, Zap, Gift, Download, Share2, Plus, Minus, X,
  Eye, EyeOff, Search, Filter, Menu, Bell, Home
} from 'lucide-react'

// –ò–ú–ü–û–†–¢–´ –î–ê–ù–ù–´–• –ò–ó –ú–û–î–£–õ–¨–ù–´–• –§–ê–ô–õ–û–í
import { categories } from './data/categories'
import { layoutSystemData } from './data/layoutSystemData'
import { typographySystemData } from './data/typographySystemData'
import { iconSystemData } from './data/iconSystemData'
import { navigationSystemData } from './data/navigationSystemData'
import { advancedEffectsData } from './data/advancedEffectsData'
import { gridSpacingData } from './data/gridSpacingData'
import { statusData } from './data/statusData'
import { styleRecipes } from './data/styleRecipes'
import { buttonStyles } from './data/buttonStyles'
import { cardStyles } from './data/cardStyles'
// import { animationStyles } from './data/animationStyles' // –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø–æ–∑–∂–µ

export default function DesignShowcase() {
  const [selectedCategory, setSelectedCategory] = useState('style-recipes')
  const [copiedCode, setCopiedCode] = useState<string | null>(null)
  const [selectedStyle, setSelectedStyle] = useState<string>('')
  const [showModal, setShowModal] = useState(false)

  const copyToClipboard = (code: string, name: string) => {
    navigator.clipboard.writeText(code)
    setCopiedCode(name)
    setTimeout(() => setCopiedCode(null), 2000)
  }

  const renderCategory = () => {
    switch (selectedCategory) {
      case 'style-recipes':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üß™ –†–µ—Ü–µ–ø—Ç—ã —Å—Ç–∏–ª–µ–π TeleShop</h2>
              <p className="text-gray-600">–ì–æ—Ç–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ CSS –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</p>
            </div>
            
            {/* –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú */}
            {['–ö–Ω–æ–ø–∫–∏', '–ö–∞—Ä—Ç–æ—á–∫–∏', '–§–æ—Ä–º—ã', '–£—Ç–∏–ª–∏—Ç—ã', '–ê–Ω–∏–º–∞—Ü–∏–∏'].map(category => (
              <div key={category} className="mb-12">
                <h3 className="text-2xl font-bold mb-6 text-gray-800">{category}</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {styleRecipes
                    .filter(recipe => recipe.category === category)
                    .map((recipe, index) => (
                      <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                        <div className="flex justify-between items-start mb-4">
                          <div>
                            <h4 className="font-bold text-lg">{recipe.name}</h4>
                            <p className="text-sm text-gray-600 mt-1">{recipe.description}</p>
                          </div>
                          <button
                            onClick={() => copyToClipboard(recipe.code, recipe.name)}
                            className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                          >
                            {copiedCode === recipe.name ? <Check size={16} /> : <Copy size={16} />}
                          </button>
                        </div>
                        <div className="mb-4">
                          {recipe.component}
                        </div>
                        <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                          {recipe.code}
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            ))}
          </div>
        )

      case 'layout-system':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üèóÔ∏è Layout System</h2>
              <p className="text-gray-600">–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {layoutSystemData.map((item, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-lg">{item.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                    </div>
                    <button
                      onClick={() => copyToClipboard(item.code, item.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {item.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                    {item.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'typography-system':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üìù Typography System</h2>
              <p className="text-gray-600">–¢–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {typographySystemData.map((item, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-lg">{item.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                    </div>
                    <button
                      onClick={() => copyToClipboard(item.code, item.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {item.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                    {item.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'icon-system':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üéØ Icon System</h2>
              <p className="text-gray-600">–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫ –∏ –∞–≤–∞—Ç–∞—Ä–æ–≤</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {iconSystemData.map((item, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-lg">{item.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                    </div>
                    <button
                      onClick={() => copyToClipboard(item.code, item.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {item.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                    {item.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'navigation-system':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üß≠ Navigation System</h2>
              <p className="text-gray-600">–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {navigationSystemData.map((item, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-lg">{item.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                    </div>
                    <button
                      onClick={() => copyToClipboard(item.code, item.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {item.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                    {item.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'advanced-effects':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">‚ú® Advanced Effects</h2>
              <p className="text-gray-600">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å—Ç–∏–ª–µ–π</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {advancedEffectsData.map((item, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <div>
                      <h4 className="font-bold text-lg">{item.name}</h4>
                      <p className="text-sm text-gray-600 mt-1">{item.description}</p>
                    </div>
                    <button
                      onClick={() => copyToClipboard(item.code, item.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === item.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {item.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700">
                    {item.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'buttons':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">üî≤ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–Ω–æ–ø–æ–∫</h2>
              <p className="text-gray-600">–ö–æ–ª–ª–µ–∫—Ü–∏—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {buttonStyles.map((button, index) => (
                <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <h4 className="font-bold text-lg">{button.name}</h4>
                    <button
                      onClick={() => copyToClipboard(button.code, button.name)}
                      className="p-2 rounded-lg bg-gray-100 hover:bg-gray-200 transition-colors"
                    >
                      {copiedCode === button.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4 flex justify-center">
                    {button.component}
                  </div>
                  <div className="text-xs bg-gray-100 p-3 rounded-lg font-mono text-gray-700 break-all">
                    {button.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      case 'cards':
        return (
          <div className="space-y-8">
            <div className="text-center mb-8">
              <h2 className="text-3xl font-bold mb-4">ü™ü –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫</h2>
              <p className="text-gray-600">–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {cardStyles.map((card, index) => (
                <div key={index} className="bg-gray-50 rounded-xl shadow-sm border border-gray-200 p-6">
                  <div className="flex justify-between items-start mb-4">
                    <h4 className="font-bold text-lg">{card.name}</h4>
                    <button
                      onClick={() => copyToClipboard(card.code, card.name)}
                      className="p-2 rounded-lg bg-white hover:bg-gray-100 transition-colors"
                    >
                      {copiedCode === card.name ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  <div className="mb-4">
                    {card.component}
                  </div>
                  <div className="text-xs bg-white p-3 rounded-lg font-mono text-gray-700 break-all">
                    {card.code}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )

      default:
        return (
          <div className="text-center py-12">
            <h2 className="text-2xl font-bold mb-4">üöß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</h2>
            <p className="text-gray-600">–≠—Ç–∞ —Å–µ–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</p>
          </div>
        )
    }
  }

  return (
    <div className="ts-page-bg min-h-screen">
      <div className="ts-container max-w-7xl mx-auto px-4 py-8">
        {/* –®–ê–ü–ö–ê */}
        <div className="text-center mb-12">
          <h1 className="ts-title-main mb-4">üé® TeleShop Design Showcase</h1>
          <p className="ts-text-body max-w-2xl mx-auto">
            –í–∏—Ç—Ä–∏–Ω–∞ –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã TeleShop Constructor —Å –≥–æ—Ç–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏, —Å—Ç–∏–ª—è–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
          </p>
        </div>

        {/* –ù–ê–í–ò–ì–ê–¶–ò–Ø */}
        <div className="ts-card mb-8">
          <div className="p-6">
            <div className="flex flex-wrap gap-2 justify-center">
              {categories.map((category) => (
                <button
                  key={category.id}
                  onClick={() => setSelectedCategory(category.id)}
                  className={`ts-nav-item ${
                    selectedCategory === category.id ? 'ts-nav-item-active' : 'ts-nav-item-inactive'
                  }`}
                >
                  <span className="mr-2">{category.icon}</span>
                  {category.name}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* –ö–û–ù–¢–ï–ù–¢ */}
        <div className="ts-spacing-section">
          {renderCategory()}
        </div>
      </div>
    </div>
  )
} 