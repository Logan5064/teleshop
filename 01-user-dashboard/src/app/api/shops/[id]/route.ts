import { NextRequest, NextResponse } from 'next/server'

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–ø–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ –ë–î)
const shops = new Map<string, any>([
  ['1', {
    id: '1',
    name: '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω',
    description: '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞',
    owner_id: 'test_user',
    bot_token: 'test_token',
    is_active: true,
    created_at: new Date().toISOString()
  }]
])

export async function GET(request: NextRequest, context: { params: Promise<{ id: string }> }) {
  try {
    const params = await context.params
    const shopId = params.id
    console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞: ${shopId}`)

    let shop = shops.get(shopId)

    if (!shop) {
      // –°–æ–∑–¥–∞–µ–º –º–∞–≥–∞–∑–∏–Ω –Ω–∞ –ª–µ—Ç—É –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      shop = {
        id: shopId,
        name: `–ú–∞–≥–∞–∑–∏–Ω ${shopId}`,
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞',
        owner_id: 'demo_user',
        bot_token: 'demo_token',
        is_active: true,
        created_at: new Date().toISOString()
      }
      shops.set(shopId, shop)
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω: ${shopId}`)
    }

    return NextResponse.json(shop)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞' },
      { status: 500 }
    )
  }
} 