import { NextRequest, NextResponse } from 'next/server'

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∑–∞–π–Ω–æ–≤ (—Ç–æ –∂–µ —á—Ç–æ –≤ /api/designs/route.ts)
const designs = new Map<string, any>()

export async function GET(request: NextRequest, context: { params: Promise<{ id: string }> }) {
  try {
    const params = await context.params
    const shopId = params.id

    console.log(`üîç –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞: ${shopId}`)

    const design = designs.get(shopId)

    if (!design) {
      console.log(`‚ö†Ô∏è –î–∏–∑–∞–π–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${shopId} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return NextResponse.json(
        { error: '–î–∏–∑–∞–π–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      )
    }

    console.log(`‚úÖ –î–∏–∑–∞–π–Ω –Ω–∞–π–¥–µ–Ω –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ ${shopId}:`, {
      blocksCount: design.blocks_data?.length || 0,
      colors: {
        primary: design.primary_color,
        secondary: design.secondary_color
      }
    })

    return NextResponse.json(design)

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∑–∞–π–Ω–∞ –º–∞–≥–∞–∑–∏–Ω–∞:', error)
    return NextResponse.json(
      { error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∑–∞–π–Ω–∞' },
      { status: 500 }
    )
  }
} 