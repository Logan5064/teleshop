#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import sys
import os
from datetime import datetime

# –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
DATABASE_INFO = {
    "connection": {
        "host": "ladixoofilad.beget.app",
        "port": 5432,
        "database": "default_db", 
        "user": "cloud_user",
        "password": "u61e&ke&!Ty1"
    },
    "tables": {
        "users": {
            "count": 7,
            "structure": [
                {"name": "id", "type": "integer", "nullable": False},
                {"name": "telegram_id", "type": "varchar(50)", "nullable": False},
                {"name": "username", "type": "varchar(100)", "nullable": True},
                {"name": "first_name", "type": "varchar(100)", "nullable": True},
                {"name": "is_active", "type": "boolean", "nullable": True},
                {"name": "subscription_plan", "type": "varchar(20)", "nullable": True},
                {"name": "created_at", "type": "timestamp", "nullable": True}
            ],
            "sample_data": [
                {"id": 1, "telegram_id": "123456789", "username": "testuser", "first_name": "Test User", "is_active": True, "subscription_plan": "pro"},
                {"id": 24, "telegram_id": "test_user_123", "username": "test_user", "first_name": "Test", "is_active": True, "subscription_plan": "free"},
                {"id": 3, "telegram_id": "422752975", "username": None, "first_name": None, "is_active": True, "subscription_plan": "free"}
            ]
        },
        "shops": {
            "count": 1,
            "structure": [
                {"name": "id", "type": "integer", "nullable": False},
                {"name": "user_id", "type": "integer", "nullable": False},
                {"name": "name", "type": "varchar(255)", "nullable": False},
                {"name": "description", "type": "text", "nullable": True},
                {"name": "is_published", "type": "boolean", "nullable": True},
                {"name": "currency", "type": "varchar(10)", "nullable": True},
                {"name": "created_at", "type": "timestamp", "nullable": True}
            ],
            "sample_data": [
                {"id": 1, "user_id": 1, "name": "–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω", "description": "–î–µ–º–æ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", "is_published": True, "currency": "RUB"}
            ]
        },
        "products": {
            "count": 3,
            "structure": [
                {"name": "id", "type": "integer", "nullable": False},
                {"name": "shop_id", "type": "integer", "nullable": False},
                {"name": "name", "type": "varchar(255)", "nullable": False},
                {"name": "description", "type": "text", "nullable": True},
                {"name": "price", "type": "numeric", "nullable": False},
                {"name": "is_available", "type": "boolean", "nullable": True}
            ],
            "sample_data": [
                {"id": 1, "shop_id": 1, "name": "iPhone 15", "description": "–ù–æ–≤–µ–π—à–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple", "price": "99999.00", "is_available": True},
                {"id": 2, "shop_id": 1, "name": "–§—É—Ç–±–æ–ª–∫–∞", "description": "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ö–ª–æ–ø–∫–æ–≤–∞—è —Ñ—É—Ç–±–æ–ª–∫–∞", "price": "1999.00", "is_available": True},
                {"id": 3, "shop_id": 1, "name": "–ö–Ω–∏–≥–∞ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é", "description": "–ò–∑—É—á–µ–Ω–∏–µ Python", "price": "2499.00", "is_available": True}
            ]
        },
        "shop_categories": {
            "count": 3,
            "structure": [
                {"name": "id", "type": "integer", "nullable": False},
                {"name": "shop_id", "type": "integer", "nullable": False},
                {"name": "name", "type": "varchar(255)", "nullable": False},
                {"name": "emoji", "type": "varchar(10)", "nullable": True},
                {"name": "position", "type": "integer", "nullable": True},
                {"name": "is_active", "type": "boolean", "nullable": True}
            ],
            "sample_data": [
                {"id": 1, "shop_id": 1, "name": "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "emoji": "üì±", "position": 1, "is_active": True},
                {"id": 2, "shop_id": 1, "name": "–û–¥–µ–∂–¥–∞", "emoji": "üëï", "position": 2, "is_active": True},
                {"id": 3, "shop_id": 1, "name": "–ö–Ω–∏–≥–∏", "emoji": "üìö", "position": 3, "is_active": True}
            ]
        },
        "subscription_plans": {
            "count": 3,
            "structure": [
                {"name": "id", "type": "integer", "nullable": False},
                {"name": "name", "type": "varchar(100)", "nullable": False},
                {"name": "description", "type": "text", "nullable": True},
                {"name": "price", "type": "numeric", "nullable": False},
                {"name": "max_shops", "type": "integer", "nullable": True},
                {"name": "max_products", "type": "integer", "nullable": True}
            ],
            "sample_data": [
                {"id": 1, "name": "Free", "description": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω", "price": "0.00", "max_shops": 1, "max_products": 10},
                {"id": 2, "name": "Pro", "description": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω", "price": "990.00", "max_shops": 5, "max_products": -1},
                {"id": 3, "name": "Enterprise", "description": "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω", "price": "2990.00", "max_shops": -1, "max_products": -1}
            ]
        },
        "user_sessions": {
            "count": 1,
            "structure": [
                {"name": "id", "type": "integer", "nullable": False},
                {"name": "session_token", "type": "varchar(64)", "nullable": False},
                {"name": "user_id", "type": "integer", "nullable": False},
                {"name": "telegram_id", "type": "varchar(50)", "nullable": False},
                {"name": "created_at", "type": "timestamp", "nullable": False},
                {"name": "expires_at", "type": "timestamp", "nullable": False},
                {"name": "is_active", "type": "boolean", "nullable": True}
            ],
            "sample_data": [
                {"id": 24, "session_token": "f899bc54e5deb6147e262187e5d36201b3d5c64b0c2856a560e15ae4e99630d7", "user_id": 3, "telegram_id": "422752975", "is_active": True}
            ]
        }
    }
}

class SimpleDBAdmin:
    def __init__(self):
        self.data = DATABASE_INFO
    
    def show_menu(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        print("\n" + "="*80)
        print("üóÑÔ∏è  –¢–ï–õ–ï–®–û–ü - –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ –ë–ê–ó–´ –î–ê–ù–ù–´–• (–ü–†–û–°–ú–û–¢–†)")
        print("="*80)
        print("1. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã")
        print("2. üîç –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã")
        print("3. üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã")
        print("4. üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º")
        print("5. üîó –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
        print("6. üîç –ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º")
        print("0. üö™ –í—ã—Ö–æ–¥")
        print("="*80)
    
    def show_all_tables(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã"""
        tables = self.data["tables"]
        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        print("-"*80)
        
        for i, (table_name, table_info) in enumerate(tables.items(), 1):
            count = table_info["count"]
            structure_count = len(table_info["structure"])
            print(f"{i:2d}. üìä {table_name:<25} | –ó–∞–ø–∏—Å–µ–π: {count:>6} | –ö–æ–ª–æ–Ω–æ–∫: {structure_count:>2}")
    
    def show_table_data(self, table_name):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
        if table_name not in self.data["tables"]:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        table_info = self.data["tables"][table_name]
        sample_data = table_info["sample_data"]
        
        print(f"\nüìä –¢–ê–ë–õ–ò–¶–ê: {table_name}")
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {table_info['count']} | –ü–æ–∫–∞–∑–∞–Ω–æ: {len(sample_data)}")
        print("-"*120)
        
        if not sample_data:
            print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
        columns = list(sample_data[0].keys())
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        header = " | ".join([f"{col[:15]:<15}" for col in columns])
        print(f"üè∑Ô∏è  {header}")
        print("-"*120)
        
        # –î–∞–Ω–Ω—ã–µ
        for i, row in enumerate(sample_data, 1):
            formatted_row = []
            for col in columns:
                value = row.get(col)
                if value is None:
                    formatted_row.append("NULL".ljust(15))
                elif isinstance(value, bool):
                    formatted_row.append(str(value).ljust(15))
                elif isinstance(value, (dict, list)):
                    formatted_row.append(str(value)[:12].ljust(15) + "...")
                else:
                    formatted_row.append(str(value)[:15].ljust(15))
            
            row_str = " | ".join(formatted_row)
            print(f"{i:3d}. {row_str}")
    
    def show_table_structure(self, table_name):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã"""
        if table_name not in self.data["tables"]:
            print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        structure = self.data["tables"][table_name]["structure"]
        
        print(f"\nüèóÔ∏è  –°–¢–†–£–ö–¢–£–†–ê –¢–ê–ë–õ–ò–¶–´: {table_name}")
        print("-"*80)
        print(f"{'–ö–æ–ª–æ–Ω–∫–∞':<25} | {'–¢–∏–ø':<20} | {'NULL':<8}")
        print("-"*80)
        
        for col in structure:
            nullable = "YES" if col["nullable"] else "NO"
            print(f"{col['name']:<25} | {col['type']:<20} | {nullable:<8}")
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        tables = self.data["tables"]
        print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ë–ê–ó–ï –î–ê–ù–ù–´–•")
        print("-"*60)
        
        total_records = 0
        non_empty_tables = 0
        
        for table_name, table_info in tables.items():
            count = table_info["count"]
            total_records += count
            if count > 0:
                non_empty_tables += 1
                print(f"üìä {table_name:<30} | {count:>8} –∑–∞–ø–∏—Å–µ–π")
        
        print("-"*60)
        print(f"üìã –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        print(f"üìä –¢–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏: {non_empty_tables}")
        print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_records}")
    
    def show_connection_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏"""
        conn = self.data["connection"]
        print(f"\nüîó –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ò")
        print("-"*50)
        print(f"üñ•Ô∏è  –•–æ—Å—Ç: {conn['host']}")
        print(f"üîå –ü–æ—Ä—Ç: {conn['port']}")
        print(f"üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {conn['database']}")
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conn['user']}")
        print(f"üîê –ü–∞—Ä–æ–ª—å: {'*' * len(conn['password'])}")
    
    def search_data(self, search_term):
        """–ü–æ–∏—Å–∫ –ø–æ –¥–∞–Ω–Ω—ã–º"""
        print(f"\nüîç –ü–û–ò–°–ö: '{search_term}'")
        print("-"*60)
        
        found_count = 0
        for table_name, table_info in self.data["tables"].items():
            for i, row in enumerate(table_info["sample_data"]):
                for col, value in row.items():
                    if search_term.lower() in str(value).lower():
                        print(f"üìä {table_name}.{col}: {value}")
                        found_count += 1
                        break
        
        if found_count == 0:
            print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {found_count}")
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ TeleShop Database...")
        
        try:
            while True:
                self.show_menu()
                choice = input("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()
                
                if choice == "0":
                    break
                elif choice == "1":
                    self.show_all_tables()
                elif choice == "2":
                    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
                    for i, table_name in enumerate(self.data["tables"].keys(), 1):
                        print(f"{i}. {table_name}")
                    table_name = input("\nüìã –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ").strip()
                    if table_name:
                        self.show_table_data(table_name)
                elif choice == "3":
                    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
                    for i, table_name in enumerate(self.data["tables"].keys(), 1):
                        print(f"{i}. {table_name}")
                    table_name = input("\nüèóÔ∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ").strip()
                    if table_name:
                        self.show_table_structure(table_name)
                elif choice == "4":
                    self.show_statistics()
                elif choice == "5":
                    self.show_connection_info()
                elif choice == "6":
                    search_term = input("\nüîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ").strip()
                    if search_term:
                        self.search_data(search_term)
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                
                input("\n‚è∏Ô∏è  –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
        except KeyboardInterrupt:
            print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    admin = SimpleDBAdmin()
    admin.run() 